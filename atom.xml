<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RuntimeBroker Blog&#39;s</title>
  
  
  <link href="https://gbk.cx/atom.xml" rel="self"/>
  
  <link href="https://gbk.cx/"/>
  <updated>2024-10-19T14:45:58.839Z</updated>
  <id>https://gbk.cx/</id>
  
  <author>
    <name>RuntimeBroker</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP代码审计环境调试坑点汇总</title>
    <link href="https://gbk.cx/p/7a303294/"/>
    <id>https://gbk.cx/p/7a303294/</id>
    <published>2024-10-19T14:24:16.000Z</published>
    <updated>2024-10-19T14:45:58.839Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码审计环境搭建注意细节"><a href="#代码审计环境搭建注意细节" class="headerlink" title="代码审计环境搭建注意细节"></a>代码审计环境搭建注意细节</h1><h2 id="1-php-ini参数问题："><a href="#1-php-ini参数问题：" class="headerlink" title="1 php.ini参数问题："></a>1 php.ini参数问题：</h2><p>💡 1.在php版本小于<strong>5.3</strong>时，php.ini里面配置xdebug需要先关闭<strong>ZendOptimizer</strong>和<strong>ZendDebugger，</strong>在参数方面注意的细节就是php5.3之后使用该<strong>zend_extension</strong>参数，php5.3之前则使用<strong>zend_extension_ts</strong>参数。</p><p>具体示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">;php5.2如要启用Xdebug要先关闭ZendOptimizer和ZendDebugger</span><br><span class="line">xdebug.profiler_append = 0</span><br><span class="line">xdebug.profiler_enable = 1</span><br><span class="line">xdebug.profiler_enable_trigger = 0</span><br><span class="line">xdebug.profiler_output_dir = <span class="string">&quot;../tmp&quot;</span></span><br><span class="line">xdebug.trace_output_dir = <span class="string">&quot;../tmp&quot;</span></span><br><span class="line">xdebug.profiler_output_name = <span class="string">&quot;cache.out.%t-%s&quot;</span></span><br><span class="line">xdebug.remote_enable = 1</span><br><span class="line">xdebug.remote_autostart = 1</span><br><span class="line">xdebug.remote_handler = <span class="string">&quot;dbgp&quot;</span></span><br><span class="line">xdebug.remote_host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">xdebug.remote_port = 9000</span><br><span class="line">xdebug.idekey = PHPSTORM</span><br><span class="line">zend_extension_ts=<span class="string">&quot;你的PHPstudy路径\PhpStudy\PHPTutorial\php\php-5.2.17\ext\xdebug.dll&quot;</span></span><br><span class="line">[ZendDebugger]</span><br><span class="line">;全部删除或者注释掉</span><br><span class="line">[Zend]</span><br><span class="line">;仅保留下面这一行</span><br><span class="line">xdebug.zend_extension_ts=<span class="string">&quot;你的PHPstudy路径\PhpStudy\PHPTutorial\php\php-5.2.17\ext\xdebug.dll&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：因为ctrl+shift+f已经被占用了，如果有输入法的话就打不开，尤其是win10自带的中文输入法，ctrl+shift+f是简繁体的转化。要打开英文的原装输入法才行。再按ctrl+shift+f就能够打开全局搜索了。</p></blockquote><h2 id="2-IDEA-debug断点调试常用快捷键"><a href="#2-IDEA-debug断点调试常用快捷键" class="headerlink" title="2 IDEA debug断点调试常用快捷键"></a>2 IDEA debug断点调试常用快捷键</h2><p><strong>F8：Step Over 跳过，一行一行的向下走，如果当前行有方法不进入方法。&#96;</strong></p><p><strong>F7：Step Into 跳入，如果当前有方法，进入方法内部，一般用于进入自定义的方法，不会jdk类库的方法。</strong></p><p><strong>F9：跳到下一个断点处。</strong></p><p><strong>Shift+ F8：Step Out 跳出，从跳入的方法内退出到方法调用处，这个时候方法已经执行完毕，只是还没有完成赋值</strong></p><p><strong>Alt+ F8：Evaluate Expression,计算表达式的值。</strong></p><p><strong>Alt+ F9：Run to Cursor:运行到光标处，你可以将光标定位到你需要查看的行，然后使用这个功能，代码会运行到光标处，不需要打断点</strong></p><p><strong>Alt+ F10：Show Exception Point:如果你的<a href="https://so.csdn.net/so/search?q=%E5%85%89%E6%A0%87&spm=1001.2101.3001.7020">光标</a>在其它行或者其它的页面，点击这个按钮可跳转到当前代码执行的行</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;代码审计环境搭建注意细节&quot;&gt;&lt;a href=&quot;#代码审计环境搭建注意细节&quot; class=&quot;headerlink&quot; title=&quot;代码审计环境搭建注意细节&quot;&gt;&lt;/a&gt;代码审计环境搭建注意细节&lt;/h1&gt;&lt;h2 id=&quot;1-php-ini参数问题：&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="代码审计" scheme="https://gbk.cx/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="PHP" scheme="https://gbk.cx/tags/PHP/"/>
    
    <category term="调试" scheme="https://gbk.cx/tags/%E8%B0%83%E8%AF%95/"/>
    
    <category term="debug" scheme="https://gbk.cx/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>MVC设计模式-1</title>
    <link href="https://gbk.cx/p/988d33e4/"/>
    <id>https://gbk.cx/p/988d33e4/</id>
    <published>2024-10-19T14:05:04.000Z</published>
    <updated>2024-10-19T14:22:14.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-MVC介绍"><a href="#1-MVC介绍" class="headerlink" title="1 MVC介绍"></a>1 MVC介绍</h1><p>1、MVC是一个编程思想，是一种设计模式</p><p>2、思想：将一个功能分解成3个部分，M  V  C</p><p>Model（模型）:处理与数据有关的逻辑</p><p>View（视图）:显示页面</p><p>Controller（控制器）:处理业务逻辑</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/19/4I8TglLLlt2pSCVvVN9Y1729346828214.png" alt="1561254292854.png"></p><p>小结：</p><p>1、控制器用来接收请求</p><p>2、以后不能直接请求模型和视图</p><h1 id="2-MVC演化"><a href="#2-MVC演化" class="headerlink" title="2 MVC演化"></a>2 <strong>MVC演化</strong></h1><h2 id="2-1-显示商品"><a href="#2-1-显示商品" class="headerlink" title="2.1 显示商品"></a>2.1 显示商品</h2><p>1、导入products表的数据</p><p>2、将上一讲的MyPDO类拷贝到站点下，改名为MyPDO.class.php，这个文件中只存放MyPDO类</p><p>3、在站点下创建index.php，代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//自动加载类</span></span><br><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>(function(<span class="variable">$class_name</span>)&#123;</span><br><span class="line">    <span class="keyword">require</span> <span class="string">&quot;./<span class="subst">&#123;$class_name&#125;</span>.class.php&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line"><span class="variable">$param</span>=<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>  =&gt;  <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pwd&#x27;</span>   =&gt;  <span class="string">&#x27;root&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="variable">$mypdo</span>= MyPDO::<span class="title function_ invoke__">getInstance</span>(<span class="variable">$param</span>);</span><br><span class="line"><span class="comment">//获取商品数据</span></span><br><span class="line"><span class="variable">$list</span>=<span class="variable">$mypdo</span>-&gt;<span class="title function_ invoke__">fetchAll</span>(<span class="string">&#x27;select * from products&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;无标题文档&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;table border=<span class="string">&#x27;1&#x27;</span> width=<span class="string">&#x27;980&#x27;</span> bordercolor=<span class="string">&#x27;#000&#x27;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;编号&lt;/th&gt; &lt;th&gt;名称&lt;/th&gt; &lt;th&gt;价格&lt;/th&gt; &lt;th&gt;删除&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        <span class="meta">&lt;?php</span> <span class="keyword">foreach</span>(<span class="variable">$list</span> <span class="keyword">as</span> <span class="variable">$rows</span>):<span class="meta">?&gt;</span></span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;<span class="meta">&lt;?=</span><span class="variable">$rows</span>[<span class="string">&#x27;proID&#x27;</span>]<span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;<span class="meta">&lt;?=</span><span class="variable">$rows</span>[<span class="string">&#x27;proname&#x27;</span>]<span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;<span class="meta">&lt;?=</span><span class="variable">$rows</span>[<span class="string">&#x27;proprice&#x27;</span>]<span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        <span class="meta">&lt;?php</span> <span class="keyword">endforeach</span>;<span class="meta">?&gt;</span></span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="2-2-演化一：分离视图"><a href="#2-2-演化一：分离视图" class="headerlink" title="2.2 演化一：分离视图"></a>2.2 演化一：分离视图</h2><p>1、创建products_list.html页面（视图页面）,将显示部分的代码拷贝到视图页面上</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;无标题文档&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;table border=<span class="string">&#x27;1&#x27;</span> width=<span class="string">&#x27;980&#x27;</span> bordercolor=<span class="string">&#x27;#000&#x27;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;编号&lt;/th&gt; &lt;th&gt;名称&lt;/th&gt; &lt;th&gt;价格&lt;/th&gt; &lt;th&gt;删除&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        <span class="meta">&lt;?php</span> <span class="keyword">foreach</span>(<span class="variable">$list</span> <span class="keyword">as</span> <span class="variable">$rows</span>):<span class="meta">?&gt;</span></span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;<span class="meta">&lt;?=</span><span class="variable">$rows</span>[<span class="string">&#x27;proID&#x27;</span>]<span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;<span class="meta">&lt;?=</span><span class="variable">$rows</span>[<span class="string">&#x27;proname&#x27;</span>]<span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;<span class="meta">&lt;?=</span><span class="variable">$rows</span>[<span class="string">&#x27;proprice&#x27;</span>]<span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href=<span class="string">&quot;&quot;</span>&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        <span class="meta">&lt;?php</span> <span class="keyword">endforeach</span>;<span class="meta">?&gt;</span></span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>2、在index.php页面上加载视图</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//自动加载类</span></span><br><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>(function(<span class="variable">$class_name</span>)&#123;</span><br><span class="line">    <span class="keyword">require</span> <span class="string">&quot;./<span class="subst">&#123;$class_name&#125;</span>.class.php&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line"><span class="variable">$param</span>=<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>  =&gt;  <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pwd&#x27;</span>   =&gt;  <span class="string">&#x27;root&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="variable">$mypdo</span>= MyPDO::<span class="title function_ invoke__">getInstance</span>(<span class="variable">$param</span>);</span><br><span class="line"><span class="comment">//获取商品数据</span></span><br><span class="line"><span class="variable">$list</span>=<span class="variable">$mypdo</span>-&gt;<span class="title function_ invoke__">fetchAll</span>(<span class="string">&#x27;select * from products&#x27;</span>);</span><br><span class="line"><span class="comment">//加载视图</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;./products_list.html&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="2-3-演化二：分离模型"><a href="#2-3-演化二：分离模型" class="headerlink" title="2.3 演化二：分离模型"></a>2.3 <strong>演化二：分离模型</strong></h2><p>模型的规则</p><p>1、一个表对应一个模型，表名和模型名一致（必须的）</p><p>2、模型以Model结尾（不是必须的）</p><p>代码实现:</p><p>1、在站点下创建ProductsModel.class.php页面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//products模型用来操作products表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductsModel</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取products表的数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//连接数据库</span></span><br><span class="line">        <span class="variable">$param</span>=<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;user&#x27;</span>  =&gt;  <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;pwd&#x27;</span>   =&gt;  <span class="string">&#x27;root&#x27;</span></span><br><span class="line">        );</span><br><span class="line">        <span class="variable">$mypdo</span>= MyPDO::<span class="title function_ invoke__">getInstance</span>(<span class="variable">$param</span>);</span><br><span class="line">        <span class="comment">//获取商品数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$mypdo</span>-&gt;<span class="title function_ invoke__">fetchAll</span>(<span class="string">&#x27;select * from products&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、在index.php页面中调用模型的getList()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//自动加载类</span></span><br><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>(function(<span class="variable">$class_name</span>)&#123;</span><br><span class="line">    <span class="keyword">require</span> <span class="string">&quot;./<span class="subst">&#123;$class_name&#125;</span>.class.php&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//实例化模型</span></span><br><span class="line"><span class="variable">$model</span>=<span class="keyword">new</span> <span class="title class_">ProductsModel</span>();</span><br><span class="line"><span class="variable">$list</span>=<span class="variable">$model</span>-&gt;<span class="title function_ invoke__">getList</span>();</span><br><span class="line"><span class="comment">//加载视图</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;./products_list.html&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="2-4-演化三：分离基础模型"><a href="#2-4-演化三：分离基础模型" class="headerlink" title="2.4 演化三：分离基础模型"></a>2.4 <strong>演化三：分离基础模型</strong></h3><p>连接数据库的代码每个模型都要使用，所有我们需要将连接数据库的代码封装到基础模型类中（Model）</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/19/yOKWQN5GG4pjr8R2OlAG1729346833736.png" alt="1561257239690.png"></p><p>第一步：在站点下创建Model.class.php页面（基础模型）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//基础模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$mypdo</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">initMyPDO</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//连接数据库</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initMyPDO</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$param</span>=<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;user&#x27;</span>  =&gt;  <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;pwd&#x27;</span>   =&gt;  <span class="string">&#x27;root&#x27;</span></span><br><span class="line">        );</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;mypdo= MyPDO::<span class="title function_ invoke__">getInstance</span>(<span class="variable">$param</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：ProductsModel继承基础模型类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//products模型用来操作products表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductsModel</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取products表的数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;mypdo-&gt;<span class="title function_ invoke__">fetchAll</span>(<span class="string">&#x27;select * from products&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-演化四：分离控制器"><a href="#2-5-演化四：分离控制器" class="headerlink" title="2.5 演化四：分离控制器"></a>2.5 <strong>演化四：分离控制器</strong></h2><p>控制器代码放在index.php页面中是不合理的，因为项目中的控制器会很多，而index.php只有一个。所以需要将控制器分离开来</p><p>控制器的规则：</p><p>1、一个模块对应一个控制器（必须的）</p><p>2、控制器以Controller结尾（不是必须的）</p><p>3、控制器中的方法以Action结尾（不是必须的）,目的防止方法名是PHP关键字</p><p>创建ProductsController.class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//商品模块</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductsController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取商品列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">listAction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//实例化模型</span></span><br><span class="line">        <span class="variable">$model</span>=<span class="keyword">new</span> <span class="title class_">ProductsModel</span>();</span><br><span class="line">        <span class="variable">$list</span>=<span class="variable">$model</span>-&gt;<span class="title function_ invoke__">getList</span>();</span><br><span class="line">        <span class="comment">//加载视图</span></span><br><span class="line">        <span class="keyword">require</span> <span class="string">&#x27;./products_list.html&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.php页面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//自动加载类</span></span><br><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>(function(<span class="variable">$class_name</span>)&#123;</span><br><span class="line">    <span class="keyword">require</span> <span class="string">&quot;./<span class="subst">&#123;$class_name&#125;</span>.class.php&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//确定路由</span></span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]??<span class="string">&#x27;Products&#x27;</span>;   <span class="comment">//控制器</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]??<span class="string">&#x27;list&#x27;</span>;      <span class="comment">//方法</span></span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">ucfirst</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$c</span>));     <span class="comment">//首字母大写</span></span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">strtolower</span>(<span class="variable">$a</span>);              <span class="comment">//转成小写</span></span><br><span class="line"><span class="variable">$controller_name</span>=<span class="variable">$c</span>.<span class="string">&#x27;Controller&#x27;</span>;   <span class="comment">//拼接控制器类名</span></span><br><span class="line"><span class="variable">$action_name</span>=<span class="variable">$a</span>.<span class="string">&#x27;Action&#x27;</span>;   <span class="comment">//拼接方法名</span></span><br><span class="line"><span class="comment">//请求分发</span></span><br><span class="line"><span class="variable">$obj</span>=<span class="keyword">new</span> <span class="variable">$controller_name</span>();</span><br><span class="line"><span class="variable">$obj</span>-&gt;<span class="variable">$action_name</span>();</span><br></pre></td></tr></table></figure><p>a：方法</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/19/fCqIzgEIUOYxTcEEXsJx1729346840604.png" alt="1561261105995.png"></p><p>c：控制器</p><p>通过在url地址上传递参数来寻址。</p><h1 id="3-删除商品"><a href="#3-删除商品" class="headerlink" title="3 删除商品"></a>3 <strong>删除商品</strong></h1><p>小结：</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/19/OyKpvWIy4iktuDbxzjbX1729346852295.png" alt="1561261460012.png"></p><p>注意：每次请求都要从index.php进入。所以index.php又叫入口文件。</p><p>入口(products_list.html)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;td&gt;&lt;a href=<span class="string">&quot;index.php?c=Products&amp;a=del&amp;proid=&lt;?=<span class="subst">$rows</span>[&#x27;proID&#x27;]?&gt;&quot;</span> onclick=<span class="string">&quot;return confirm(&#x27;确定要删除吗&#x27;)&quot;</span>&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>控制器（ProductsController）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//商品模块</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductsController</span> </span>&#123;</span><br><span class="line">..</span><br><span class="line"><span class="comment">//删除商品</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delAction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="variable">$id</span>=(<span class="keyword">int</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;proid&#x27;</span>];<span class="comment">//如果参数明确是整数，要强制转成整形</span></span><br><span class="line"><span class="variable">$model</span>=<span class="keyword">new</span> <span class="title class_">ProductsModel</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$model</span>-&gt;<span class="title function_ invoke__">del</span>(<span class="variable">$id</span>))</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;location:index.php?c=Products&amp;a=list&#x27;</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;删除失败&#x27;</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>模型（ProductsModel）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//products模型用来操作products表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductsModel</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//删除商品</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params"><span class="variable">$proid</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;mypdo-&gt;<span class="title function_ invoke__">exec</span>(<span class="string">&quot;delete from products where proid=<span class="subst">$proid</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-MVC介绍&quot;&gt;&lt;a href=&quot;#1-MVC介绍&quot; class=&quot;headerlink&quot; title=&quot;1 MVC介绍&quot;&gt;&lt;/a&gt;1 MVC介绍&lt;/h1&gt;&lt;p&gt;1、MVC是一个编程思想，是一种设计模式&lt;/p&gt;
&lt;p&gt;2、思想：将一个功能分解成3个部分，M  V</summary>
      
    
    
    
    <category term="Language" scheme="https://gbk.cx/categories/Language/"/>
    
    
    <category term="PHP" scheme="https://gbk.cx/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>MVC设计模式-2</title>
    <link href="https://gbk.cx/p/184625e/"/>
    <id>https://gbk.cx/p/184625e/</id>
    <published>2024-10-19T14:04:58.000Z</published>
    <updated>2024-10-19T14:09:40.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-框架目录"><a href="#1-框架目录" class="headerlink" title="1 框架目录"></a>1 框架目录</h1><h2 id="1-1-创建目录结构"><a href="#1-1-创建目录结构" class="headerlink" title="1.1 创建目录结构"></a>1.1 <strong>创建目录结构</strong></h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/19/EntX05kPuvB8K3Kd3AB61729346712069.png" alt="1561428443831.png"></p><h2 id="1-2-文件分类存放"><a href="#1-2-文件分类存放" class="headerlink" title="1.2 文件分类存放"></a>1.2 <strong>文件分类存放</strong></h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/19/JqvdMQhivwR4xGTVLrCn1729346715253.png" alt="1561429370394.png"></p><p>将文件存放到不同的目录以后，由于类文件地址发生了变化，所以无法完成自动加载类，那么今天的主要任务就是围绕如何实现类的自动加载展开。</p><p>由于每次都请求入口文件，所以”.“表示入口文件所在的目录</p><h1 id="2-添加命名空间"><a href="#2-添加命名空间" class="headerlink" title="2 添加命名空间"></a>2 <strong>添加命名空间</strong></h1><p>通过文件目录地址做命名空间，这样获取了命名空间就能知道文件存放的地址。</p><p>Model.class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Core</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>MyPDO.class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Core</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPDO</span></span>&#123;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>ProductsModel.class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Model</span>;</span><br><span class="line"><span class="comment">//products模型用来操作products表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductsModel</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>ProductsController.class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Controller</span>\<span class="title class_">Admin</span>;</span><br><span class="line"><span class="comment">//商品模块</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductsController</span> </span>&#123;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h1 id="3-框架类实现"><a href="#3-框架类实现" class="headerlink" title="3 框架类实现"></a>3 <strong>框架类实现</strong></h1><h2 id="3-1-定义路径常量"><a href="#3-1-定义路径常量" class="headerlink" title="3.1 定义路径常量"></a>3.1 <strong>定义路径常量</strong></h2><p>由于文件路径使用频率很高，而且路径比较长，所以将固定不变的路径定义成路径常量</p><p>知识点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="title function_ invoke__">getcwd</span>()：入口文件的绝对路径</span><br><span class="line"><span class="number">2</span>、windows下默认的目录分隔符是`\`，Linux下默认的目录分隔符是`/`。DIRECTORY_SEPARATOR常量根据不同的操作系统返回不同的目录分隔符。</span><br></pre></td></tr></table></figure><p>代码实现</p><p>在Core文件夹下创建Framework.class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">initConst</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;DS&#x27;</span>, DIRECTORY_SEPARATOR);  <span class="comment">//定义目录分隔符</span></span><br><span class="line">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;ROOT_PATH&#x27;</span>, <span class="title function_ invoke__">getcwd</span>().DS);  <span class="comment">//入口文件所在的目录</span></span><br><span class="line">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;APP_PATH&#x27;</span>, ROOT_PATH.<span class="string">&#x27;Application&#x27;</span>.DS);   <span class="comment">//application目录</span></span><br><span class="line">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;CONFIG_PATH&#x27;</span>, APP_PATH.<span class="string">&#x27;Config&#x27;</span>.DS);</span><br><span class="line">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;CONTROLLER_PATH&#x27;</span>, APP_PATH.<span class="string">&#x27;Controller&#x27;</span>.DS);</span><br><span class="line">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;MODEL_PATH&#x27;</span>, APP_PATH.<span class="string">&#x27;Model&#x27;</span>.DS);</span><br><span class="line">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;VIEW_PATH&#x27;</span>, APP_PATH.<span class="string">&#x27;View&#x27;</span>.DS);</span><br><span class="line">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;FRAMEWORK_PATH&#x27;</span>, ROOT_PATH.<span class="string">&#x27;Framework&#x27;</span>.DS);</span><br><span class="line">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;CORE_PATH&#x27;</span>, FRAMEWORK_PATH.<span class="string">&#x27;Core&#x27;</span>.DS);</span><br><span class="line">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;LIB_PATH&#x27;</span>, FRAMEWORK_PATH.<span class="string">&#x27;Lib&#x27;</span>.DS);</span><br><span class="line">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;TRAITS_PATH&#x27;</span>, ROOT_PATH.<span class="string">&#x27;Traits&#x27;</span>.DS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-引入配置文件"><a href="#3-2-引入配置文件" class="headerlink" title="3.2 引入配置文件"></a>3.2 <strong>引入配置文件</strong></h2><p>1、在config目录下创建config.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">    <span class="comment">//数据库配置</span></span><br><span class="line">    <span class="string">&#x27;database&#x27;</span>=&gt;<span class="keyword">array</span>(),</span><br><span class="line">    <span class="comment">//应用程序配置</span></span><br><span class="line">    <span class="string">&#x27;app&#x27;</span>       =&gt;<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;dp&#x27;</span>    =&gt;  <span class="string">&#x27;Admin&#x27;</span>,        <span class="comment">//默认平台</span></span><br><span class="line">        <span class="string">&#x27;dc&#x27;</span>    =&gt;  <span class="string">&#x27;Products&#x27;</span>,     <span class="comment">//默认控制器</span></span><br><span class="line">        <span class="string">&#x27;da&#x27;</span>    =&gt;  <span class="string">&#x27;list&#x27;</span>          <span class="comment">//默认方法</span></span><br><span class="line">    ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>2、在框架类中引入配置文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">initConfig</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="variable">$GLOBALS</span>[<span class="string">&#x27;config&#x27;</span>]=<span class="keyword">require</span> CONFIG_PATH.<span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考：配置文件为什么不保存在常量中？</p><p>答：因为7.0之前，常量不能保存数组和对象。</p><h2 id="3-3-确定路由"><a href="#3-3-确定路由" class="headerlink" title="3.3 确定路由"></a>3.3 <strong>确定路由</strong></h2><p>p：【platform】平台</p><p>c：【controller】控制器</p><p>a：【action】方法</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/19/kvd3WEQnZpvLfboxrlIH1729346721027.png" alt="1561431781576.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">initRoutes</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$p</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>]??<span class="variable">$GLOBALS</span>[<span class="string">&#x27;config&#x27;</span>][<span class="string">&#x27;app&#x27;</span>][<span class="string">&#x27;dp&#x27;</span>];</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]??<span class="variable">$GLOBALS</span>[<span class="string">&#x27;config&#x27;</span>][<span class="string">&#x27;app&#x27;</span>][<span class="string">&#x27;dc&#x27;</span>];</span><br><span class="line">    <span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]??<span class="variable">$GLOBALS</span>[<span class="string">&#x27;config&#x27;</span>][<span class="string">&#x27;app&#x27;</span>][<span class="string">&#x27;da&#x27;</span>];</span><br><span class="line">    <span class="variable">$p</span>=<span class="title function_ invoke__">ucfirst</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$p</span>));</span><br><span class="line">    <span class="variable">$c</span>=<span class="title function_ invoke__">ucfirst</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$c</span>));<span class="comment">//首字母大写</span></span><br><span class="line">    <span class="variable">$a</span>=<span class="title function_ invoke__">strtolower</span>(<span class="variable">$a</span>);<span class="comment">//转成小写</span></span><br><span class="line">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;PLATFROM_NAME&#x27;</span>, <span class="variable">$p</span>);    <span class="comment">//平台名常量</span></span><br><span class="line">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;CONTROLLER_NAME&#x27;</span>, <span class="variable">$c</span>);  <span class="comment">//控制器名常量</span></span><br><span class="line">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;ACTION_NAME&#x27;</span>, <span class="variable">$a</span>);      <span class="comment">//方法名常量</span></span><br><span class="line">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;__URL__&#x27;</span>, CONTROLLER_PATH.<span class="variable">$p</span>.DS);   <span class="comment">//当前请求控制器的目录地址</span></span><br><span class="line">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;__VIEW__&#x27;</span>,VIEW_PATH.<span class="variable">$p</span>.DS);     <span class="comment">//当前视图的目录地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-自动加载类"><a href="#3-4-自动加载类" class="headerlink" title="3.4 自动加载类"></a>3.4 <strong>自动加载类</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">initAutoLoad</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">spl_autoload_register</span>(function(<span class="variable">$class_name</span>)&#123;</span><br><span class="line">        <span class="variable">$namespace</span>= <span class="title function_ invoke__">dirname</span>(<span class="variable">$class_name</span>);   <span class="comment">//命名空间</span></span><br><span class="line">        <span class="variable">$class_name</span>= <span class="title function_ invoke__">basename</span>(<span class="variable">$class_name</span>); <span class="comment">//类名</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$namespace</span>, <span class="keyword">array</span>(<span class="string">&#x27;Core&#x27;</span>,<span class="string">&#x27;Lib&#x27;</span>)))   <span class="comment">//命名空间在Core和Lib下</span></span><br><span class="line">            <span class="variable">$path</span>= FRAMEWORK_PATH.<span class="variable">$namespace</span>.DS.<span class="variable">$class_name</span>.<span class="string">&#x27;.class.php&#x27;</span>;</span><br><span class="line">        <span class="keyword">elseif</span>(<span class="variable">$namespace</span>==<span class="string">&#x27;Model&#x27;</span>)     <span class="comment">//文件在Model下</span></span><br><span class="line">            <span class="variable">$path</span>=MODEL_PATH.<span class="variable">$class_name</span>.<span class="string">&#x27;.class.php&#x27;</span>;</span><br><span class="line">        <span class="keyword">elseif</span>(<span class="variable">$namespace</span>==<span class="string">&#x27;Traits&#x27;</span>)    <span class="comment">//文件在Traits下</span></span><br><span class="line">            <span class="variable">$path</span>=TRAITS_PATH.<span class="variable">$class_name</span>.<span class="string">&#x27;.class.php&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span>   <span class="comment">//控制器</span></span><br><span class="line">            <span class="variable">$path</span>=CONTROLLER_PATH.PLATFROM_NAME.DS.<span class="variable">$class_name</span>.<span class="string">&#x27;.class.php&#x27;</span>; </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$path</span>) &amp;&amp; <span class="title function_ invoke__">is_file</span>(<span class="variable">$path</span>))</span><br><span class="line">            <span class="keyword">require</span> <span class="variable">$path</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-请求分发"><a href="#3-5-请求分发" class="headerlink" title="3.5 请求分发"></a>3.5 <strong>请求分发</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">initDispatch</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$controller_name</span>=<span class="string">&#x27;\Controller\\&#x27;</span>.PLATFROM_NAME.<span class="string">&#x27;\\&#x27;</span>.CONTROLLER_NAME.<span class="string">&#x27;Controller&#x27;</span>;<span class="comment">//拼接控制器类名</span></span><br><span class="line">    <span class="variable">$action_name</span>=ACTION_NAME.<span class="string">&#x27;Action&#x27;</span>;<span class="comment">//拼接方法名</span></span><br><span class="line">    <span class="variable">$obj</span>=<span class="keyword">new</span> <span class="variable">$controller_name</span>();</span><br><span class="line">    <span class="variable">$obj</span>-&gt;<span class="variable">$action_name</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-6-封装run-方法"><a href="#3-6-封装run-方法" class="headerlink" title="3.6 封装run()方法"></a>3.6 <strong>封装run()方法</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Framework</span></span>&#123;</span><br><span class="line">    <span class="comment">//启动框架</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">self</span>::<span class="title function_ invoke__">initConst</span>();</span><br><span class="line">        <span class="built_in">self</span>::<span class="title function_ invoke__">initConfig</span>();</span><br><span class="line">        <span class="built_in">self</span>::<span class="title function_ invoke__">initRoutes</span>();</span><br><span class="line">        <span class="built_in">self</span>::<span class="title function_ invoke__">initAutoLoad</span>();</span><br><span class="line">        <span class="built_in">self</span>::<span class="title function_ invoke__">initDispatch</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h2 id="3-7-在入口中调用run-方法"><a href="#3-7-在入口中调用run-方法" class="headerlink" title="3.7 在入口中调用run()方法"></a>3.7 <strong>在入口中调用run()方法</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;./Framework/Core/Framework.class.php&#x27;</span>;</span><br><span class="line"><span class="title class_">Framework</span>::<span class="title function_ invoke__">run</span>();</span><br></pre></td></tr></table></figure><p>run()方法调用后就启动了框架</p><h1 id="4-运行项目"><a href="#4-运行项目" class="headerlink" title="4 运行项目"></a>4 <strong>运行项目</strong></h1><p>1、连接数据库的参数从配置文件中获取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//连接数据库</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initMyPDO</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="variable language_">$this</span>-&gt;mypdo= MyPDO::<span class="title function_ invoke__">getInstance</span>(<span class="variable">$GLOBALS</span>[<span class="string">&#x27;config&#x27;</span>][<span class="string">&#x27;database&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、更改ProductsControleller控制器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Controller</span>\<span class="title class_">Admin</span>;</span><br><span class="line"><span class="comment">//商品模块</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductsController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取商品列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">listAction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//实例化模型</span></span><br><span class="line">            <span class="variable">$model</span>=<span class="keyword">new</span> <span class="title class_">\Model\ProductsModel</span>();</span><br><span class="line">            <span class="variable">$list</span>=<span class="variable">$model</span>-&gt;<span class="title function_ invoke__">getList</span>();</span><br><span class="line">            <span class="comment">//加载视图</span></span><br><span class="line">            <span class="keyword">require</span> __VIEW__.<span class="string">&#x27;products_list.html&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除商品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delAction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="variable">$model</span>=<span class="keyword">new</span> <span class="title class_">\Model\ProductsModel</span>();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、更改ProductsModel类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Model</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductsModel</span> <span class="keyword">extends</span> \<span class="title">Core</span>\<span class="title">Model</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、更改MyPDO类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchType</span>(<span class="params"><span class="variable">$type</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$type</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;num&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> \PDO::<span class="variable constant_">FETCH_NUM</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;both&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> \PDO::<span class="variable constant_">FETCH_BOTH</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;obj&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> \PDO::<span class="variable constant_">FETCH_OBJ</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">             <span class="keyword">return</span> \PDO::<span class="variable constant_">FETCH_ASSOC</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//所有的内置类都在公共的命名空间下。</span></span><br></pre></td></tr></table></figure><p>测试：成功</p><h1 id="5-traits代码复用"><a href="#5-traits代码复用" class="headerlink" title="5 traits代码复用"></a>5 <strong>traits代码复用</strong></h1><p>有的控制器操作完毕后要跳转，有的不需要，</p><p>解决：将跳转的方法封装到traits中。</p><p>代码实现</p><p>1、将准备好的图片拷贝到Public目录下</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/19/u1nuVOMF76FH2iOtZ8o81729346725621.png" alt="1561446087858.png"></p><p>2、在Traits目录中创建Jump.class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//跳转的插件</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Traits</span>;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Jump</span></span>&#123;</span><br><span class="line">    <span class="comment">//封装成功的跳转</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params"><span class="variable">$url</span>,<span class="variable">$info</span>=<span class="string">&#x27;&#x27;</span>,<span class="variable">$time</span>=<span class="number">1</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">redirect</span>(<span class="variable">$url</span>, <span class="variable">$info</span>, <span class="variable">$time</span>, <span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//封装失败跳转</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params"><span class="variable">$url</span>,<span class="variable">$info</span>=<span class="string">&#x27;&#x27;</span>,<span class="variable">$time</span>=<span class="number">3</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">redirect</span>(<span class="variable">$url</span>, <span class="variable">$info</span>, <span class="variable">$time</span>, <span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 作用：跳转的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $url string 跳转的地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $info string 显示信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $time int 停留时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $flag string 显示模式  success|error</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">redirect</span>(<span class="params"><span class="variable">$url</span>,<span class="variable">$info</span>,<span class="variable">$time</span>,<span class="variable">$flag</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$info</span>==<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="title function_ invoke__">header</span> (<span class="string">&quot;location:<span class="subst">&#123;$url&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&lt;&lt;&lt;str</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;!--</span></span><br><span class="line"><span class="string">    &lt;meta http-equiv=&quot;refresh&quot; content=&quot;3;http://www.php.com&quot;/&gt;</span></span><br><span class="line"><span class="string">    --&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Document&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;style&gt;</span></span><br><span class="line"><span class="string">body&#123;</span></span><br><span class="line"><span class="string">    text-align: center;</span></span><br><span class="line"><span class="string">    font-family: &#x27;微软雅黑&#x27;;</span></span><br><span class="line"><span class="string">    font-size: 18px;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">#success,#error&#123;</span></span><br><span class="line"><span class="string">    font-size: 36px;</span></span><br><span class="line"><span class="string">    margin: 10px auto;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">#success&#123;</span></span><br><span class="line"><span class="string">    color: #090;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">#error&#123;</span></span><br><span class="line"><span class="string">    color: #F00;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;img src=&quot;/Public/images/<span class="subst">&#123;$flag&#125;</span>.fw.png&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;div id=&#x27;<span class="subst">&#123;$flag&#125;</span>&#x27;&gt;<span class="subst">&#123;$info&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div&gt;&lt;span id=&#x27;t&#x27;&gt;<span class="subst">&#123;$time&#125;</span>&lt;/span&gt;秒以后跳转&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">window.onload=function()&#123;</span></span><br><span class="line"><span class="string">    var t=<span class="subst">&#123;$time&#125;</span>;</span></span><br><span class="line"><span class="string">    setInterval(function()&#123;</span></span><br><span class="line"><span class="string">        document.getElementById(&#x27;t&#x27;).innerHTML=--t;</span></span><br><span class="line"><span class="string">        if(t==0)</span></span><br><span class="line"><span class="string">            location.href=&#x27;index.php&#x27;;</span></span><br><span class="line"><span class="string">    &#125;,1000)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">str</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ProductsController控制器中使用原型</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Controller</span>\<span class="title class_">Admin</span>;</span><br><span class="line"><span class="comment">//商品模块</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductsController</span></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> \<span class="title">Traits</span>\<span class="title">Jump</span>;   <span class="comment">//复用代码</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h1 id="6-删除功能"><a href="#6-删除功能" class="headerlink" title="6 删除功能"></a>6 <strong>删除功能</strong></h1><p>入口</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;index.php?p=Admin&amp;c=Products&amp;a=del&amp;proid=&lt;?=<span class="subst">$rows</span>[&#x27;proID&#x27;]?&gt;&quot;</span> onclick=<span class="string">&quot;return confirm(&#x27;确定要删除吗&#x27;)&quot;</span>&gt;删除&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>控制器（ProductsController）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delAction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="variable">$id</span>=(<span class="keyword">int</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;proid&#x27;</span>];<span class="comment">//如果参数明确是整数，要强制转成整形</span></span><br><span class="line">   <span class="variable">$model</span>=<span class="keyword">new</span> \\Model\\<span class="title function_ invoke__">ProductsModel</span>();</span><br><span class="line">   <span class="keyword">if</span>(<span class="variable">$model</span>-&gt;<span class="title function_ invoke__">del</span>(<span class="variable">$id</span>))</span><br><span class="line">       <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">success</span>(<span class="string">&#x27;index.php?p=Admin&amp;c=Products&amp;a=list&#x27;</span>, <span class="string">&#x27;删除成功&#x27;</span>);</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">error</span>(<span class="string">&#x27;index.php?p=admin&amp;c=Products&amp;a=list&#x27;</span>, <span class="string">&#x27;删除失败&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模型、视图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无改变</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-框架目录&quot;&gt;&lt;a href=&quot;#1-框架目录&quot; class=&quot;headerlink&quot; title=&quot;1 框架目录&quot;&gt;&lt;/a&gt;1 框架目录&lt;/h1&gt;&lt;h2 id=&quot;1-1-创建目录结构&quot;&gt;&lt;a href=&quot;#1-1-创建目录结构&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Language" scheme="https://gbk.cx/categories/Language/"/>
    
    
    <category term="PHP" scheme="https://gbk.cx/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP-PDO&amp;PDO类&amp;PDO核心类&amp;封装PDO单例</title>
    <link href="https://gbk.cx/p/cf780ffd/"/>
    <id>https://gbk.cx/p/cf780ffd/</id>
    <published>2024-10-19T14:00:59.000Z</published>
    <updated>2024-10-19T14:21:51.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-PDO介绍"><a href="#1-PDO介绍" class="headerlink" title="1 PDO介绍"></a>1 PDO介绍</h1><p>方法一：mysql扩展【这种方式php7已经淘汰】<br>方法二：mysqli扩展<br>方法三：PDO扩展</p><h2 id="1-1-连接数据库方式"><a href="#1-1-连接数据库方式" class="headerlink" title="1.1 连接数据库方式"></a>1.1 <strong>连接数据库方式</strong></h2><h2 id="1-2-PDO介绍"><a href="#1-2-PDO介绍" class="headerlink" title="1.2 PDO介绍"></a>1.2 <strong>PDO介绍</strong></h2><p>PDO（PHP Data Object）扩展为PHP访问各种数据库提供了一个轻量级，一致性的接口。无论访问什么数据库，都可以通过一致性的接口去操作。</p><h2 id="1-3-开启PDO扩展"><a href="#1-3-开启PDO扩展" class="headerlink" title="1.3 开启PDO扩展"></a>1.3 <strong>开启PDO扩展</strong></h2><p>开启PDO连接MySQL扩展</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extension=php_pdo_mysql.dll</span><br></pre></td></tr></table></figure><h1 id="2-PDO核心类"><a href="#2-PDO核心类" class="headerlink" title="2 PDO核心类"></a>2 <strong>PDO核心类</strong></h1><p>1、PDO类：表示PHP和数据库之间的一个连接<br>2、PDOStatement 类<br>    第一：表示执行数据查询语句（select ,show）后的相关结果集<br>    第二：预处理对象<br>3、PDOException类：表示PDO的异常</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/19/MspHM8Z9Hw6nMSco0zyv1729346574314.png" alt="1561083447524.png"></p><h1 id="3-实例化PDO对象"><a href="#3-实例化PDO对象" class="headerlink" title="3 实例化PDO对象"></a>3 <strong>实例化PDO对象</strong></h1><p>语法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">__construct</span>(<span class="variable">$dsn</span>,用户名,密码)</span><br></pre></td></tr></table></figure><h2 id="3-1-DSN"><a href="#3-1-DSN" class="headerlink" title="3.1 DSN"></a>3.1 DSN</h2><p>DSN：data source name，数据源名称，包含的是连接数据库的信息，格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dsn=数据库类型:host=主机地址;port=端口号;dbname=数据库名称;charset=字符集</span><br></pre></td></tr></table></figure><p>数据库类型：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MySQL数据库    =&gt;  mysql:</span><br><span class="line">oracle数据库   =&gt;  oci:</span><br><span class="line">SQL Server      =&gt;sqlsrv:</span><br><span class="line">具体驱动类型参见手册“PDO驱动”</span><br></pre></td></tr></table></figure><h2 id="3-2-实例化PDO"><a href="#3-2-实例化PDO" class="headerlink" title="3.2 实例化PDO"></a>3.2 实例化PDO</h2><p>实例化PDO的过程就是连接数据库的过程</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dsn</span>=<span class="string">&#x27;mysql:host=localhost;port=3306;dbname=data;charset=utf8&#x27;</span>;</span><br><span class="line"><span class="variable">$pdo</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$pdo</span>); <span class="comment">//object(PDO)#1 (0) &#123; &#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-注意事项"><a href="#3-3-注意事项" class="headerlink" title="3.3 注意事项"></a>3.3 注意事项</h2><p>1、如果连接的是本地数据库，host可以省略</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dsn</span>=<span class="string">&#x27;mysql:port=3306;dbname=data;charset=utf8&#x27;</span>;</span><br><span class="line"><span class="variable">$pdo</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$pdo</span>); <span class="comment">//object(PDO)#1 (0) &#123; &#125;</span></span><br></pre></td></tr></table></figure><p>2、如果使用的是3306端口，port可以省略</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dsn</span>=<span class="string">&#x27;mysql:dbname=data;charset=utf8&#x27;</span>;</span><br><span class="line"><span class="variable">$pdo</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$pdo</span>); <span class="comment">//object(PDO)#1 (0) &#123; &#125;</span></span><br></pre></td></tr></table></figure><p>3、charset也省略，如果省略，使用的是默认字符编码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dsn</span>=<span class="string">&#x27;mysql:dbname=data&#x27;</span>;</span><br><span class="line"><span class="variable">$pdo</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$pdo</span>);</span><br></pre></td></tr></table></figure><p>4、dbname也可以省略，如果省略就没有选择数据库</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dsn</span>=<span class="string">&#x27;mysql:&#x27;</span>;</span><br><span class="line"><span class="variable">$pdo</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$pdo</span>);</span><br></pre></td></tr></table></figure><p>5、host、port、dbname、charset不区分大小写，没有先后顺序</p><p>6、驱动名称不能省略，冒号不能省略（因为冒号是驱动名组成部分），数据库驱动只能小写</p><h1 id="4-使用PDO"><a href="#4-使用PDO" class="headerlink" title="4 使用PDO"></a>4 <strong>使用PDO</strong></h1><h2 id="4-1-执行数据操作语句"><a href="#4-1-执行数据操作语句" class="headerlink" title="4.1 执行数据操作语句"></a>4.1 执行数据操作语句</h2><p>方法:$pdo-&gt;exec($sql)，执行数据增、删、改语句，执行成功返回受影响的记录数，如果SQL语句错误返回false。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//1、实例化PDO</span></span><br><span class="line"><span class="variable">$dsn</span>=<span class="string">&#x27;mysql:host=localhost;port=3306;dbname=data;charset=utf8&#x27;</span>;</span><br><span class="line"><span class="variable">$pdo</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="comment">//2执行数据操作语句</span></span><br><span class="line"><span class="comment">//2.1 执行增加</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if($pdo-&gt;exec(&quot;insert into news values (null,&#x27;bb&#x27;,&#x27;bbbbbb&#x27;,unix_timestamp())&quot;))</span></span><br><span class="line"><span class="comment">    echo &#x27;自动增长的编号是：&#x27;.$pdo-&gt;lastInsertId (),&#x27;&lt;br&gt;&#x27;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//2.2 执行修改</span></span><br><span class="line"><span class="comment">//echo $pdo-&gt;exec(&quot;update news set title=&#x27;静夜思&#x27; where id in (3,4)&quot;);</span></span><br><span class="line"><span class="comment">//2.3 执行删除</span></span><br><span class="line"><span class="comment">//echo $pdo-&gt;exec(&#x27;delete from news where id=5&#x27;);\</span></span><br><span class="line"><span class="comment">//2.4 完善</span></span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;update news set title=&#x27;静夜思1&#x27; where ids in (3,4)&quot;</span>;</span><br><span class="line"><span class="variable">$rs</span>=<span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">exec</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$rs</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;SQL语句执行成功&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$sql</span>, <span class="number">0</span>,<span class="number">6</span>)==<span class="string">&#x27;insert&#x27;</span>)</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;自动增长的编号是：&#x27;</span>.<span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">lastInsertId</span> (),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;受到影响的记录数是：&#x27;</span>.<span class="variable">$rs</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">elseif</span>(<span class="variable">$rs</span>===<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;数据没有变化&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">elseif</span>(<span class="variable">$rs</span>===<span class="literal">false</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;SQL语句执行失败&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;错误编号：&#x27;</span>.<span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">errorCode</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="comment">//var_dump($pdo-&gt;errorInfo());</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;错误信息：&#x27;</span>.<span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">errorInfo</span>()[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-执行数据查询语句"><a href="#4-2-执行数据查询语句" class="headerlink" title="4.2 执行数据查询语句"></a>4.2 执行数据查询语句</h2><p>方法：$pdo-&gt;query($sql)，返回的是PDOStatement对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dsn</span>=<span class="string">&#x27;mysql:dbname=data;charset=utf8&#x27;</span>;</span><br><span class="line"><span class="variable">$pdo</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="comment">//1、执行数据查询语句</span></span><br><span class="line"><span class="variable">$stmt</span>=<span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;select * from products&#x27;</span>);</span><br><span class="line"><span class="comment">//var_dump($stmt);        //object(PDOStatement)</span></span><br><span class="line"><span class="comment">//2、获取数据</span></span><br><span class="line"><span class="comment">//2.1  获取二维数组</span></span><br><span class="line"><span class="comment">//$rs=$stmt-&gt;fetchAll();  //默认返回关联和索引数组</span></span><br><span class="line"><span class="comment">//$rs=$stmt-&gt;fetchAll(PDO::FETCH_BOTH);     //返回关联和索引数组</span></span><br><span class="line"><span class="comment">//$rs=$stmt-&gt;fetchAll(PDO::FETCH_NUM);      //返回索引数组</span></span><br><span class="line"><span class="comment">//$rs=$stmt-&gt;fetchAll(PDO::FETCH_ASSOC);    //返回关联数组</span></span><br><span class="line"><span class="comment">//$rs=$stmt-&gt;fetchAll(PDO::FETCH_OBJ);        //返回对象数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.2  获取一维数组,匹配完成后指针下移一条</span></span><br><span class="line"><span class="comment">//$rs=$stmt-&gt;fetch();     //关联和索引数组</span></span><br><span class="line"><span class="comment">//$rs=$stmt-&gt;fetch(PDO::FETCH_NUM);   //索引数组</span></span><br><span class="line"><span class="comment">//例题：通过while循环获取所有数据</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">while($row=$stmt-&gt;fetch(PDO::FETCH_ASSOC))&#123;</span></span><br><span class="line"><span class="comment">    $rs[]=$row;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">echo &#x27;&lt;pre&gt;&#x27;;</span></span><br><span class="line"><span class="comment">var_dump($rs);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.3  匹配列：匹配当前行的第n列，列的编号从0开始，匹配完毕后指针下移一条</span></span><br><span class="line"><span class="comment">//echo $stmt-&gt;fetchColumn();  //获取当前行的第0列</span></span><br><span class="line"><span class="comment">//echo $stmt-&gt;fetchColumn(1);  //获取当前行的第1列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.4  总行数，总列数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">echo &#x27;总行数：&#x27;.$stmt-&gt;rowCount(),&#x27;&lt;br&gt;&#x27;;</span></span><br><span class="line"><span class="comment">echo &#x27;总列数：&#x27;.$stmt-&gt;columnCount();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.5 遍历PDOStatement对象（PDOStatement对象是有迭代器的）</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$stmt</span> <span class="keyword">as</span> <span class="variable">$row</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$row</span>[<span class="string">&#x27;proname&#x27;</span>],<span class="string">&#x27;-&#x27;</span>,<span class="variable">$row</span>[<span class="string">&#x27;proprice&#x27;</span>],<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stdClass类是所有PHP类的父类</span><br></pre></td></tr></table></figure><h2 id="4-3-PDO操作事务"><a href="#4-3-PDO操作事务" class="headerlink" title="4.3 PDO操作事务"></a>4.3 <strong>PDO操作事务</strong></h2><p>事务：是一个整体，要么一起执行，要么一起回滚</p><p>事务的特性：原子性，一致性，隔离性，永久性</p><p>需要将多个SQL语句作为一个整体执行，就需要使用到事务</p><p>语法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start transaction 或 begin       开启事务</span><br><span class="line">commit  提交事务</span><br><span class="line">rollback    回滚事务</span><br></pre></td></tr></table></figure><p>小结：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">beginTransaction</span>()   开启事务</span><br><span class="line"><span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">commit</span> ()            提交事务</span><br><span class="line"><span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">rollBack</span>()           回滚事务</span><br></pre></td></tr></table></figure><h2 id="4-4-PDO操作预处理"><a href="#4-4-PDO操作预处理" class="headerlink" title="4.4 PDO操作预处理"></a>4.4 <strong>PDO操作预处理</strong></h2><h1 id="5-PDO异常处理"><a href="#5-PDO异常处理" class="headerlink" title="5 PDO异常处理"></a>5 <strong>PDO异常处理</strong></h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="variable">$dsn</span>=<span class="string">&#x27;mysql:dbname=data;charset=utf8&#x27;</span>;</span><br><span class="line">    <span class="variable">$pdo</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">    <span class="comment">//这是PDO错误模式属性，PDO自动抛出异常</span></span><br><span class="line">    <span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">setAttribute</span>(PDO::<span class="variable constant_">ATTR_ERRMODE</span>, PDO::<span class="variable constant_">ERRMODE_EXCEPTION</span>);</span><br><span class="line">    <span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;select * from newsssssss&#x27;</span>);  <span class="comment">//自动抛出异常</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException <span class="variable">$ex</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;错误信息：&#x27;</span>.<span class="variable">$ex</span>-&gt;<span class="title function_ invoke__">getMessage</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;错误文件：&#x27;</span>.<span class="variable">$ex</span>-&gt;<span class="title function_ invoke__">getFile</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;错误行号：&#x27;</span>.<span class="variable">$ex</span>-&gt;<span class="title function_ invoke__">getLine</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结：</p><p>1、PDOException是PDO的异常类</p><p>2、实例化PDO会自动抛出异常</p><p>3、其他操作不会抛出异常，需要设置PDO的异常模式</p><p>4、PDO异常模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PDO::ERRMODE_EXCEPTION抛出异常</span><br><span class="line">PDO::ERRMODE_SILENT中断</span><br><span class="line">PDO::ERRMODE_WARNING警告</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="6-单例模式封装MyPDO类"><a href="#6-单例模式封装MyPDO类" class="headerlink" title="6 单例模式封装MyPDO类"></a>6 <strong>单例模式封装MyPDO类</strong></h1><h2 id="6-1-步骤"><a href="#6-1-步骤" class="headerlink" title="6.1 步骤"></a>6.1 步骤</h2><p>1、单例模式</p><p>2、初始化参数</p><p>3、连接数据库</p><p>4、执行增删改</p><p>5、执行查询</p><p>a）返回二维数组</p><p>b）返回一维数组</p><p>c）返回一行一列</p><h2 id="6-2-代码实现"><a href="#6-2-代码实现" class="headerlink" title="6.2 代码实现"></a>6.2 代码实现</h2><p>第一部分：单例、初始化参数、实例化PDO</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPDO</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$type</span>;      <span class="comment">//数据库类别</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$host</span>;      <span class="comment">//主机地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$port</span>;      <span class="comment">//端口号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$dbname</span>;    <span class="comment">//数据库名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$charset</span>;   <span class="comment">//字符集</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>;      <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pwd</span>;       <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pdo</span>;       <span class="comment">//保存PDO对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$instance</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$param</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">initParam</span>(<span class="variable">$param</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">initPDO</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"><span class="variable">$param</span>=<span class="keyword">array</span>(<span class="params"></span>)</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">self</span>::<span class="variable">$instance</span> <span class="keyword">instanceof</span> <span class="built_in">self</span>)</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$instance</span>=<span class="keyword">new</span> <span class="built_in">self</span>(<span class="variable">$param</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initParam</span>(<span class="params"><span class="variable">$param</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;type=<span class="variable">$param</span>[<span class="string">&#x27;type&#x27;</span>]??<span class="string">&#x27;mysql&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;host=<span class="variable">$param</span>[<span class="string">&#x27;host&#x27;</span>]??<span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;port=<span class="variable">$param</span>[<span class="string">&#x27;port&#x27;</span>]??<span class="string">&#x27;3306&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dbname=<span class="variable">$param</span>[<span class="string">&#x27;dbname&#x27;</span>]??<span class="string">&#x27;data&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;charset=<span class="variable">$param</span>[<span class="string">&#x27;charset&#x27;</span>]??<span class="string">&#x27;utf8&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user=<span class="variable">$param</span>[<span class="string">&#x27;user&#x27;</span>]??<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pwd=<span class="variable">$param</span>[<span class="string">&#x27;pwd&#x27;</span>]??<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化PDO</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initPDO</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="variable">$dsn</span>=<span class="string">&quot;<span class="subst">&#123;$this-&gt;type&#125;</span>:host=<span class="subst">&#123;$this-&gt;host&#125;</span>;port=<span class="subst">&#123;$this-&gt;port&#125;</span>;dbname=<span class="subst">&#123;$this-&gt;dbname&#125;</span>;charset=<span class="subst">&#123;$this-&gt;charset&#125;</span>&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;pdo=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>, <span class="variable">$this</span>-&gt;user, <span class="variable">$this</span>-&gt;pwd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PDOException <span class="variable">$ex</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;错误编号：&#x27;</span>.<span class="variable">$ex</span>-&gt;<span class="title function_ invoke__">getCode</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;错误行号：&#x27;</span>.<span class="variable">$ex</span>-&gt;<span class="title function_ invoke__">getLine</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;错误文件：&#x27;</span>.<span class="variable">$ex</span>-&gt;<span class="title function_ invoke__">getFile</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;错误信息：&#x27;</span>.<span class="variable">$ex</span>-&gt;<span class="title function_ invoke__">getMessage</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$param</span>=<span class="keyword">array</span>(</span><br><span class="line">);</span><br><span class="line"><span class="variable">$mypdo</span>= MyPDO::<span class="title function_ invoke__">getInstance</span>(<span class="variable">$param</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$mypdo</span>);</span><br></pre></td></tr></table></figure><p>第二部分：数据操作部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPDO</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$type</span>;      <span class="comment">//数据库类别</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$host</span>;      <span class="comment">//主机地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$port</span>;      <span class="comment">//端口号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$dbname</span>;    <span class="comment">//数据库名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$charset</span>;   <span class="comment">//字符集</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>;      <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pwd</span>;       <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pdo</span>;       <span class="comment">//保存PDO对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$instance</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$param</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">initParam</span>(<span class="variable">$param</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">initPDO</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">initException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"><span class="variable">$param</span>=<span class="keyword">array</span>(<span class="params"></span>)</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">self</span>::<span class="variable">$instance</span> <span class="keyword">instanceof</span> <span class="built_in">self</span>)</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$instance</span>=<span class="keyword">new</span> <span class="built_in">self</span>(<span class="variable">$param</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initParam</span>(<span class="params"><span class="variable">$param</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;type=<span class="variable">$param</span>[<span class="string">&#x27;type&#x27;</span>]??<span class="string">&#x27;mysql&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;host=<span class="variable">$param</span>[<span class="string">&#x27;host&#x27;</span>]??<span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;port=<span class="variable">$param</span>[<span class="string">&#x27;port&#x27;</span>]??<span class="string">&#x27;3306&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dbname=<span class="variable">$param</span>[<span class="string">&#x27;dbname&#x27;</span>]??<span class="string">&#x27;data&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;charset=<span class="variable">$param</span>[<span class="string">&#x27;charset&#x27;</span>]??<span class="string">&#x27;utf8&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user=<span class="variable">$param</span>[<span class="string">&#x27;user&#x27;</span>]??<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pwd=<span class="variable">$param</span>[<span class="string">&#x27;pwd&#x27;</span>]??<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化PDO</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initPDO</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="variable">$dsn</span>=<span class="string">&quot;<span class="subst">&#123;$this-&gt;type&#125;</span>:host=<span class="subst">&#123;$this-&gt;host&#125;</span>;port=<span class="subst">&#123;$this-&gt;port&#125;</span>;dbname=<span class="subst">&#123;$this-&gt;dbname&#125;</span>;charset=<span class="subst">&#123;$this-&gt;charset&#125;</span>&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;pdo=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>, <span class="variable">$this</span>-&gt;user, <span class="variable">$this</span>-&gt;pwd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PDOException <span class="variable">$ex</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">showException</span>(<span class="variable">$ex</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示异常</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">showException</span>(<span class="params"><span class="variable">$ex</span>,<span class="variable">$sql</span>=<span class="string">&#x27;&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$sql</span>!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;SQL语句执行失败&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;错误的SQL语句是：&#x27;</span>.<span class="variable">$sql</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;错误编号：&#x27;</span>.<span class="variable">$ex</span>-&gt;<span class="title function_ invoke__">getCode</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;错误行号：&#x27;</span>.<span class="variable">$ex</span>-&gt;<span class="title function_ invoke__">getLine</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;错误文件：&#x27;</span>.<span class="variable">$ex</span>-&gt;<span class="title function_ invoke__">getFile</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;错误信息：&#x27;</span>.<span class="variable">$ex</span>-&gt;<span class="title function_ invoke__">getMessage</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置异常模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initException</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pdo-&gt;<span class="title function_ invoke__">setAttribute</span>(PDO::<span class="variable constant_">ATTR_ERRMODE</span>,PDO::<span class="variable constant_">ERRMODE_EXCEPTION</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行增、删、改操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span>(<span class="params"><span class="variable">$sql</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;pdo-&gt;<span class="title function_ invoke__">exec</span>(<span class="variable">$sql</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PDOException <span class="variable">$ex</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">showException</span>(<span class="variable">$ex</span>, <span class="variable">$sql</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取自动增长的编号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">lastInsertId</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;pdo-&gt;<span class="title function_ invoke__">lastInsertId</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$param</span>=<span class="keyword">array</span>(</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"><span class="variable">$mypdo</span>= MyPDO::<span class="title function_ invoke__">getInstance</span>(<span class="variable">$param</span>);</span><br><span class="line"><span class="comment">//echo $mypdo-&gt;exec(&#x27;delete from news where id=6&#x27;);</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$mypdo</span>-&gt;<span class="title function_ invoke__">exec</span>(<span class="string">&quot;insert into news values (null,&#x27;11&#x27;,&#x27;1111&#x27;,unix_timestamp())&quot;</span>))</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;自动增长的编号是：&#x27;</span>.<span class="variable">$mypdo</span>-&gt;<span class="title function_ invoke__">lastInsertId</span> ();</span><br></pre></td></tr></table></figure><p>第三部分：数据查询部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPDO</span></span>&#123;</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断匹配的类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchType</span>(<span class="params"><span class="variable">$type</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$type</span>)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;num&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> PDO::<span class="variable constant_">FETCH_NUM</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;both&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> PDO::<span class="variable constant_">FETCH_BOTH</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;obj&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> PDO::<span class="variable constant_">FETCH_OBJ</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                 <span class="keyword">return</span> PDO::<span class="variable constant_">FETCH_ASSOC</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取所有数据 ，返回二维数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchAll</span>(<span class="params"><span class="variable">$sql</span>,<span class="variable">$type</span>=<span class="string">&#x27;assoc&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="variable">$stmt</span>=<span class="variable language_">$this</span>-&gt;pdo-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);  <span class="comment">//获取PDOStatement对象</span></span><br><span class="line">            <span class="variable">$type</span>= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fetchType</span>(<span class="variable">$type</span>); <span class="comment">//获取匹配方法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">fetchAll</span>(<span class="variable">$type</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$ex</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">showException</span>(<span class="variable">$ex</span>, <span class="variable">$sql</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取一维数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchRow</span>(<span class="params"><span class="variable">$sql</span>,<span class="variable">$type</span>=<span class="string">&#x27;assoc&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="variable">$stmt</span>=<span class="variable language_">$this</span>-&gt;pdo-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);  <span class="comment">//获取PDOStatement对象</span></span><br><span class="line">            <span class="variable">$type</span>= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fetchType</span>(<span class="variable">$type</span>); <span class="comment">//获取匹配方法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">fetch</span>(<span class="variable">$type</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$ex</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">showException</span>(<span class="variable">$ex</span>, <span class="variable">$sql</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回一行一列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchColumn</span>(<span class="params"><span class="variable">$sql</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">             <span class="variable">$stmt</span>=<span class="variable language_">$this</span>-&gt;pdo-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">fetchColumn</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$ex</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">showException</span>(<span class="variable">$ex</span>, <span class="variable">$sql</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$param</span>=<span class="keyword">array</span>(</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"><span class="variable">$mypdo</span>= MyPDO::<span class="title function_ invoke__">getInstance</span>(<span class="variable">$param</span>);</span><br><span class="line"><span class="comment">//echo $mypdo-&gt;exec(&#x27;delete from news where id=6&#x27;);</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if($mypdo-&gt;exec(&quot;insert into news values (null,&#x27;11&#x27;,&#x27;1111&#x27;,unix_timestamp())&quot;))</span></span><br><span class="line"><span class="comment">    echo &#x27;自动增长的编号是：&#x27;.$mypdo-&gt;lastInsertId ();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//$list=$mypdo-&gt;fetchAll(&#x27;select * from news&#x27;);</span></span><br><span class="line"><span class="comment">//$list=$mypdo-&gt;fetchRow(&#x27;select * from news where id=1&#x27;);</span></span><br><span class="line"><span class="variable">$list</span>=<span class="variable">$mypdo</span>-&gt;<span class="title function_ invoke__">fetchColumn</span>(<span class="string">&#x27;select count(*) from news&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$list</span>);</span><br></pre></td></tr></table></figure><p>3、$stmt-&gt;bindParam()和$stmt-&gt;bindValue()区别</p><p>4、预处理的好处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a)提高执行效率</span><br><span class="line">b)提高安全性</span><br></pre></td></tr></table></figure><p>2、参数占位符以冒号开头</p><p>1、?是位置占位符</p><p>小结：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dsn</span>=<span class="string">&#x27;mysql:dbname=data;charset=utf8&#x27;</span>;</span><br><span class="line"><span class="variable">$pdo</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="comment">//创建预处理对象</span></span><br><span class="line"><span class="variable">$stmt</span>=<span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;insert into bank values (:p1,:p2)&quot;</span>);   <span class="comment">//:p1,:p2是参数占位符</span></span><br><span class="line"><span class="comment">//执行预处理</span></span><br><span class="line"><span class="variable">$cards</span>=[</span><br><span class="line">    [<span class="string">&#x27;p1&#x27;</span>=&gt;<span class="string">&#x27;1003&#x27;</span>,<span class="string">&#x27;p2&#x27;</span>=&gt;<span class="number">500</span>],</span><br><span class="line">    [<span class="string">&#x27;p1&#x27;</span>=&gt;<span class="string">&#x27;1004&#x27;</span>,<span class="string">&#x27;p2&#x27;</span>=&gt;<span class="number">1000</span>]</span><br><span class="line">];</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$cards</span> <span class="keyword">as</span> <span class="variable">$card</span>)&#123;</span><br><span class="line">    <span class="comment">//方法一：</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    $stmt-&gt;bindParam(&#x27;:p1&#x27;, $card[&#x27;p1&#x27;]);</span></span><br><span class="line"><span class="comment">    $stmt-&gt;bindParam(&#x27;:p2&#x27;, $card[&#x27;p2&#x27;]);</span></span><br><span class="line"><span class="comment">    $stmt-&gt;execute();</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//方法二：但数组的下标和参数名一致的时候就可以直接传递关联数组</span></span><br><span class="line">    <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>(<span class="variable">$card</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PDO中的预处理——参数占位符</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$dsn</span>=<span class="string">&#x27;mysql:dbname=data;charset=utf8&#x27;</span>;</span><br><span class="line">    <span class="variable">$pdo</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">    <span class="comment">//创建预处理对象</span></span><br><span class="line">    <span class="variable">$stmt</span>=<span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;insert into bank values (?,?)&quot;</span>);   <span class="comment">//?是占位符</span></span><br><span class="line">    <span class="comment">//执行预处理</span></span><br><span class="line">    <span class="variable">$cards</span>=[</span><br><span class="line">        [<span class="string">&#x27;1003&#x27;</span>,<span class="number">500</span>],</span><br><span class="line">        [<span class="string">&#x27;1004&#x27;</span>,<span class="number">100</span>]</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$cards</span> <span class="keyword">as</span> <span class="variable">$card</span>)&#123;</span><br><span class="line">        <span class="comment">//绑定参数，并执行预处理,</span></span><br><span class="line">        <span class="comment">//方法一：</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        $stmt-&gt;bindParam(1, $card[0]);  //占位符的位置从1开始</span></span><br><span class="line"><span class="comment">        $stmt-&gt;bindParam(2, $card[1]);</span></span><br><span class="line"><span class="comment">        $stmt-&gt;execute();               //执行预处理</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//方法二：</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        $stmt-&gt;bindValue(1, $card[0]);</span></span><br><span class="line"><span class="comment">        $stmt-&gt;bindValue(2, $card[1]);</span></span><br><span class="line"><span class="comment">        $stmt-&gt;execute();</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//方法三：如果占位符的顺序和数组的顺序一致，可以直接传递数组</span></span><br><span class="line">        <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>(<span class="variable">$card</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>PDO中的预处理——位置占位符</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execute 预处理名字 [using 变量]</span><br></pre></td></tr></table></figure><p>执行预处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prepare 预处理名字 from &#x27;sql语句&#x27;</span><br></pre></td></tr></table></figure><p>预处理语句：</p><p>预处理好处：编译一次多次执行，用来解决一条SQL语句多次执行的问题，提高了执行效率。</p><p><strong>复习MySQL中预处理</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-PDO介绍&quot;&gt;&lt;a href=&quot;#1-PDO介绍&quot; class=&quot;headerlink&quot; title=&quot;1 PDO介绍&quot;&gt;&lt;/a&gt;1 PDO介绍&lt;/h1&gt;&lt;p&gt;方法一：mysql扩展【这种方式php7已经淘汰】&lt;br&gt;方法二：mysqli扩展&lt;br&gt;方法三：P</summary>
      
    
    
    
    <category term="Language" scheme="https://gbk.cx/categories/Language/"/>
    
    
    <category term="PHP" scheme="https://gbk.cx/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP面向对象-4-命名空间&amp;trait(原型)&amp;迭代器</title>
    <link href="https://gbk.cx/p/d71be832/"/>
    <id>https://gbk.cx/p/d71be832/</id>
    <published>2024-10-19T13:58:55.000Z</published>
    <updated>2024-10-19T14:18:07.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-命名空间"><a href="#1-命名空间" class="headerlink" title="1 命名空间"></a>1 <strong>命名空间</strong></h1><h2 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a><strong>1.1 介绍</strong></h2><p>在一个大的项目中，可能会遇到同名的类、函数、常量，为了区分这些元素，我们可以将这些元素分别存放到不同的命名空间中。</p><p>1、命名空间就是包，用来存放项目中的类、函数、常量</p><p>2、通过namespace关键字来声明命名空间</p><h2 id="1-2-声明命名空间"><a href="#1-2-声明命名空间" class="headerlink" title="1.2 声明命名空间"></a><strong>1.2 声明命名空间</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">China</span>;    <span class="comment">//定义命名空间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;我是中国人&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">USA</span>;      <span class="comment">//定义命名空间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;I am a America&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="title function_ invoke__">getInfo</span>();          <span class="comment">//I am a America</span></span><br><span class="line">\USA\<span class="title function_ invoke__">getInfo</span>();     <span class="comment">//I am a America</span></span><br><span class="line">\China\<span class="title function_ invoke__">getInfo</span>();   <span class="comment">//我是中国人</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong><code>\</code>表示公共空间</p><h2 id="1-3-多级命名空间"><a href="#1-3-多级命名空间" class="headerlink" title="1.3 多级命名空间"></a><strong>1.3 多级命名空间</strong></h2><p>命名空间的名字可以是多级的（子级命名空间）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">China</span>\<span class="title class_">Beijing</span>\<span class="title class_">Shunyi</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">USA</span>\<span class="title class_">Washington</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试：</span></span><br><span class="line"><span class="variable">$stu1</span>=<span class="keyword">new</span> <span class="title class_">Student</span>();    <span class="comment">//相对路径</span></span><br><span class="line"><span class="variable">$stu2</span>=<span class="keyword">new</span> \USA\Washington\<span class="title function_ invoke__">Student</span>();    <span class="comment">//绝对路径</span></span><br><span class="line"><span class="variable">$stu3</span>=<span class="keyword">new</span> <span class="title class_">\China\Beijing\Shunyi\Student</span>();  <span class="comment">//绝对路径</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$stu1</span>,<span class="variable">$stu2</span>,<span class="variable">$stu3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//object(USA\Washington\Student)#1 (0) &#123; &#125;</span></span><br><span class="line"><span class="comment">//object(USA\Washington\Student)#2 (0) &#123; &#125;</span></span><br><span class="line"><span class="comment">//object(China\Beijing\Shunyi\Student)#3 (0) &#123; &#125;</span></span><br></pre></td></tr></table></figure><p>总结：如果将相对路径转成绝对路径</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">公共空间+命名空间+空间元素</span><br><span class="line">公共空间           命名空间                  空间元素</span><br><span class="line">   \         China\Shanghai\PuDong\        Student</span><br></pre></td></tr></table></figure><h2 id="1-4-访问空间元素的三种方式"><a href="#1-4-访问空间元素的三种方式" class="headerlink" title="1.4 访问空间元素的三种方式"></a><strong>1.4 访问空间元素的三种方式</strong></h2><p>1、非限定名称访问</p><p>2、完全限定名称访问</p><p>3、限定名称访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">China</span>\<span class="title class_">Beijing</span>\<span class="title class_">Shunyi</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;顺义...&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">China</span>\<span class="title class_">Beijing</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;北京...&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//访问空间元素的三种方式</span></span><br><span class="line"><span class="title function_ invoke__">getInfo</span>();                  <span class="comment">//非限定名称访问   北京...</span></span><br><span class="line">\China\Beijing\<span class="title function_ invoke__">getInfo</span>();   <span class="comment">//完全限定名称访问      北京...</span></span><br><span class="line">Shunyi\<span class="title function_ invoke__">getInfo</span>();           <span class="comment">//限定名称访问        顺义...</span></span><br><span class="line"><span class="comment">//转成绝对路径如下：</span></span><br><span class="line"><span class="comment">// \China\Beijing\Shunyi\getInfo();</span></span><br></pre></td></tr></table></figure><h2 id="1-5-引入命名空间"><a href="#1-5-引入命名空间" class="headerlink" title="1.5 引入命名空间"></a><strong>1.5 引入命名空间</strong></h2><p>完全限定名称访问元素路径太长，可以将其他空间引入到当前空间来</p><p>通过use引入命名空间</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">China</span>\<span class="title class_">Beijing</span>\<span class="title class_">Shunyi</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;李白&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">USA</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Lincoln&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//引入命名空间</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">China</span>\<span class="title">Beijing</span>\<span class="title">Shunyi</span>;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="title function_ invoke__">getInfo</span>();          <span class="comment">//Lincoln</span></span><br><span class="line">Shunyi\<span class="title function_ invoke__">getInfo</span>();   <span class="comment">//李白</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment">第一步：通过当前空间拼接成绝对路径：\USA\Shunyi\getInfo(),这个地址没有对应的空间元素</span></span><br><span class="line"><span class="comment">第二步：通过引入的空间拼接绝对路径：\China\Beijing\Shunyi+Shunyi\getInfo(),Shunyi是公共部分，只需要取一个，最后拼接的地址是：\China\Beijing\Shunyi\getInfo(),这个地址可以找到对应的元素</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>引入命名空间的拼接规则</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">公共空间+引入空间+（去除公共部分，公共部分只能有一级）空间元素</span><br><span class="line"></span><br><span class="line">比如：</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">A</span>\<span class="title class_">B</span>\<span class="title class_">C</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">D</span>\<span class="title class_">E</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">A</span>\<span class="title">B</span>\<span class="title">C</span>;  <span class="comment">//引入命名空间</span></span><br><span class="line">C\<span class="title function_ invoke__">getInfo</span>();    <span class="comment">//正确    \A\B\C\getInfo();</span></span><br><span class="line">B\C\<span class="title function_ invoke__">getInfo</span>();  <span class="comment">//错误   \A\B\C\B\C\getInfo();</span></span><br></pre></td></tr></table></figure><h2 id="1-6-引入空间元素"><a href="#1-6-引入空间元素" class="headerlink" title="1.6 引入空间元素"></a><strong>1.6 引入空间元素</strong></h2><p>引入类：use</p><p>引入函数：use function    [php7.0以后支持]</p><p>引入常量：use const[php7.0以后支持]</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">China</span>\<span class="title class_">Beijing</span>\<span class="title class_">Shunyi</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;李白&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TYPE</span>=<span class="string">&#x27;学生&#x27;</span>;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">USA</span>;</span><br><span class="line"><span class="comment">//引入类</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">China</span>\<span class="title">Beijing</span>\<span class="title">Shunyi</span>\<span class="title">Student</span>;</span><br><span class="line"><span class="comment">//引入函数</span></span><br><span class="line"><span class="keyword">use</span> <span class="keyword">function</span> <span class="title">China</span>\<span class="title">Beijing</span>\<span class="title">Shunyi</span>\<span class="title">getInfo</span>;</span><br><span class="line"><span class="comment">//引入常量</span></span><br><span class="line"><span class="keyword">use</span> <span class="keyword">const</span> <span class="title">China</span>\<span class="title">Beijing</span>\<span class="title">Shunyi</span>\<span class="title">TYPE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$stu</span>=<span class="keyword">new</span> <span class="title class_">Student</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$stu</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">getInfo</span>();</span><br><span class="line"><span class="keyword">echo</span> TYPE;</span><br></pre></td></tr></table></figure><h2 id="1-7-给类、函数取别名"><a href="#1-7-给类、函数取别名" class="headerlink" title="1.7 给类、函数取别名"></a><strong>1.7 给类、函数取别名</strong></h2><p>如果引入的类和函数与当前空间的类和函数名称相同，需要给引入的类和函数取别名。</p><p>通过as取别名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">China</span>\<span class="title class_">Beijing</span>\<span class="title class_">Shunyi</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;李白&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">USA</span>\<span class="title class_">Washington</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Lincoln&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//引入类取别名</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">China</span>\<span class="title">Beijing</span>\<span class="title">Shunyi</span>\<span class="title">Student</span> <span class="keyword">as</span> <span class="title">ChinaStudent</span>;</span><br><span class="line"><span class="comment">//引入函数</span></span><br><span class="line"><span class="keyword">use</span> <span class="keyword">function</span> <span class="title">China</span>\<span class="title">Beijing</span>\<span class="title">Shunyi</span>\<span class="title">getInfo</span> <span class="keyword">as</span> <span class="title">info1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$stu</span>=<span class="keyword">new</span> <span class="title class_">ChinaStudent</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$stu</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">getInfo</span>();  <span class="comment">//Lincoln</span></span><br><span class="line"><span class="title function_ invoke__">info1</span>();    <span class="comment">//李白</span></span><br></pre></td></tr></table></figure><h2 id="1-8-公共空间"><a href="#1-8-公共空间" class="headerlink" title="1.8 公共空间"></a><strong>1.8 公共空间</strong></h2><p>如果一个页面没有namespace声明空间，这个页面的元素在公共空间下</p><p>公共空间用<code>\</code>表示</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;李白&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">\<span class="title function_ invoke__">getInfo</span>();     <span class="comment">//李白</span></span><br></pre></td></tr></table></figure><h2 id="1-9-命名空间注意事项"><a href="#1-9-命名空间注意事项" class="headerlink" title="1.9 命名空间注意事项"></a><strong>1.9 命名空间注意事项</strong></h2><p>1、命名空间只能存放类、函数、const常量</p><p>2、第一个namespace前面不能有任何的代码，空白字符、header()也不行。</p><p>3、包含文件不影响当前的命名空间</p><h1 id="2-trait-原型"><a href="#2-trait-原型" class="headerlink" title="2 trait(原型)"></a>2 <strong>trait(原型)</strong></h1><p>trait 为了减少单继承语言的限制，可以在不同层次结构内独立的类中复用类的方法集。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//原型</span></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;锄禾日当午&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用原型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">A</span>;  <span class="comment">//代码复用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$stu</span>=<span class="keyword">new</span> <span class="title class_">Student</span>;</span><br><span class="line"><span class="variable">$stu</span>-&gt;<span class="title function_ invoke__">getInfo</span>();    <span class="comment">//锄禾日当午</span></span><br></pre></td></tr></table></figure><p>引入多个 trait</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//原型</span></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;锄禾日当午&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;床前明月光&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用原型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">A</span>,<span class="title">B</span>;    <span class="comment">//引入A、B trait</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$stu</span>=<span class="keyword">new</span> <span class="title class_">Student</span>;</span><br><span class="line"><span class="variable">$stu</span>-&gt;<span class="title function_ invoke__">getInfo1</span>();   <span class="comment">//锄禾日当午</span></span><br><span class="line"><span class="variable">$stu</span>-&gt;<span class="title function_ invoke__">getInfo2</span>();   <span class="comment">//床前明月光</span></span><br></pre></td></tr></table></figure><p>trait和继承结合</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;这是trait原型&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;这是Person类&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承类同时代码复用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">A</span>;      <span class="comment">//继承了getInfo，有被A中getInfo覆盖</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$stu</span>=<span class="keyword">new</span> <span class="title class_">Student</span>;</span><br><span class="line"><span class="variable">$stu</span>-&gt;<span class="title function_ invoke__">getInfo</span>();    <span class="comment">//这是trait原型</span></span><br></pre></td></tr></table></figure><p>解决同名冲突</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//原型</span></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;锄禾日当午&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;床前明月光&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用原型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">A</span>,<span class="title">B</span>&#123;    //引入<span class="title">A</span>和<span class="title">B</span>的<span class="title">trait</span>，同时解决名称冲突</span><br><span class="line">        //方法一：方法替换</span><br><span class="line">        //<span class="title">A</span>::<span class="title">getInfo</span> <span class="title">insteadof</span> <span class="title">B</span>;   <span class="comment">//将A中的getInfo替换掉B中的getInfo</span></span><br><span class="line">        <span class="comment">//B::getInfo insteadof A;       //将B中的getInfo替换到A中的getInfo</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法二：改名</span></span><br><span class="line">        A::<span class="variable constant_">getInfo</span> <span class="keyword">insteadof</span> B;</span><br><span class="line">        B::<span class="variable constant_">getInfo</span> <span class="keyword">as</span> show;     <span class="comment">//将B的getInfo改名为show</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$stu</span>=<span class="keyword">new</span> <span class="title class_">Student</span>;</span><br><span class="line"><span class="variable">$stu</span>-&gt;<span class="title function_ invoke__">getInfo</span>();    <span class="comment">//锄禾日当午</span></span><br><span class="line"><span class="variable">$stu</span>-&gt;<span class="title function_ invoke__">show</span>();       <span class="comment">//床前明月光</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">同名冲突的解决方法有两个：</span></span><br><span class="line"><span class="comment">第一：方法替换</span></span><br><span class="line"><span class="comment">第二：方法改名</span></span><br></pre></td></tr></table></figure><p>更改权限</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;锄禾日当午&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">A</span>&#123;</span><br><span class="line">        //<span class="title">show</span> <span class="keyword">as</span> <span class="title">public</span>;   <span class="comment">//将show方法权限设为public;</span></span><br><span class="line">        show <span class="keyword">as</span> <span class="keyword">public</span> show2;   <span class="comment">//将show方法设置public，并改名为show2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$stu</span>=<span class="keyword">new</span> <span class="title class_">Student</span>;</span><br><span class="line"><span class="comment">//$stu-&gt;show();</span></span><br><span class="line"><span class="variable">$stu</span>-&gt;<span class="title function_ invoke__">show2</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>多学一招：</strong>具体参见手册</p><p>1、  多个trait可以组成一个trait</p><p>2、  trait可以定义抽象成员</p><p>3、  trait可以定义静态成员</p><p>4、  trait可以定义属性</p><h1 id="3-迭代器"><a href="#3-迭代器" class="headerlink" title="3 迭代器"></a>3 <strong>迭代器</strong></h1><h2 id="3-1-遍历数组"><a href="#3-1-遍历数组" class="headerlink" title="3.1 遍历数组"></a>3.1 遍历数组</h2><p>手动遍历数组</p><p>步骤：</p><p>1、复位数组指针reset()</p><p>2、检查指针是否合法获取当前指针，如果不为null就是合法的</p><p>3、获取当前值current()</p><p>4、获取当前键key()</p><p>5、指针下移next()</p><p>代码实现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$stu</span>=[<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;berry&#x27;</span>,<span class="string">&#x27;ketty&#x27;</span>,<span class="string">&#x27;rose&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">reset</span>(<span class="variable">$stu</span>);    <span class="comment">//复位指针</span></span><br><span class="line"><span class="keyword">while</span>(<span class="title function_ invoke__">key</span>(<span class="variable">$stu</span>)!==<span class="literal">null</span>)&#123;<span class="comment">//键合法</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">key</span>(<span class="variable">$stu</span>),<span class="string">&#x27;-&#x27;</span>,<span class="title function_ invoke__">current</span>(<span class="variable">$stu</span>),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;<span class="comment">//获取键、值</span></span><br><span class="line">    <span class="title function_ invoke__">next</span>(<span class="variable">$stu</span>);     <span class="comment">//指针下移</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0-tom</span></span><br><span class="line"><span class="comment">1-berry</span></span><br><span class="line"><span class="comment">2-ketty</span></span><br><span class="line"><span class="comment">3-rose</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="3-2-迭代器"><a href="#3-2-迭代器" class="headerlink" title="3.2 迭代器"></a>3.2 迭代器</h2><p>迭代器是PHP内置的接口</p><p>场景：遍历对象，获取的是对象中属性保存的数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义类实现迭代器接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> <span class="keyword">implements</span> <span class="title">Iterator</span></span>&#123;</span><br><span class="line">    <span class="comment">//$list属性用来保存学生数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$list</span>=<span class="keyword">array</span>();</span><br><span class="line">    <span class="comment">//添加学生</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addStu</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">list</span>[]=<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//实现接口中的复位方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rewind</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">reset</span>(<span class="variable">$this</span>-&gt;<span class="keyword">list</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//验证当前指针是否合法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">valid</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">key</span>(<span class="variable">$this</span>-&gt;<span class="keyword">list</span>)!==<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">current</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">current</span>(<span class="variable">$this</span>-&gt;<span class="keyword">list</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取键</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">key</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">key</span>(<span class="variable">$this</span>-&gt;<span class="keyword">list</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//指针下移</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">next</span>(<span class="variable">$this</span>-&gt;<span class="keyword">list</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建班级</span></span><br><span class="line"><span class="variable">$class</span>=<span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"><span class="comment">//添加学生</span></span><br><span class="line"><span class="variable">$class</span>-&gt;<span class="title function_ invoke__">addStu</span>(<span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line"><span class="variable">$class</span>-&gt;<span class="title function_ invoke__">addStu</span>(<span class="string">&#x27;berry&#x27;</span>);</span><br><span class="line"><span class="variable">$class</span>-&gt;<span class="title function_ invoke__">addStu</span>(<span class="string">&#x27;ketty&#x27;</span>);</span><br><span class="line"><span class="comment">//遍历班级</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$class</span> <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$v</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$k&#125;</span>-<span class="subst">&#123;$v&#125;</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0-tom</span></span><br><span class="line"><span class="comment">1-berry</span></span><br><span class="line"><span class="comment">2-ketty</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="4-PSR编码规范"><a href="#4-PSR编码规范" class="headerlink" title="4 PSR编码规范"></a>4 <strong>PSR编码规范</strong></h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><ol><li>PSR 是 PHP Standard Recommendations 的简写，由 PHP FIG 组织制定的 PHP 规范，是 PHP 开发的实践标准。</li><li>目前已表决通过了 6 套标准，已经得到大部分 PHP 框架的支持和认可。</li><li>网址：<a href="http://psr.phphub.org/">http://psr.phphub.org/</a></li></ol><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/19/OoD7Mn9PJFeLIJFM5LRi1729346401959.png" alt="1560769585637.png"></p><h2 id="4-2-PSR-1-基础编码规范"><a href="#4-2-PSR-1-基础编码规范" class="headerlink" title="4.2 PSR-1 基础编码规范"></a>4.2 PSR-1 基础编码规范</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、PHP代码文件 必须 以 &lt;?php 或 &lt;?= 标签开始</span><br><span class="line">2、类的命名大写开头的驼峰命名规范</span><br><span class="line">3、类中的常量所有字母都必须大写，单词间用下划线分隔</span><br><span class="line">4、方法名称必须符合小写开头驼峰命名规范5、</span><br></pre></td></tr></table></figure><p>副作用：(side effects)，一个文件只做一件事情，如果做了其他事情就是产生了副作用</p><p>不产生副作用：一个文件只做一件事</p><p>产生副作用：一个文件做了多件事情</p><h2 id="4-3-PSR-2-编码风格规范"><a href="#4-3-PSR-2-编码风格规范" class="headerlink" title="4.3 PSR-2 编码风格规范"></a>4.3 PSR-2 编码风格规范</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">代码 必须 使用 4 个空格符而不是「Tab 键」进行缩进</span><br><span class="line">每个 namespace 命名空间声明语句和 use 声明语句块后面，必须 插入一个空白行</span><br><span class="line">类的开始花括号（&#123;） 必须 写在类声明后自成一行，结束花括号（&#125;）也 必须 写在类主体后自成一行</span><br><span class="line">方法的开始花括号（&#123;） 必须 写在函数声明后自成一行，结束花括号（&#125;）也 必须 写在函数主体后自成一行。</span><br><span class="line">类的属性和方法 必须 添加访问修饰符（private、protected 以及 public），abstract 以及 final 必须 声明在访问修饰符之前，而 static 必须 声明在访问修饰符之后。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-命名空间&quot;&gt;&lt;a href=&quot;#1-命名空间&quot; class=&quot;headerlink&quot; title=&quot;1 命名空间&quot;&gt;&lt;/a&gt;1 &lt;strong&gt;命名空间&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;1-1-介绍&quot;&gt;&lt;a href=&quot;#1-1-介绍&quot; class=</summary>
      
    
    
    
    <category term="Language" scheme="https://gbk.cx/categories/Language/"/>
    
    
    <category term="PHP" scheme="https://gbk.cx/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP面向对象-3-加载类&amp;设计模式&amp;魔术方法&amp;序列化</title>
    <link href="https://gbk.cx/p/be32be3e/"/>
    <id>https://gbk.cx/p/be32be3e/</id>
    <published>2024-10-19T13:56:51.000Z</published>
    <updated>2024-10-19T14:09:40.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-自动加载类"><a href="#1-自动加载类" class="headerlink" title="1 自动加载类"></a><strong>1 自动加载类</strong></h1><h2 id="1-1-类的规则"><a href="#1-1-类的规则" class="headerlink" title="1.1 类的规则"></a>1.1 <strong>类的规则</strong></h2><ol><li>一个文件中只能放一个类（必须）</li><li>文件名和类名同名（必须）</li><li>类文件以.class.php结尾（不是必须）</li></ol><h2 id="1-2-手动加载类"><a href="#1-2-手动加载类" class="headerlink" title="1.2 手动加载类"></a>1.2 <strong>手动加载类</strong></h2><p>在PHP页面上加载类文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;./Goods.class.php&#x27;</span>;    <span class="comment">//手动加载类文件</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;./Book.class.php&#x27;</span>;     <span class="comment">//手动加载类文件</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;./Phone.class.php&#x27;</span>;    <span class="comment">//手动加载类文件</span></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$book</span>=<span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line"><span class="variable">$book</span>-&gt;<span class="title function_ invoke__">setName</span>(<span class="string">&#x27;面向对象编程&#x27;</span>);</span><br><span class="line"><span class="variable">$phone</span>=<span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"><span class="variable">$phone</span>-&gt;<span class="title function_ invoke__">setName</span>(<span class="string">&#x27;苹果6s&#x27;</span>);</span><br><span class="line"><span class="variable">$book</span>-&gt;<span class="title function_ invoke__">getName</span>();</span><br><span class="line"><span class="variable">$phone</span>-&gt;<span class="title function_ invoke__">getName</span>();</span><br></pre></td></tr></table></figure><h2 id="1-3-自动加载类"><a href="#1-3-自动加载类" class="headerlink" title="1.3 自动加载类"></a>1.3 <strong>自动加载类</strong></h2><p>当缺少类的时候自动的调用<code>__autoload()</code>函数，并且将缺少的类名作为参数传递给<code>__autoload()</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*作用：自动加载类</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> $class_name string 缺少的类名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__autoload</span>(<span class="params"><span class="variable">$class_name</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">require</span> <span class="string">&quot;./<span class="subst">&#123;$class_name&#125;</span>.class.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$book</span>=<span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line"><span class="variable">$book</span>-&gt;<span class="title function_ invoke__">setName</span>(<span class="string">&#x27;面向对象编程&#x27;</span>);</span><br><span class="line"><span class="variable">$phone</span>=<span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"><span class="variable">$phone</span>-&gt;<span class="title function_ invoke__">setName</span>(<span class="string">&#x27;苹果6s&#x27;</span>);</span><br><span class="line"><span class="variable">$book</span>-&gt;<span class="title function_ invoke__">getName</span>();</span><br><span class="line"><span class="variable">$phone</span>-&gt;<span class="title function_ invoke__">getName</span>();</span><br></pre></td></tr></table></figure><p>💡 <strong>注意</strong>：__autoload()函数在PHP7.2以后就不支持了。</p><h2 id="1-4-注册加载类"><a href="#1-4-注册加载类" class="headerlink" title="1.4 注册加载类"></a>1.4 <strong>注册加载类</strong></h2><p>通过spl_autoload_register()注册__autoload()函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//方法一：</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//加载类函数</span></span><br><span class="line"><span class="comment">function loadClass($class_name) &#123;</span></span><br><span class="line"><span class="comment">    require &quot;./&#123;$class_name&#125;.class.php&quot;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">//注册加载类函数</span></span><br><span class="line"><span class="comment">spl_autoload_register(&#x27;loadClass&#x27;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：</span></span><br><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>(function(<span class="variable">$class_name</span>)&#123;</span><br><span class="line">    <span class="keyword">require</span> <span class="string">&quot;./<span class="subst">&#123;$class_name&#125;</span>.class.php&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$book</span>=<span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line"><span class="variable">$book</span>-&gt;<span class="title function_ invoke__">setName</span>(<span class="string">&#x27;面向对象编程&#x27;</span>);</span><br><span class="line"><span class="variable">$phone</span>=<span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"><span class="variable">$phone</span>-&gt;<span class="title function_ invoke__">setName</span>(<span class="string">&#x27;苹果6s&#x27;</span>);</span><br><span class="line"><span class="variable">$book</span>-&gt;<span class="title function_ invoke__">getName</span>();</span><br><span class="line"><span class="variable">$phone</span>-&gt;<span class="title function_ invoke__">getName</span>();</span><br></pre></td></tr></table></figure><p>1、spl_autoload_register()可以注册多个自动加载函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load1</span>(<span class="params"><span class="variable">$class</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">require</span> <span class="string">&quot;./<span class="subst">&#123;$class&#125;</span>.class.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load2</span>(<span class="params"><span class="variable">$class</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">require</span> <span class="string">&quot;./<span class="subst">&#123;$class&#125;</span>.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load3</span>(<span class="params"><span class="variable">$class</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">require</span> <span class="string">&quot;./<span class="subst">&#123;$class&#125;</span>.fun.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>(<span class="string">&#x27;load1&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>(<span class="string">&#x27;load2&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>(<span class="string">&#x27;load3&#x27;</span>);</span><br></pre></td></tr></table></figure><p>2、PHP5.1以后就开始支持此函数。</p><h2 id="1-5-类文件存储不规则的加载方法"><a href="#1-5-类文件存储不规则的加载方法" class="headerlink" title="1.5 类文件存储不规则的加载方法"></a>1.5 <strong>类文件存储不规则的加载方法</strong></h2><p>将类名和文件地址做一个映射，组成一个关联数组。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$map</span>=<span class="keyword">array</span>(</span><br><span class="line">    <span class="comment">//类名    =&gt;  类文件地址</span></span><br><span class="line">    <span class="string">&#x27;Goods&#x27;</span> =&gt;  <span class="string">&#x27;./aa/Goods.class.php&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Book&#x27;</span>  =&gt;  <span class="string">&#x27;./bb/Book.class.php&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Phone&#x27;</span> =&gt;  <span class="string">&#x27;./cc/Phone.class.php&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">spl_autoload_register</span>(function(<span class="variable">$class_name</span>)&#123;</span><br><span class="line">    <span class="comment">//类名和文件地址映射成一个关联数组</span></span><br><span class="line">    <span class="variable">$map</span>=<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;Goods&#x27;</span> =&gt;  <span class="string">&#x27;./aa/Goods.class.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Book&#x27;</span>  =&gt;  <span class="string">&#x27;./bb/Book.class.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Phone&#x27;</span> =&gt;  <span class="string">&#x27;./cc/Phone.class.php&#x27;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">//在映射数组中找到就包含</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$map</span>[<span class="variable">$class_name</span>]))</span><br><span class="line">        <span class="keyword">require</span> <span class="variable">$map</span>[<span class="variable">$class_name</span>];</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$book</span>=<span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line"><span class="variable">$book</span>-&gt;<span class="title function_ invoke__">setName</span>(<span class="string">&#x27;面向对象编程&#x27;</span>);</span><br><span class="line"><span class="variable">$phone</span>=<span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"><span class="variable">$phone</span>-&gt;<span class="title function_ invoke__">setName</span>(<span class="string">&#x27;苹果6s&#x27;</span>);</span><br><span class="line"><span class="variable">$book</span>-&gt;<span class="title function_ invoke__">getName</span>();</span><br><span class="line"><span class="variable">$phone</span>-&gt;<span class="title function_ invoke__">getName</span>();</span><br></pre></td></tr></table></figure><p>在项目中，绝大部分都是规则存储的，不规则的比较少。</p><h1 id="2-clone和-clone"><a href="#2-clone和-clone" class="headerlink" title="2 clone和__clone()"></a>2 <strong>clone和__clone()</strong></h1><p>思考：创建对象的方式有哪些？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方法一：实例化</span><br><span class="line">方法二：克隆</span><br></pre></td></tr></table></figure><p>例题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//执行clone指令的时候自动执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;正在克隆对象&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$stu1</span>=<span class="keyword">new</span> <span class="title class_">Student</span>;</span><br><span class="line"><span class="variable">$stu2</span>=<span class="keyword">clone</span> <span class="variable">$stu1</span>;      <span class="comment">//克隆对象</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$stu1</span>,<span class="variable">$stu2</span>);  <span class="comment">//object(Student)#1 (0) &#123; &#125; object(Student)#2 (0) &#123; &#125;</span></span><br></pre></td></tr></table></figure><p>小结：</p><p>1、clone的创建对象的方法之一</p><p>2、当执行clone指令的时候，会自动的调用__clone()方法</p><h1 id="3-设计模式"><a href="#3-设计模式" class="headerlink" title="3 设计模式"></a>3 <strong>设计模式</strong></h1><h2 id="3-1-单例模式"><a href="#3-1-单例模式" class="headerlink" title="3.1 单例模式"></a>3.1 <strong>单例模式</strong></h2><h3 id="1-4-1-单例模式"><a href="#1-4-1-单例模式" class="headerlink" title="1.4.1 单例模式"></a><strong>1.4.1 单例模式</strong></h3><p>一个类只能有一个对象</p><p>应用场景：多次请求数据库只需要一个连接对象。</p><p>实现：三私一公</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、私有的静态属性用来保存对象的单例</span><br><span class="line">2、私有的构造方法用来阻止在类的外部实例化</span><br><span class="line">3、私有的__clone阻止在类的外部clone对象</span><br><span class="line">4、公有的静态方法用来获取对象的单例</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//三私一公</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DB</span> </span>&#123;</span><br><span class="line">    <span class="comment">//静态的属性用来保存对象的单例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$instance</span>;</span><br><span class="line">    <span class="comment">//私有的构造方法阻止在类的外部实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//私有的__clone()阻止在类的外部clone对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//保存的值不属于DB类的类型就实例化</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">self</span>::<span class="variable">$instance</span> <span class="keyword">instanceof</span> <span class="built_in">self</span>)</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$instance</span>=<span class="keyword">new</span> <span class="built_in">self</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$db1</span>=DB::<span class="title function_ invoke__">getInstance</span>();</span><br><span class="line"><span class="variable">$db2</span>=DB::<span class="title function_ invoke__">getInstance</span>();</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$db1</span>,<span class="variable">$db2</span>);    <span class="comment">//object(DB)#1 (0) &#123; &#125; object(DB)#1 (0) &#123; &#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-工厂模式"><a href="#3-2-工厂模式" class="headerlink" title="3.2 工厂模式"></a>3.2 <strong>工厂模式</strong></h2><p>特点：传递不同的参数获取不同的对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductsA</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductsB</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//工厂模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductsFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"><span class="variable">$num</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(<span class="variable">$num</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ProductsA;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ProductsB;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$factory</span>=<span class="keyword">new</span> <span class="title class_">ProductsFactory</span>();</span><br><span class="line"><span class="variable">$obj1</span>=<span class="variable">$factory</span>-&gt;<span class="title function_ invoke__">create</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$obj2</span>=<span class="variable">$factory</span>-&gt;<span class="title function_ invoke__">create</span>(<span class="number">2</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$obj1</span>,<span class="variable">$obj2</span>); <span class="comment">//object(ProductsA)#2 (0) &#123; &#125; object(ProductsB)#3 (0) &#123; &#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-策略模式"><a href="#3-3-策略模式" class="headerlink" title="3.3 策略模式"></a>3.3 <strong>策略模式</strong></h2><p>特点：传递不同的参数调用不同的策略（方法）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Walk</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">way</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;走着去&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">way</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;坐车去&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//策略模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params"><span class="variable">$obj</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$obj</span>-&gt;<span class="title function_ invoke__">way</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$stu</span>=<span class="keyword">new</span> <span class="title class_">Student</span>;</span><br><span class="line"><span class="variable">$stu</span>-&gt;<span class="title function_ invoke__">play</span>(<span class="keyword">new</span> <span class="title class_">Walk</span>()); <span class="comment">//走着去</span></span><br><span class="line"><span class="variable">$stu</span>-&gt;<span class="title function_ invoke__">play</span>(<span class="keyword">new</span> <span class="title class_">Bus</span>());  <span class="comment">//坐车去</span></span><br></pre></td></tr></table></figure><h1 id="4-序列化与反序列化"><a href="#4-序列化与反序列化" class="headerlink" title="4 序列化与反序列化"></a>4 <strong>序列化与反序列化</strong></h1><p>在PHP中，数组和对象无法保存，如果需要保存就要将数组或对象转换成一个序列。</p><p>序列化：将数组或对象转换成一个序列（serialize）</p><p>反序列化：将序列化的字符串转换成数组或对象。(unserialize)</p><h2 id="4-1-数组的序列化与反序列化"><a href="#4-1-数组的序列化与反序列化" class="headerlink" title="4.1 数组的序列化与反序列化"></a>4.1 <strong>数组的序列化与反序列化</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//数组的序列化</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$stu=[&#x27;tom&#x27;,&#x27;berry&#x27;,&#x27;ketty&#x27;];</span></span><br><span class="line"><span class="comment">$str=serialize($stu);//序列化</span></span><br><span class="line"><span class="comment">file_put_contents(&#x27;./stu.txt&#x27;,$str);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的反序列化</span></span><br><span class="line"><span class="variable">$str</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;./stu.txt&#x27;</span>);</span><br><span class="line"><span class="variable">$stu</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$str</span>);<span class="comment">//反序列化</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$stu</span>);<span class="comment">//Array ( [0] =&gt; tom [1] =&gt; berry [2] =&gt; ketty )</span></span><br></pre></td></tr></table></figure><h2 id="4-2-对象的序列化与反序列化"><a href="#4-2-对象的序列化与反序列化" class="headerlink" title="4.2 对象的序列化与反序列化"></a>4.2 <strong>对象的序列化与反序列化</strong></h2><p>💡 注意：对象的反序列化需要有类的参与，如果没有类在反序列化时候无法确定类</p><h1 id="5-魔术方法"><a href="#5-魔术方法" class="headerlink" title="5 魔术方法"></a>5 <strong>魔术方法</strong></h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">已经学过的魔术方法</span><br><span class="line"><span class="title function_ invoke__">__construct</span>() 构造方法</span><br><span class="line"><span class="title function_ invoke__">__destruct</span>() 析构方法</span><br><span class="line"><span class="title function_ invoke__">__clone</span>() 克隆方法</span><br></pre></td></tr></table></figure><h2 id="5-1-tostring-、-invoke"><a href="#5-1-tostring-、-invoke" class="headerlink" title="5.1 __tostring()、__invoke()"></a>5.1 <strong><code>__tostring()、__invoke()</code></strong></h2><p><code>__tostring()</code>：将对象当成字符串使用的时候自动调用</p><p><code>__invoke()</code>：将对象当成函数使用的时候自动调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="comment">//把对象当成字符串使用的时候自动执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;这是一个对象，不是字符串&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把对象当成函数使用的时候自动执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;这是一个对象，不是函数&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$stu</span>=<span class="keyword">new</span> <span class="title class_">Student</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$stu</span>;<span class="comment">//当成字符串使用</span></span><br><span class="line"><span class="variable">$stu</span>();<span class="comment">//当成函数使用</span></span><br></pre></td></tr></table></figure><h2 id="5-2-set-、-get-、-isset-、-unset"><a href="#5-2-set-、-get-、-isset-、-unset" class="headerlink" title="5.2 __set()、__get()、__isset()、__unset()"></a>5.2 <strong><code>__set()、__get()、__isset()、__unset()</code></strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">__set</span>(<span class="variable">$k</span>,<span class="variable">$v</span>)：给无法访问的属性赋值的时候自动执行</span><br><span class="line"><span class="title function_ invoke__">__get</span>(<span class="variable">$k</span>)：获取无法访问的属性值的时候自动调用</span><br><span class="line"><span class="title function_ invoke__">__isset</span>(<span class="variable">$k</span>)：判断无法访问的属性是否存在自动调用</span><br><span class="line"><span class="title function_ invoke__">__unset</span>(<span class="variable">$k</span>)：销毁无法访问的属性的时候自动执行</span><br></pre></td></tr></table></figure><h2 id="5-3-call-、-callstatic"><a href="#5-3-call-、-callstatic" class="headerlink" title="5.3 __call()、__callstatic()"></a>5.3 <strong><code>__call()、__callstatic()</code></strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">__call</span>()：调用无法访问的方法时自动执行</span><br><span class="line"><span class="title function_ invoke__">__callstatic</span>()：调用无法访问的静态方法时自动执行</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*作用：调用无法访问的方法时自动执行</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> $fn_name string 方法名</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> $fn_args array 参数数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$fn_name</span>,<span class="variable">$fn_args</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$fn_name&#125;</span>不存在&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用无法访问的静态方法时自动执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callstatic</span>(<span class="params"><span class="variable">$fn_name</span>,<span class="variable">$fn_args</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$fn_name&#125;</span>静态方法不存在&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$stu</span>=<span class="keyword">new</span> <span class="title class_">Student</span>;</span><br><span class="line"><span class="variable">$stu</span>-&gt;<span class="title function_ invoke__">show</span>(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>::<span class="title function_ invoke__">show</span>();</span><br></pre></td></tr></table></figure><h2 id="5-4-sleep-、-wakeup"><a href="#5-4-sleep-、-wakeup" class="headerlink" title="5.4 __sleep()、__wakeup()"></a>5.4 <strong><code>__sleep()、__wakeup()</code></strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">__sleep</span>()：当序列化的时候自动调用</span><br><span class="line"><span class="title function_ invoke__">__wakeup</span>()：当反序列化的时候自动调用</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$sex</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$add</span>=<span class="string">&#x27;中国&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$sex</span></span>) </span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;name=<span class="variable">$name</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;sex=<span class="variable">$sex</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*序列化的时候自动调用</span></span><br><span class="line"><span class="comment">*<span class="doctag">@return</span> array 序列化的属性名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反序列化的时候自动调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;type=<span class="string">&#x27;学生&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$stu</span>=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="variable">$str</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$stu</span>);<span class="comment">//序列化</span></span><br><span class="line"><span class="variable">$stu</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$str</span>);<span class="comment">//反序列化</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$stu</span>);</span><br></pre></td></tr></table></figure><h1 id="6-模拟方法重载"><a href="#6-模拟方法重载" class="headerlink" title="6 模拟方法重载"></a>6 <strong>模拟方法重载</strong></h1><p>通过魔术方法模拟方法重载</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Math</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$fn_name</span>,<span class="variable">$fn_args</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$sum</span>=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$fn_args</span> <span class="keyword">as</span> <span class="variable">$v</span>) &#123;</span><br><span class="line">            <span class="variable">$sum</span>+=<span class="variable">$v</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;,&#x27;</span>,<span class="variable">$fn_args</span>).<span class="string">&#x27;的和是：&#x27;</span>.<span class="variable">$sum</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//利用魔术方法模拟方法重载</span></span><br><span class="line"><span class="variable">$math</span>=<span class="keyword">new</span> <span class="title class_">Math</span>();</span><br><span class="line"><span class="variable">$math</span>-&gt;<span class="title function_ invoke__">call</span>(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"><span class="variable">$math</span>-&gt;<span class="title function_ invoke__">call</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line"><span class="variable">$math</span>-&gt;<span class="title function_ invoke__">call</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>);</span><br></pre></td></tr></table></figure><h1 id="7-遍历对象"><a href="#7-遍历对象" class="headerlink" title="7 遍历对象"></a>7 <strong>遍历对象</strong></h1><p>通过foreach遍历对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$sex</span>=<span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$age</span>=<span class="number">22</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable language_">$this</span> <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$v</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$k&#125;</span>-<span class="subst">&#123;$v&#125;</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$stu</span>=<span class="keyword">new</span> <span class="title class_">Student</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$stu</span> <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$v</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$k&#125;</span>-<span class="subst">&#123;$v&#125;</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$stu</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br></pre></td></tr></table></figure><p>结论：<strong>遍历到当前位置所能访问到属性</strong></p><h1 id="8-封装MySQL的单例"><a href="#8-封装MySQL的单例" class="headerlink" title="8 封装MySQL的单例"></a>8 <strong>封装MySQL的单例</strong></h1><h2 id="8-1-分析"><a href="#8-1-分析" class="headerlink" title="8.1 分析"></a>8.1 <strong>分析</strong></h2><p>1、实现单例</p><p>2、连接数据库</p><p>3、对数据进行操作</p><h2 id="8-2-步骤"><a href="#8-2-步骤" class="headerlink" title="8.2 步骤"></a>8.2 <strong>步骤</strong></h2><p>第一步：实现单例</p><p>第二步：初始化参数</p><p>第三步：连接数据库</p><p>第四步：操作数据</p><p>1、执行数据操作语句（增、删、改）</p><p>2、执行数据查询语句</p><pre><code>a) 返回二维数组b) 返回一维数组c)返回一行一列</code></pre><p>8.3 <strong>代码实现</strong></p><p>第一步：实现单例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQLDB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$instance</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">self</span>::<span class="variable">$instance</span> <span class="keyword">instanceof</span> <span class="built_in">self</span>)</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$instance</span>=<span class="keyword">new</span> <span class="built_in">self</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$db</span>=MySQLDB::<span class="title function_ invoke__">getInstance</span>();</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$db</span>);</span><br></pre></td></tr></table></figure><p>注意：A instanceof B，表示A是否是B的类型，返回bool值</p><p>第二步：初始化参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//封装MySQL单例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQLDB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$host</span>;      <span class="comment">//主机地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$port</span>;      <span class="comment">//端口号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>;      <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pwd</span>;       <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$dbname</span>;    <span class="comment">//数据接名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$charset</span>;   <span class="comment">//字符集</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$link</span>;      <span class="comment">//连接对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$instance</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$param</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">initParam</span>(<span class="variable">$param</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取单例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"><span class="variable">$param</span>=<span class="keyword">array</span>(<span class="params"></span>)</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">self</span>::<span class="variable">$instance</span> <span class="keyword">instanceof</span> <span class="built_in">self</span>)</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$instance</span>=<span class="keyword">new</span> <span class="built_in">self</span>(<span class="variable">$param</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initParam</span>(<span class="params"><span class="variable">$param</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;host=<span class="variable">$param</span>[<span class="string">&#x27;host&#x27;</span>]??<span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;port=<span class="variable">$param</span>[<span class="string">&#x27;port&#x27;</span>]??<span class="string">&#x27;3306&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user=<span class="variable">$param</span>[<span class="string">&#x27;user&#x27;</span>]??<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pwd=<span class="variable">$param</span>[<span class="string">&#x27;pwd&#x27;</span>]??<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dbname=<span class="variable">$param</span>[<span class="string">&#x27;dbname&#x27;</span>]??<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;charset=<span class="variable">$param</span>[<span class="string">&#x27;charset&#x27;</span>]??<span class="string">&#x27;utf8&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="comment">//配置参数</span></span><br><span class="line"><span class="variable">$param</span>=<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>      =&gt;  <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pwd&#x27;</span>       =&gt;  <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dbname&#x27;</span>    =&gt;  <span class="string">&#x27;data&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">//获取单例</span></span><br><span class="line"><span class="variable">$db</span>=MySQLDB::<span class="title function_ invoke__">getInstance</span>(<span class="variable">$param</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$db</span>);</span><br></pre></td></tr></table></figure><p>第三步：连接数据库</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//封装MySQL单例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQLDB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$host</span>;      <span class="comment">//主机地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$port</span>;      <span class="comment">//端口号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>;      <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pwd</span>;       <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$dbname</span>;    <span class="comment">//数据接名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$charset</span>;   <span class="comment">//字符集</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$link</span>;      <span class="comment">//连接对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$instance</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$param</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">initParam</span>(<span class="variable">$param</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">initConnect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取单例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"><span class="variable">$param</span>=<span class="keyword">array</span>(<span class="params"></span>)</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">self</span>::<span class="variable">$instance</span> <span class="keyword">instanceof</span> <span class="built_in">self</span>)</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$instance</span>=<span class="keyword">new</span> <span class="built_in">self</span>(<span class="variable">$param</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initParam</span>(<span class="params"><span class="variable">$param</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;host=<span class="variable">$param</span>[<span class="string">&#x27;host&#x27;</span>]??<span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;port=<span class="variable">$param</span>[<span class="string">&#x27;port&#x27;</span>]??<span class="string">&#x27;3306&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user=<span class="variable">$param</span>[<span class="string">&#x27;user&#x27;</span>]??<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pwd=<span class="variable">$param</span>[<span class="string">&#x27;pwd&#x27;</span>]??<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dbname=<span class="variable">$param</span>[<span class="string">&#x27;dbname&#x27;</span>]??<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;charset=<span class="variable">$param</span>[<span class="string">&#x27;charset&#x27;</span>]??<span class="string">&#x27;utf8&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//连接数据库</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initConnect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;link=@<span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$this</span>-&gt;host,<span class="variable">$this</span>-&gt;user,<span class="variable">$this</span>-&gt;pwd,<span class="variable">$this</span>-&gt;dbname);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">mysqli_connect_error</span>())&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;数据库连接失败&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;错误信息：&#x27;</span>.<span class="title function_ invoke__">mysqli_connect_error</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;错误码：&#x27;</span>.<span class="title function_ invoke__">mysqli_connect_errno</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">mysqli_set_charset</span>(<span class="variable">$this</span>-&gt;link,<span class="variable">$this</span>-&gt;charset);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="comment">//配置参数</span></span><br><span class="line"><span class="variable">$param</span>=<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>      =&gt;  <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pwd&#x27;</span>       =&gt;  <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dbname&#x27;</span>    =&gt;  <span class="string">&#x27;data&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">//获取单例</span></span><br><span class="line"><span class="variable">$db</span>=MySQLDB::<span class="title function_ invoke__">getInstance</span>(<span class="variable">$param</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$db</span>);</span><br></pre></td></tr></table></figure><p>第四步：数据操作的功能</p><p>1、执行增、删、改操作</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//封装MySQL单例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQLDB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$host</span>;      <span class="comment">//主机地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$port</span>;      <span class="comment">//端口号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>;      <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pwd</span>;       <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$dbname</span>;    <span class="comment">//数据接名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$charset</span>;   <span class="comment">//字符集</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$link</span>;      <span class="comment">//连接对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$instance</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$param</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">initParam</span>(<span class="variable">$param</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">initConnect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取单例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"><span class="variable">$param</span>=<span class="keyword">array</span>(<span class="params"></span>)</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">self</span>::<span class="variable">$instance</span> <span class="keyword">instanceof</span> <span class="built_in">self</span>)</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$instance</span>=<span class="keyword">new</span> <span class="built_in">self</span>(<span class="variable">$param</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initParam</span>(<span class="params"><span class="variable">$param</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;host=<span class="variable">$param</span>[<span class="string">&#x27;host&#x27;</span>]??<span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;port=<span class="variable">$param</span>[<span class="string">&#x27;port&#x27;</span>]??<span class="string">&#x27;3306&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user=<span class="variable">$param</span>[<span class="string">&#x27;user&#x27;</span>]??<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pwd=<span class="variable">$param</span>[<span class="string">&#x27;pwd&#x27;</span>]??<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dbname=<span class="variable">$param</span>[<span class="string">&#x27;dbname&#x27;</span>]??<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;charset=<span class="variable">$param</span>[<span class="string">&#x27;charset&#x27;</span>]??<span class="string">&#x27;utf8&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//连接数据库</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initConnect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;link=@<span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$this</span>-&gt;host,<span class="variable">$this</span>-&gt;user,<span class="variable">$this</span>-&gt;pwd,<span class="variable">$this</span>-&gt;dbname);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">mysqli_connect_error</span>())&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;数据库连接失败&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;错误信息：&#x27;</span>.<span class="title function_ invoke__">mysqli_connect_error</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;错误码：&#x27;</span>.<span class="title function_ invoke__">mysqli_connect_errno</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">mysqli_set_charset</span>(<span class="variable">$this</span>-&gt;link,<span class="variable">$this</span>-&gt;charset);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行数据库的增、删、改、查</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"><span class="variable">$sql</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$rs</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$this</span>-&gt;link,<span class="variable">$sql</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;SQL语句执行失败&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;错误信息：&#x27;</span>.<span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$this</span>-&gt;link),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;错误码：&#x27;</span>.<span class="title function_ invoke__">mysqli_errno</span>(<span class="variable">$this</span>-&gt;link),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;错误的SQL语句：&#x27;</span>.<span class="variable">$sql</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$rs</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *执行增、删、改</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@return</span> bool 成功返回true,失败返回false</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span>(<span class="params"><span class="variable">$sql</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$key</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$sql</span>,<span class="number">0</span>,<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$key</span>,<span class="keyword">array</span>(<span class="string">&#x27;insert&#x27;</span>,<span class="string">&#x27;update&#x27;</span>,<span class="string">&#x27;delete&#x27;</span>)))</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">execute</span>(<span class="variable">$sql</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;非法访问&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取自动增长的编号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLastInsertId</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">mysqli_insert_id</span>(<span class="variable">$this</span>-&gt;link);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="comment">//配置参数</span></span><br><span class="line"><span class="variable">$param</span>=<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>      =&gt;  <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pwd&#x27;</span>       =&gt;  <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dbname&#x27;</span>    =&gt;  <span class="string">&#x27;data&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">//获取单例</span></span><br><span class="line"><span class="variable">$db</span>=MySQLDB::<span class="title function_ invoke__">getInstance</span>(<span class="variable">$param</span>);</span><br><span class="line"><span class="comment">//更新</span></span><br><span class="line"><span class="comment">//$db-&gt;exec(&quot;update news set title=&#x27;青草&#x27; where id=2&quot;);</span></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$db</span>-&gt;<span class="title function_ invoke__">exec</span>(<span class="string">&quot;insert into news values (null,&#x27;aa&#x27;,&#x27;bb&#x27;,unix_timestamp())&quot;</span>))</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;编号是：&#x27;</span>.<span class="variable">$db</span>-&gt;<span class="title function_ invoke__">getLastInsertId</span>();</span><br></pre></td></tr></table></figure><p>2、查询结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//封装MySQL单例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQLDB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$host</span>;      <span class="comment">//主机地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$port</span>;      <span class="comment">//端口号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>;      <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pwd</span>;       <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$dbname</span>;    <span class="comment">//数据接名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$charset</span>;   <span class="comment">//字符集</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$link</span>;      <span class="comment">//连接对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$instance</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$param</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">initParam</span>(<span class="variable">$param</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">initConnect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取单例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"><span class="variable">$param</span>=<span class="keyword">array</span>(<span class="params"></span>)</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">self</span>::<span class="variable">$instance</span> <span class="keyword">instanceof</span> <span class="built_in">self</span>)</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$instance</span>=<span class="keyword">new</span> <span class="built_in">self</span>(<span class="variable">$param</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initParam</span>(<span class="params"><span class="variable">$param</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;host=<span class="variable">$param</span>[<span class="string">&#x27;host&#x27;</span>]??<span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;port=<span class="variable">$param</span>[<span class="string">&#x27;port&#x27;</span>]??<span class="string">&#x27;3306&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user=<span class="variable">$param</span>[<span class="string">&#x27;user&#x27;</span>]??<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pwd=<span class="variable">$param</span>[<span class="string">&#x27;pwd&#x27;</span>]??<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dbname=<span class="variable">$param</span>[<span class="string">&#x27;dbname&#x27;</span>]??<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;charset=<span class="variable">$param</span>[<span class="string">&#x27;charset&#x27;</span>]??<span class="string">&#x27;utf8&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//连接数据库</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">initConnect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;link=@<span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$this</span>-&gt;host,<span class="variable">$this</span>-&gt;user,<span class="variable">$this</span>-&gt;pwd,<span class="variable">$this</span>-&gt;dbname);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">mysqli_connect_error</span>())&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;数据库连接失败&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;错误信息：&#x27;</span>.<span class="title function_ invoke__">mysqli_connect_error</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;错误码：&#x27;</span>.<span class="title function_ invoke__">mysqli_connect_errno</span>(),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">mysqli_set_charset</span>(<span class="variable">$this</span>-&gt;link,<span class="variable">$this</span>-&gt;charset);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行数据库的增、删、改、查</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"><span class="variable">$sql</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$rs</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$this</span>-&gt;link,<span class="variable">$sql</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;SQL语句执行失败&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;错误信息：&#x27;</span>.<span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$this</span>-&gt;link),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;错误码：&#x27;</span>.<span class="title function_ invoke__">mysqli_errno</span>(<span class="variable">$this</span>-&gt;link),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;错误的SQL语句：&#x27;</span>.<span class="variable">$sql</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$rs</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *执行增、删、改</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@return</span> bool 成功返回true,失败返回false</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span>(<span class="params"><span class="variable">$sql</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$key</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$sql</span>,<span class="number">0</span>,<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$key</span>,<span class="keyword">array</span>(<span class="string">&#x27;insert&#x27;</span>,<span class="string">&#x27;update&#x27;</span>,<span class="string">&#x27;delete&#x27;</span>)))</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">execute</span>(<span class="variable">$sql</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;非法访问&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取自动增长的编号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLastInsertId</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">mysqli_insert_id</span>(<span class="variable">$this</span>-&gt;link);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行查询语句</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"><span class="variable">$sql</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$sql</span>,<span class="number">0</span>,<span class="number">6</span>)==<span class="string">&#x27;select&#x27;</span> || <span class="title function_ invoke__">substr</span>(<span class="variable">$sql</span>,<span class="number">0</span>,<span class="number">4</span>)==<span class="string">&#x27;show&#x27;</span> || <span class="title function_ invoke__">substr</span>(<span class="variable">$sql</span>,<span class="number">0</span>,<span class="number">4</span>)==<span class="string">&#x27;desc&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">execute</span>(<span class="variable">$sql</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;非法访问&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *执行查询语句，返回二维数组</span></span><br><span class="line"><span class="comment">    *@$sql string 查询sql语句</span></span><br><span class="line"><span class="comment">    *<span class="doctag">@type</span> string assoc|num|both</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchAll</span>(<span class="params"><span class="variable">$sql</span>,<span class="variable">$type</span>=<span class="string">&#x27;assoc&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$rs</span>=<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">        <span class="variable">$type</span>=<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getType</span>(<span class="variable">$type</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">mysqli_fetch_all</span>(<span class="variable">$rs</span>,<span class="variable">$type</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//匹配一维数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchRow</span>(<span class="params"><span class="variable">$sql</span>,<span class="variable">$type</span>=<span class="string">&#x27;assoc&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$list</span>=<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fetchAll</span>(<span class="variable">$sql</span>,<span class="variable">$type</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$list</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$list</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//匹配一行一列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchColumn</span>(<span class="params"><span class="variable">$sql</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$list</span>=<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fetchRow</span>(<span class="variable">$sql</span>,<span class="string">&#x27;num&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$list</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$list</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取匹配类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"><span class="variable">$type</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(<span class="variable">$type</span>)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;num&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span>  MYSQLI_NUM;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;both&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span>  MYSQLI_BOTH;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span>  MYSQLI_ASSOC;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="comment">//配置参数</span></span><br><span class="line"><span class="variable">$param</span>=<span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>      =&gt;  <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pwd&#x27;</span>       =&gt;  <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dbname&#x27;</span>    =&gt;  <span class="string">&#x27;data&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">//获取单例</span></span><br><span class="line"><span class="variable">$db</span>=MySQLDB::<span class="title function_ invoke__">getInstance</span>(<span class="variable">$param</span>);</span><br><span class="line"><span class="comment">//更新</span></span><br><span class="line"><span class="comment">//$db-&gt;exec(&quot;update news set title=&#x27;青草&#x27; where id=2&quot;);</span></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if($db-&gt;exec(&quot;insert into news values (null,&#x27;aa&#x27;,&#x27;bb&#x27;,unix_timestamp())&quot;))</span></span><br><span class="line"><span class="comment">    echo &#x27;编号是：&#x27;.$db-&gt;getLastInsertId();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line"><span class="comment">//$list=$db-&gt;fetchAll(&#x27;select * from news&#x27;,&#x27;aa&#x27;);</span></span><br><span class="line"><span class="comment">//$list=$db-&gt;fetchRow(&#x27;select * from news where id=1&#x27;,&#x27;aa&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$list</span>=<span class="variable">$db</span>-&gt;<span class="title function_ invoke__">fetchColumn</span>(<span class="string">&#x27;select count(*) from news&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$list</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>小结：</p><p>1、instanceof 用来判断对象是否属于某个类</p><p>2、参数必须从外部传递到内部，不能写死到类的内部。</p><p>3、为了保证代码的可重用性，一个方法只实现一个功能，所以初始化参数和连接数据库分到两个方法中。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-自动加载类&quot;&gt;&lt;a href=&quot;#1-自动加载类&quot; class=&quot;headerlink&quot; title=&quot;1 自动加载类&quot;&gt;&lt;/a&gt;&lt;strong&gt;1 自动加载类&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;1-1-类的规则&quot;&gt;&lt;a href=&quot;#1-1-类的规则</summary>
      
    
    
    
    <category term="Language" scheme="https://gbk.cx/categories/Language/"/>
    
    
    <category term="PHP" scheme="https://gbk.cx/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP面向对象-2-三大特性&amp;类常量&amp;接口</title>
    <link href="https://gbk.cx/p/980312b6/"/>
    <id>https://gbk.cx/p/980312b6/</id>
    <published>2024-10-19T13:55:06.000Z</published>
    <updated>2024-10-19T14:19:55.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-多态"><a href="#1-多态" class="headerlink" title="1 多态"></a>1 <strong>多态</strong></h1><p>多态：多种形态。</p><p>多态分为两种：方法重写和方法重载</p><h2 id="1-1-方法重写"><a href="#1-1-方法重写" class="headerlink" title="1.1 方法重写"></a><strong>1.1 方法重写</strong></h2><p>子类重写了父类的同名的方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;这是父类&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//子类重写了父类的同名方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;这是子类&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$stu</span>=<span class="keyword">new</span> <span class="title class_">Student</span>;</span><br><span class="line"><span class="variable">$stu</span>-&gt;<span class="title function_ invoke__">show</span>();           <span class="comment">//这是子类</span></span><br></pre></td></tr></table></figure><p>注意事项：</p><ol><li>子类的方法必须和父类的方法同名</li><li>参数个数要一致</li><li>子类修饰的不能比父类更加严格</li></ol><h2 id="1-2-方法重载"><a href="#1-2-方法重载" class="headerlink" title="1.2 方法重载"></a><strong>1.2 方法重载</strong></h2><p>在同一个类中，有多个同名的函数，通过参数的不同来区分不同的方法，称为方法重载</p><p>💡 注意：PHP不支持方法重载，但是PHP可以通过其他方法来模拟方法重载。</p><h1 id="2面向对象三大特性"><a href="#2面向对象三大特性" class="headerlink" title="2面向对象三大特性"></a>2<strong>面向对象三大特性</strong></h1><ol><li>封装</li><li>继承</li><li>多态</li></ol><h1 id="3-私有属性继承和重写"><a href="#3-私有属性继承和重写" class="headerlink" title="3 私有属性继承和重写"></a>3 <strong>私有属性继承和重写</strong></h1><p>私有属性可以继承但不能重写。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>=<span class="string">&#x27;PHP&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//var_dump($this);  //object(B)#1 (2) &#123; [&quot;name&quot;:&quot;B&quot;:private]=&gt; string(4) &quot;Java&quot; [&quot;name&quot;:&quot;A&quot;:private]=&gt; string(3) &quot;PHP&quot; &#125;</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;    <span class="comment">//PHP</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span>=<span class="string">&#x27;Java&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//var_dump($this);  //object(B)#1 (2) &#123; [&quot;name&quot;:&quot;B&quot;:private]=&gt; string(4) &quot;Java&quot; [&quot;name&quot;:&quot;A&quot;:private]=&gt; string(3) &quot;PHP&quot; &#125;</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;    <span class="comment">//Java</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$obj</span>=<span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$obj</span>-&gt;<span class="title function_ invoke__">showA</span>();</span><br><span class="line"><span class="variable">$obj</span>-&gt;<span class="title function_ invoke__">showB</span>();</span><br><span class="line"><span class="comment">/*分析：</span></span><br><span class="line"><span class="comment">showA()和showB()中的$this都表示B的对象，B中继承了A的私有属性，所以B中有两个$name.</span></span><br><span class="line"><span class="comment">在showA()中只能访问A中的$name，不能访问B中的$name</span></span><br><span class="line"><span class="comment">在showB()中只能访问B中的$name,不能访问A中的$name</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="4-方法修饰符"><a href="#4-方法修饰符" class="headerlink" title="4 方法修饰符"></a>4 <strong>方法修饰符</strong></h1><p>方法修饰符有：static、final、abstract</p><h2 id="4-1-static【静态的】"><a href="#4-1-static【静态的】" class="headerlink" title="4.1 static【静态的】"></a>4.1 <strong>static【静态的】</strong></h2><ol><li>static修饰的属性叫静态属性、static修饰的方法叫静态方法</li><li>静态成员加载类的时候分配空间，程序执行完毕后销毁</li><li>静态成员在内存中就一份。</li><li>调用语法 类名::属性 类名::方法名()</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$add</span>=<span class="string">&#x27;北京&#x27;</span>;    <span class="comment">// 修饰符之间没有顺序</span></span><br><span class="line">    <span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;这是一个静态的方法&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title class_">Person</span>::<span class="variable">$add</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;       <span class="comment">//北京</span></span><br><span class="line"><span class="title class_">Person</span>::<span class="title function_ invoke__">show</span>();                 <span class="comment">//这是一个静态的方法</span></span><br></pre></td></tr></table></figure><p>💡 <strong>注意：</strong>self表示所在类的类名，使用self降低耦合性</p><p>静态成员也可以被继承</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$add</span>=<span class="string">&#x27;中国&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;这是人类&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title class_">Student</span>::<span class="variable">$add</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;      <span class="comment">//中国   通过子类名称访问父类的静态成员</span></span><br><span class="line"><span class="title class_">Student</span>::<span class="title function_ invoke__">show</span>();                <span class="comment">//这是人类</span></span><br></pre></td></tr></table></figure><p>静态延时绑定</p><p>static表示当前对象所属的类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$type</span>=<span class="string">&#x27;人类&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//var_dump($this);      //object(Student)#1 (0) &#123; &#125;</span></span><br><span class="line">        <span class="comment">//echo self::$type,&#x27;&lt;br&gt;&#x27;;  //人类</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="built_in">static</span>::<span class="variable">$type</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;          <span class="comment">//学生   延时绑定</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$type</span>=<span class="string">&#x27;学生&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//var_dump($this);      //object(Student)#1 (0) &#123; &#125;</span></span><br><span class="line">        <span class="comment">//echo self::$type,&#x27;&lt;br&gt;&#x27;;  //学生</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="built_in">static</span>::<span class="variable">$type</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;          <span class="comment">//学生</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="variable">$obj</span>=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="variable">$obj</span>-&gt;<span class="title function_ invoke__">show1</span>();</span><br><span class="line"><span class="variable">$obj</span>-&gt;<span class="title function_ invoke__">show2</span>();</span><br></pre></td></tr></table></figure><p>小结：</p><p>1、static在内存中就一份，在类加载的时候分配空间</p><p>2、如果有多个修饰符，修饰符之间是没有顺序的</p><p>3、self表示所在类的类名</p><p>4、static表示当前对象所属的类</p><p>5、static有两个作用，第一表示静态的，第二表示类名</p><h2 id="4-2-final【最终的】"><a href="#4-2-final【最终的】" class="headerlink" title="4.2 final【最终的】"></a>4.2 final【最终的】</h2><p>final修饰的方法不能被重写</p><p>final修饰的类不能被继承</p><h3 id="4-2-1-作用"><a href="#4-2-1-作用" class="headerlink" title="4.2.1 作用"></a>4.2.1 作用</h3><p>1、如果一个类确定不被继承，一个方法确定不会被重写，用final修饰可以提高执行效率。</p><p>2、如果一个方法不允许被其他类重写，可以用final修饰。</p><h2 id="4-3-abstract【抽象的】"><a href="#4-3-abstract【抽象的】" class="headerlink" title="4.3 abstract【抽象的】"></a>4.3 abstract【抽象的】</h2><ol><li>abstract修饰的方法是抽象方法，修饰的类是抽象类</li><li>只有方法的声明没有方法的实现称为抽象方法</li><li>一个类中只要有一个方法是抽象方法，这个类必须是抽象类。</li><li>抽象类的特点是不能被实例化</li><li>子类继承了抽象类，就必须重新实现父类的所有的抽象方法，否则不允许实例化</li><li>类中没有抽象方法也可以声明成抽象类，用来阻止类的实例化</li></ol><h3 id="4-3-1-抽象类的作用"><a href="#4-3-1-抽象类的作用" class="headerlink" title="4.3.1 抽象类的作用"></a>4.3.1 抽象类的作用</h3><p>1、定义命名规范</p><p>2、阻止实例化，如果一个类中所有的方法都是静态方法，这时候没有必要去实例化，可以通过abstract来阻止来的实例化。</p><h1 id="5-类常量"><a href="#5-类常量" class="headerlink" title="5 类常量"></a>5 <strong>类常量</strong></h1><p>类常量是const常量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//public const ADD；     //7.1以后才支持访问修饰符</span></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">ADD</span>=<span class="string">&#x27;地址不详&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title class_">Student</span>::<span class="variable constant_">ADD</span>;</span><br></pre></td></tr></table></figure><p>问题：define常量和const常量的区别？</p><p>答：const常量可以做类成员，define常量不可以做类成员。</p><p>问题：常量和静态的属性的区别？</p><p>答：相同点：都在加载类的时候分配空间</p><p>不同点：常量的值不可以更改，静态属性的值可以更改</p><h1 id="6-接口（interface）"><a href="#6-接口（interface）" class="headerlink" title="6 接口（interface）"></a>6 <strong>接口（interface）</strong></h1><h2 id="6-1-接口"><a href="#6-1-接口" class="headerlink" title="6.1 接口"></a>6.1 接口</h2><ol><li>如果一个类中所有的方法是都是抽象方法，那么这个抽象类可以声明成接口</li><li>接口是一个特殊的抽象类，接口中只能有抽象方法和常量</li><li>接口中的抽象方法只能是public，可以省略，默认也是public的</li><li>通过implements关键字来实现接口</li><li>不能使用abstract和final来修饰接口中的抽象方法。</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//声明接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IPerson</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">ADD</span>=<span class="string">&#x27;中国&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">IPerson</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//访问接口中的常量</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title class_">IPerson</span>::<span class="variable constant_">ADD</span>;</span><br></pre></td></tr></table></figure><h2 id="6-2-接口的多重实现"><a href="#6-2-接口的多重实现" class="headerlink" title="6.2 接口的多重实现"></a>6.<strong>2 接口的多重实现</strong></h2><p>类不允许多重继承，但是接口允许多重实现。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IPic1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IPic2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口允许多重实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">IPic1</span>,<span class="title">IPic2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p>1、在接口的多重实现中，如果有同名的方法，只要实现一次即可</p><p>2、类可以继承的同时实现接口</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">IPIc1</span>,<span class="title">IPic1</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-匿名类"><a href="#7-匿名类" class="headerlink" title="7 匿名类"></a>7 <strong>匿名类</strong></h1><p>这是了解的内容，PHP7.0支持</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$stu</span>=<span class="keyword">new</span> <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;构造函数&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$stu</span>-&gt;name;</span><br><span class="line"><span class="comment">/*运行结果；</span></span><br><span class="line"><span class="comment">构造函数</span></span><br><span class="line"><span class="comment">tom</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>小结：</p><p>1、如果类只被实例化一次就可以使用匿名类</p><p>2、好处，在执行的过程中，类不占用空间</p><h1 id="8-方法绑定"><a href="#8-方法绑定" class="headerlink" title="8 方法绑定"></a>8 <strong>方法绑定</strong></h1><p>这是了解的内容，PHP7.0支持</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$stu</span>=<span class="keyword">new</span> <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;构造函数&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$stu</span>-&gt;name;</span><br><span class="line"><span class="comment">/*运行结果；</span></span><br><span class="line"><span class="comment">构造函数</span></span><br><span class="line"><span class="comment">tom</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>小结：</p><p>1、如果类只被实例化一次就可以使用匿名类</p><p>2、好处，在执行的过程中，类不占用空间</p><h1 id="9-异常处理"><a href="#9-异常处理" class="headerlink" title="9 异常处理"></a>9 <strong>异常处理</strong></h1><p>集中处理在代码块中发生的异常。</p><p>在代码块中发生了异常直接抛出，代码块中不处理异常，将异常集中起来一起处理。</p><h2 id="9-1-使用的关键字"><a href="#9-1-使用的关键字" class="headerlink" title="9.1 使用的关键字"></a>9.1 使用的关键字</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:监测代码块</span><br><span class="line"><span class="keyword">catch</span>:捕获异常</span><br><span class="line"><span class="keyword">throw</span>:抛出异常</span><br><span class="line"><span class="keyword">finally</span>:无论有无异常都会执行，可以省略</span><br><span class="line"><span class="built_in">Exception</span>：异常类</span><br></pre></td></tr></table></figure><p>语法结构</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//检测代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$ex</span>)&#123;</span><br><span class="line"><span class="comment">//捕获异常</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//不论是否有异常，都要执行，finally可以省略</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="9-2-自定义异常"><a href="#9-2-自定义异常" class="headerlink" title="9.2 自定义异常"></a>9.2 自定义异常</h2><p>场景：如果实现异常的分类处理？比如异常有三个级别异常对应三种处理方式</p><p>自定义三种异常即可</p><p>所有异常类的父类是Exception，Exception中的方法不允许重写</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-多态&quot;&gt;&lt;a href=&quot;#1-多态&quot; class=&quot;headerlink&quot; title=&quot;1 多态&quot;&gt;&lt;/a&gt;1 &lt;strong&gt;多态&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;多态：多种形态。&lt;/p&gt;
&lt;p&gt;多态分为两种：方法重写和方法重载&lt;/p&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="Language" scheme="https://gbk.cx/categories/Language/"/>
    
    
    <category term="PHP" scheme="https://gbk.cx/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP面向对象-1-类&amp;对象&amp;属性&amp;访问修饰符</title>
    <link href="https://gbk.cx/p/b78a5232/"/>
    <id>https://gbk.cx/p/b78a5232/</id>
    <published>2024-10-19T13:52:34.000Z</published>
    <updated>2024-10-19T14:19:17.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-面向对象介绍"><a href="#1-面向对象介绍" class="headerlink" title="1 面向对象介绍"></a>1 <strong>面向对象介绍</strong></h1><h2 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a><strong>1.1 介绍</strong></h2><p>面向对象是一个编程思想。编程思想有面向过程和面向对象</p><p>面向过程：编程思路集中的是过程上</p><p>面向对象：编程思路集中在参与的对象</p><p>以去饭馆吃饭为例：</p><p>面向过程：点菜——做菜——上菜——吃饭——结账——收拾</p><p>面向对象：服务员，厨师，客人</p><h2 id="1-2-面向对象的好处"><a href="#1-2-面向对象的好处" class="headerlink" title="1.2 面向对象的好处"></a><strong>1.2 面向对象的好处</strong></h2><ol><li>多人合作方便</li><li>减少代码冗余，灵活性高</li><li>代码的可重用性发挥到极致</li><li>可扩展性强</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">多学一招：</span><br><span class="line">OOP：面向对象编程（Object Oriented Programming，面向对象编程）</span><br><span class="line">OOA: 面向对象分析(Object-Oriented Analysis,OOA)</span><br><span class="line">OOD: 面向对象设计（Object-Oriented Design，OOD）</span><br></pre></td></tr></table></figure><h1 id="2-类和对象"><a href="#2-类和对象" class="headerlink" title="2 类和对象"></a>2 类和对象</h1><p>1、对象是具体存在的事物，对象是由属性（变量）和方法（函数）组成的</p><p>2、类是具有相同属性和行为的一组对象的集合</p><p>分析：做菜动作——厨师对象——厨师类<br>结论：我们在开发的时候，先写类，通过类创建对象，然后调用对象的属性和方法实现功能。    类——对象——调用成员</p><p>💡 注意：一个类可以创建多个对象</p><p><strong>小结：</strong></p><p>1、对象是由属性和方法组成的</p><p>2、类是所有对象的相同属性和方法的集合</p><p>3、在开发的时候先写类，通过类创建对象，通过对象调用方法和属性</p><p>4、一个类可以创建多个对象</p><h1 id="3-在PHP中实现类和对象"><a href="#3-在PHP中实现类和对象" class="headerlink" title="3 在PHP中实现类和对象"></a>3 <strong>在PHP中实现类和对象</strong></h1><h2 id="3-1-创建类"><a href="#3-1-创建类" class="headerlink" title="3.1 创建类"></a>3.1 创建类</h2><p>语法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="comment">//常量</span></span><br><span class="line">&#125;</span><br><span class="line">类是由属性、方法、常量组成的，也可以说</span><br><span class="line">类成员有：属性、方法、常量</span><br></pre></td></tr></table></figure><p>类名的命名规则：</p><ol><li>以字母、下划线开头，后面跟的是字母、数字、下划线</li><li>不能用PHP关键字做类名</li><li>类名不区分大小写（变量名区分，关键字、类名不区分大小写）</li><li>类名用帕斯卡命名法（大驼峰 单词的首字母大写）</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-对象实例化"><a href="#3-2-对象实例化" class="headerlink" title="3.2 对象实例化"></a>3.2 对象实例化</h2><p>通过new关键字来实例化对象。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line"><span class="variable">$stu1</span>=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="variable">$stu2</span>=<span class="keyword">new</span> <span class="title class_">Student</span>;      <span class="comment">//小括号可以省略</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$stu1</span>,<span class="variable">$stu2</span>);  <span class="comment">//object(Student)#1 (0) &#123; &#125; object(Student)#2 (0) &#123; &#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-对象的比较"><a href="#3-3-对象的比较" class="headerlink" title="3.3 对象的比较"></a>3.3 对象的比较</h2><p>💡 <strong>注意：对象的传递是地址传递</strong></p><p>相等：结构和保存的值一样就相等<br>全等：指向同一个对象才是全等。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line"><span class="variable">$stu1</span>=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="variable">$stu2</span>=<span class="keyword">new</span> <span class="title class_">Student</span>;</span><br><span class="line"><span class="variable">$stu3</span>=<span class="variable">$stu2</span>; <span class="comment">//对象传递的是地址</span></span><br><span class="line"><span class="comment">//var_dump($stu1,$stu2,$stu3); //object(Student)#1 (0) &#123; &#125; object(Student)#2 (0) &#123; &#125; object(Student)#2 (0) &#123; &#125;</span></span><br><span class="line"><span class="comment">//对象比较</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$stu1</span>==<span class="variable">$stu2</span>);     <span class="comment">//bool(true) ,比较对象的结构</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$stu1</span>===<span class="variable">$stu2</span>);    <span class="comment">//bool(false) $stu1和$stu2是否是同一个对象</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$stu2</span>===<span class="variable">$stu3</span>);    <span class="comment">//bool(true) $stu2和$stu3是同一个对象</span></span><br></pre></td></tr></table></figure><h1 id="4-属性"><a href="#4-属性" class="headerlink" title="4 属性"></a>4 <strong>属性</strong></h1><p>属性本质就是变量</p><p>通过<code>-&gt;</code>调用对象的成员   对象名-&gt;属性名  对象名-&gt;方法名()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;               <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$add</span>=<span class="string">&#x27;地址不详&#x27;</span>;     <span class="comment">//属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line"><span class="variable">$stu</span>=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="comment">//print_r($stu);    //Student Object ( [name] =&gt; [add] =&gt; 地址不详 )</span></span><br><span class="line"><span class="comment">//操作属性</span></span><br><span class="line"><span class="comment">//1、给属性赋值</span></span><br><span class="line"><span class="variable">$stu</span>-&gt;name=<span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line"><span class="variable">$stu</span>-&gt;add=<span class="string">&#x27;北京&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、获取属性的值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;姓名：&#x27;</span>.<span class="variable">$stu</span>-&gt;name,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;   <span class="comment">//姓名：tom</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;地址：&#x27;</span>.<span class="variable">$stu</span>-&gt;add,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;        <span class="comment">//地址：北京</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、添加属性</span></span><br><span class="line"><span class="variable">$stu</span>-&gt;age=<span class="number">20</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$stu</span>);  <span class="comment">//Student Object ( [name] =&gt; tom [add] =&gt; 北京 [age] =&gt; 20 )</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">//4、删除属性</span></span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$stu</span>-&gt;add);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$stu</span>);  <span class="comment">//Student Object ( [name] =&gt; tom [age] =&gt; 20 )</span></span><br></pre></td></tr></table></figure><h1 id="5-方法"><a href="#5-方法" class="headerlink" title="5 方法"></a>5 <strong>方法</strong></h1><p>方法的本质就是函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;这是show方法&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//public可以省略，如果省略，默认就是public</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;这是test方法&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$stu</span>=<span class="keyword">new</span> <span class="title class_">Student</span>;</span><br><span class="line"><span class="variable">$stu</span>-&gt;<span class="title function_ invoke__">show</span>();   <span class="comment">//调用方法</span></span><br><span class="line"><span class="variable">$stu</span>-&gt;<span class="title function_ invoke__">test</span>();</span><br></pre></td></tr></table></figure><p>多学一招：</p><p>1、方法前面public是可以省略的，如果省略，默认就是public的。</p><p>2、属性前面的public不能省略</p><h1 id="6-访问修饰符"><a href="#6-访问修饰符" class="headerlink" title="6 访问修饰符"></a>6 访问修饰符</h1><p>用来控制成员的访问权限</p><table><thead><tr><th><strong>修饰符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>public（公有的）</td><td>在类的内部和外部都能访问</td></tr><tr><td>private（私有的）</td><td>只能在类的内部访问</td></tr><tr><td>protected（受保护的）</td><td>在整个继承链上访问</td></tr></tbody></table><p><strong>多学一招：</strong>一般来说，属性都用私有的，通过公有的方法对私有的属性进行赋值和取值。</p><p>作用：保证数据的合法性</p><p>💡 提示：$this表示调用当前方法的对象</p><h1 id="7-类和对象在内存中的分布"><a href="#7-类和对象在内存中的分布" class="headerlink" title="7 类和对象在内存中的分布"></a>7 <strong>类和对象在内存中的分布</strong></h1><ol><li>对象的本质是一个复杂的变量</li><li>类的本质是一个自定义的复杂数据类型</li><li>栈区：运行速度快，体积小，保存基本类型</li><li>堆区：运行速度稍慢，体积大，保存复杂类型</li><li>实例化的过程就是分配内存空间的过程</li><li>对象保存在堆区，将堆区的地址保存到栈区</li></ol><h1 id="8-封装"><a href="#8-封装" class="headerlink" title="8 封装"></a>8 <strong>封装</strong></h1><p>封装就是有选择性的提供数据</p><p>通过访问修饰符来实现封装</p><h1 id="9-构造方法"><a href="#9-构造方法" class="headerlink" title="9 构造方法"></a>9 <strong>构造方法</strong></h1><h2 id="9-1-介绍"><a href="#9-1-介绍" class="headerlink" title="9.1 介绍"></a>9.1 <strong>介绍</strong></h2><p>构造方法也叫构造函数，当实例化对象的时候自动执行。<br>语法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">注意：前面是两个下划线</span><br></pre></td></tr></table></figure><p>💡 注意：在其他语言里，与类名同名的函数是构造函数，在PHP中不允许这种写法。</p><h1 id="10-析构方法"><a href="#10-析构方法" class="headerlink" title="10 析构方法"></a>10 <strong>析构方法</strong></h1><h2 id="10-1-介绍"><a href="#10-1-介绍" class="headerlink" title="10.1 介绍"></a><strong>10.1 介绍</strong></h2><p>当对象销毁的时候自动调用</p><p>语法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>脚下留心：析构函数不可以带参数</p><h1 id="11-继承"><a href="#11-继承" class="headerlink" title="11 继承"></a>11 <strong>继承</strong></h1><h2 id="11-1-继承介绍"><a href="#11-1-继承介绍" class="headerlink" title="11.1 继承介绍"></a><strong>11.1 继承介绍</strong></h2><ol><li>继承使得代码具有层次结构</li><li>子类继承了父类的属性和方法，实现了代码的可重用性。</li><li>使用extends关键字实现继承</li><li>父类和子类是相对的</li></ol><p>语法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-2-子类中调用父类成员"><a href="#11-2-子类中调用父类成员" class="headerlink" title="11.2 子类中调用父类成员"></a><strong>11.2 子类中调用父类成员</strong></h2><p>1、方法一：通过实例化父类调用父类的成员</p><p>2、方法二：通过$this关键字调用父类的成员</p><h2 id="11-3-protected"><a href="#11-3-protected" class="headerlink" title="11.3 protected"></a>11.3 <strong>protected</strong></h2><p>protected：受保护的，在整个继承链上使用</p><h2 id="11-4-继承中的构造函数"><a href="#11-4-继承中的构造函数" class="headerlink" title="11.4 继承中的构造函数"></a><strong>11.4 继承中的构造函数</strong></h2><p>规则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、如果子类有构造函数就调用子类的，如果子类没有就调用父类的构造函数。</span><br><span class="line"></span><br><span class="line">2、子类的构造函数调用后，默认不再调用父类的构造函数</span><br></pre></td></tr></table></figure><p>通过类名调用父类的构造函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名::<span class="title function_ invoke__">__construct</span>()</span><br></pre></td></tr></table></figure><p>💡 <strong>注意</strong>：可以用parent关键字表示父类的名字，可以降低程序的耦合性</p><h2 id="11-5-this详解"><a href="#11-5-this详解" class="headerlink" title="11.5 $this详解"></a>11.5 <strong>$this详解</strong></h2><p><strong>$this</strong>表示当前对象的引用，也就是是或**$this**保存的当前对象的地址</p><h2 id="11-6-多重继承"><a href="#11-6-多重继承" class="headerlink" title="11.6 多重继承"></a>11.6 <strong>多重继承</strong></h2><p>PHP不允许多重继承，因为多重继承容易产生二义性</p><p>如何实现C继承A和B，使用继承链</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-面向对象介绍&quot;&gt;&lt;a href=&quot;#1-面向对象介绍&quot; class=&quot;headerlink&quot; title=&quot;1 面向对象介绍&quot;&gt;&lt;/a&gt;1 &lt;strong&gt;面向对象介绍&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;1-1-介绍&quot;&gt;&lt;a href=&quot;#1-1-介绍</summary>
      
    
    
    
    <category term="Language" scheme="https://gbk.cx/categories/Language/"/>
    
    
    <category term="PHP" scheme="https://gbk.cx/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP基础-3-文件操作</title>
    <link href="https://gbk.cx/p/a73ab557/"/>
    <id>https://gbk.cx/p/a73ab557/</id>
    <published>2024-10-19T13:51:34.000Z</published>
    <updated>2024-10-19T14:14:19.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-文件操作"><a href="#1-文件操作" class="headerlink" title="1 文件操作"></a>1 <strong>文件操作</strong></h1><h2 id="1-1-将字符串写入文件"><a href="#1-1-将字符串写入文件" class="headerlink" title="1.1 将字符串写入文件"></a><strong>1.1</strong> 将字符串写入文件</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span>=<span class="string">&quot;床前明月光，\r\n疑是地上霜。\r\n举头望明月，\r\n低头思故乡。&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;./test.txt&#x27;</span>,<span class="variable">$str</span>);  <span class="comment">//将字符串写到文本中</span></span><br></pre></td></tr></table></figure><p>小结：</p><p>1、 所有的“写”操作都是清空重写</p><p>2、在文本中换行是\r\n</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\r:回车   光标移动到当前行的最前面</span><br><span class="line">\n:换行   将光标下移动一行</span><br><span class="line">按键盘的回车键做了两步，第一步将光标移动到当前行的最前面，第二步下移一行。</span><br></pre></td></tr></table></figure><p>3、\r\n是特殊字符，必须放在双引号内</p><h2 id="1-2-将整个文件读入一个字符串"><a href="#1-2-将整个文件读入一个字符串" class="headerlink" title="1.2 将整个文件读入一个字符串"></a>1.<strong>2</strong> 将整个文件读入一个字符串</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一：</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;./test.txt&#x27;</span>);   <span class="comment">//将整个文件读入一个字符串</span></span><br><span class="line"><span class="comment">//方法二：</span></span><br><span class="line"><span class="title function_ invoke__">readfile</span>(<span class="string">&#x27;./test.txt&#x27;</span>); <span class="comment">//读取输出文件内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：echo file_get_contents()==readfile()</span></span><br></pre></td></tr></table></figure><h2 id="1-3-打开文件并操作"><a href="#1-3-打开文件并操作" class="headerlink" title="1.3 打开文件并操作"></a>1.<strong>3</strong> 打开文件并操作</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">fopen</span>(地址,模式)    打开文件</span><br><span class="line">模式：</span><br><span class="line">r：读     read</span><br><span class="line">w:写      write</span><br><span class="line">a:追加    append</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.1、打开文件写入</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$fp=fopen(&#x27;./test.txt&#x27;,&#x27;w&#x27;);    //打开文件返回文件指针（文件地址）</span></span><br><span class="line"><span class="comment">//var_dump($fp);//resource(3) of type (stream) </span></span><br><span class="line"><span class="comment">for($i=1;$i&lt;=10;$i++)</span></span><br><span class="line"><span class="comment">fputs($fp,&#x27;关关雎鸠&#x27;.&quot;\r\n&quot;);//写一行</span></span><br><span class="line"><span class="comment">fclose($fp);//关闭文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.2  打开文件读取</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$fp=fopen(&#x27;./test.txt&#x27;,&#x27;r&#x27;);//打开文件读取</span></span><br><span class="line"><span class="comment">while($line=fgets($fp))&#123;</span></span><br><span class="line"><span class="comment">echo $line,&#x27;&lt;br&gt;&#x27;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.3   打开文件追加</span></span><br><span class="line"><span class="variable">$fp</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;./test.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>);<span class="comment">//打开文件追加</span></span><br><span class="line"><span class="title function_ invoke__">fputs</span>(<span class="variable">$fp</span>,<span class="string">&#x27;在河之洲&#x27;</span>);<span class="comment">//在文件末尾追加</span></span><br></pre></td></tr></table></figure><p>小结：</p><p>1、打开文件，返回文件指针（文件指针就是文件地址），资源类型</p><p>2、打开文件写、追加操作，如果文件不存在，就创建新的文件</p><p>3、打开文件读操作，文件不存在就报错</p><p>4、fputs()写一行，fgets()读一行，fclose()关闭文件</p><p>5、追加是在文件的末尾追加</p><h2 id="1-4-是否是文件【is-file-】"><a href="#1-4-是否是文件【is-file-】" class="headerlink" title="1.4 是否是文件【is_file()】"></a>1.<strong>4</strong> 是否是文件【is_file()】</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">is_file</span>(<span class="string">&#x27;./test.txt&#x27;</span>)?<span class="string">&#x27;是文件&#x27;</span>:<span class="string">&#x27;不是文件&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="1-5-判断文件或文件夹是否存在【file-exists-】"><a href="#1-5-判断文件或文件夹是否存在【file-exists-】" class="headerlink" title="1.5 判断文件或文件夹是否存在【file_exists()】"></a>1.<strong>5</strong> 判断文件或文件夹是否存在【file_exists()】</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_exists</span>(<span class="string">&#x27;./test.txt&#x27;</span>)?<span class="string">&#x27;文件存在&#x27;</span>:<span class="string">&#x27;文件不存在&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="1-6-删除文件【unlink】"><a href="#1-6-删除文件【unlink】" class="headerlink" title="1.6 删除文件【unlink】"></a>1.<strong>6</strong> 删除文件【unlink】</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$path</span>=<span class="string">&#x27;./test.txt&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$path</span>))&#123;     <span class="comment">//文件存在</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_dir</span>(<span class="variable">$path</span>))       <span class="comment">//如果是文件夹用rmdir()删除</span></span><br><span class="line">        <span class="title function_ invoke__">rmdir</span>(<span class="variable">$path</span>);</span><br><span class="line">    <span class="keyword">elseif</span>(<span class="title function_ invoke__">is_file</span>(<span class="variable">$Path</span>))  <span class="comment">//如果是文件用unlink()删除</span></span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$path</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;文件夹或文件不存在&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-7-二进制读取【fread-文件指针，文件大小-】"><a href="#1-7-二进制读取【fread-文件指针，文件大小-】" class="headerlink" title="1.7  二进制读取【fread(文件指针，文件大小)】"></a>1.<strong>7</strong>  二进制读取【fread(文件指针，文件大小)】</h2><p>文件的存储有两种：字符流和二进制流</p><p>二进制流的读取按文件大小来读的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$path</span>=<span class="string">&#x27;./face.jpg&#x27;</span>;</span><br><span class="line"><span class="variable">$fp</span>=<span class="title function_ invoke__">fopen</span>(<span class="variable">$path</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;content-type:image/jpeg&#x27;</span>);  <span class="comment">//告知浏览器下面的代码通过jpg图片方式解析</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">fread</span>(<span class="variable">$fp</span>,<span class="title function_ invoke__">filesize</span>(<span class="variable">$path</span>));    <span class="comment">//二进制读取</span></span><br></pre></td></tr></table></figure><p>多学一招：file_get_contents()也可以进行二进制读取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;content-type:image/jpeg&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;./face.jpg&#x27;</span>);</span><br></pre></td></tr></table></figure><p>小结：</p><p>1、文本流有明确的结束符，二进制流没有明确的结束符，通过文件大小判断文件是否读取完毕</p><p>2、file_get_contents()既可以进行字符流读取，也可以进行二进制读取。</p><h1 id="2-表单提交数据的两种方式"><a href="#2-表单提交数据的两种方式" class="headerlink" title="2 表单提交数据的两种方式"></a>2 <strong>表单提交数据的两种方式</strong></h1><h2 id="2-1-两种方式"><a href="#2-1-两种方式" class="headerlink" title="2.1 两种方式"></a>2.<strong>1 两种方式</strong></h2><p>1、get</p><p>2、post</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-区别"><a href="#2-2-区别" class="headerlink" title="2.2 区别"></a>2.2 <strong>区别</strong></h2><p>1、外观上看</p><p>get提交在地址上可以看到参数</p><p>post提交在地址栏上看不到参数</p><p>2、安全性</p><p>get不安全</p><p>post安全</p><p>3、提交原理</p><p>get提交是参数一个一个的提交</p><p>post提交是所有参数作为一个整体一起提交</p><p>4、提交数据大小</p><p>get提交一般不超过255个字节</p><p>post提交的大小取决于服务器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在php.ini中，可以配置post提交的大小</span></span><br><span class="line">post_max_size = <span class="number">8</span>M</span><br></pre></td></tr></table></figure><p>5、灵活性</p><p>get很灵活，只要有页面的跳转就可以传递参数</p><p>post不灵活，post提交需要有表单的参与</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、 html跳转</span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index.php?name=tom&amp;age=20&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2、JS跳转</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    location.<span class="property">href</span>=<span class="string">&#x27;index.php?name=tom&amp;age=20&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    location.<span class="title function_">assign</span>(<span class="string">&#x27;index.php?name=tom&amp;age=20&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    location.<span class="title function_">replace</span>(<span class="string">&#x27;index.php?name=tom&amp;age=20&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">3、PHP跳转</span><br><span class="line">header(&#x27;location:index.php?name=tom&amp;age=22&#x27;)</span><br></pre></td></tr></table></figure><p>小结：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=&quot;post&quot; action=&quot;&quot;&gt;&lt;/form&gt;</span><br><span class="line">&lt;form method=&quot;get&quot; action=&quot;&quot;&gt;&lt;/form&gt;</span><br></pre></td></tr></table></figure><h1 id="3-服务器接受数据的三种方式"><a href="#3-服务器接受数据的三种方式" class="headerlink" title="3 服务器接受数据的三种方式"></a>3 <strong>服务器接受数据的三种方式</strong></h1><p>通过名字获取名字对应的值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_POST</span>：数组类型，保存的POST提交的值</span><br><span class="line"><span class="variable">$_GET</span>：数组类型，保存的GET提交的值</span><br><span class="line"><span class="variable">$_REQUEST</span>：数组类型，保存的GET和POST提交的值</span><br></pre></td></tr></table></figure><p>在一个请求中，既有get又有post，get和post传递的名字是一样的，这时候通过$_REQUET获取的数据是什么?</p><p>答：结果取决于配置文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request_order = <span class="string">&quot;GP&quot;</span>  <span class="comment"># 先获取GET，在获取POST值</span></span><br></pre></td></tr></table></figure><p>小结：</p><p>1、在开发的时候，如果明确是post提交就使用<code>$_POST</code>获取，如果明确get提交就用<code>$_GET</code>获取</p><p>2、request获取效率低，尽可能不要使用，除非提交的类型不确定的情况下才使用。</p><h1 id="4-参数传递"><a href="#4-参数传递" class="headerlink" title="4 参数传递"></a>4 <strong>参数传递</strong></h1><h2 id="4-1-复选框值的传递"><a href="#4-1-复选框值的传递" class="headerlink" title="4.1  复选框值的传递"></a>4.1  <strong>复选框值的传递</strong></h2><p>复选框的命名要注意带’[]’。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;button&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;hobby&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;form method=<span class="string">&quot;post&quot;</span> action=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">    爱好：</span><br><span class="line">    &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobby[]&quot;</span> value=<span class="string">&#x27;爬山&#x27;</span>&gt;爬山</span><br><span class="line">    &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobby[]&quot;</span> value=<span class="string">&#x27;抽烟&#x27;</span>&gt;抽烟</span><br><span class="line">    &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobby[]&quot;</span> value=<span class="string">&#x27;喝酒&#x27;</span>&gt;喝酒</span><br><span class="line">    &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobby[]&quot;</span> value=<span class="string">&#x27;烫头&#x27;</span>&gt;烫头</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>小结：</p><p>1、表单提交到本页面需要判断一下是否有post提交</p><p>2、数组的提交表单元素的名字必须带有[]</p><h1 id="5-文件上传"><a href="#5-文件上传" class="headerlink" title="5 文件上传"></a>5 <strong>文件上传</strong></h1><p>开发中需要上传图片、音乐、视频等等，这种上传传递是二进制数据。</p><h2 id="5-1-客户端上传文件"><a href="#5-1-客户端上传文件" class="headerlink" title="5.1 客户端上传文件"></a>5.1 <strong>客户端上传文件</strong></h2><p>文件域</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;image&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表单的enctype属性</p><p>默认情况下，表单传递是字符流，不能传递二进制流，通过设置表单的enctype属性传递复合数据。</p><p>enctype属性的值有：</p><ol><li>application&#x2F;x-www-form-urlencoded：【默认】，表示传递的是带格式的文本数据。</li><li>multipart&#x2F;form-data：复合的表单数据（字符串，文件），文件上传必须设置此值</li><li>text&#x2F;plain：用于向服务器传递无格式的文本数据，主要用户电子邮件</li></ol><p>单词</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">multipart：复合</span><br><span class="line">form-data：表单数组</span><br></pre></td></tr></table></figure><h2 id="5-2-服务器接受文件"><a href="#5-2-服务器接受文件" class="headerlink" title="5.2 服务器接受文件"></a>5.2 服务器接受文件</h2><p>超全局变量<code>$_FILES</code>是一个二维数组，用来保存客户端上传到服务器的文件信息。二维数组的行是文件域的名称，列有5个。<br>1、<code>$_FILES[][‘name’]</code>：上传的文件名<br>2、<code>$_FILES[][‘type]</code>：上传的类型，这个类型是MIME类型（image&#x2F;jpeg、image&#x2F;gif、image&#x2F;png）<br>3、<code>$_FILES[][‘size’]</code>：文件的大小，以字节为单位<br>4、<code>$_FILES[][‘tmp_name’]</code>：文件上传时的临时文件<br>5、<code>$_FILES[][‘error’]</code>：错误编码(值有0、1、2、3、4、6、7)0表示正确</p><p><code>$_FILES[][‘error’]</code>详解</p><table><thead><tr><th><strong>值</strong></th><th><strong>错误描述</strong></th></tr></thead><tbody><tr><td>0</td><td>正确</td></tr><tr><td>1</td><td>文件大小超过了php.ini中允许的最大值    upload_max_filesize &#x3D; 2M</td></tr><tr><td>2</td><td>文件大小超过了表单允许的最大值</td></tr><tr><td>3</td><td>只有部分文件上传</td></tr><tr><td>4</td><td>没有文件上传</td></tr><tr><td>6</td><td>找不到临时文件</td></tr><tr><td>7</td><td>文件写入失败</td></tr></tbody></table><p>注意：MAX_FILE_SIZE必须在文件域的上面。</p><p>只要掌握的错误号：0和4</p><h2 id="5-3-将上传文件移动到指定位置"><a href="#5-3-将上传文件移动到指定位置" class="headerlink" title="5.3 将上传文件移动到指定位置"></a>5.3 <strong>将上传文件移动到指定位置</strong></h2><p>函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">move_uploaded_file</span>(临时地址,目标地址)</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;face&#x27;</span>][<span class="string">&#x27;error&#x27;</span>]==<span class="number">0</span>)&#123;  <span class="comment">//上传正确</span></span><br><span class="line">        <span class="comment">//文件上传</span></span><br><span class="line">        <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;face&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>],<span class="string">&#x27;./&#x27;</span>.<span class="variable">$_FILES</span>[<span class="string">&#x27;face&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;上传有误&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;错误码:&#x27;</span>.<span class="variable">$_FILES</span>[<span class="string">&#x27;face&#x27;</span>][<span class="string">&#x27;error&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;form method=<span class="string">&quot;post&quot;</span> action=<span class="string">&quot;&quot;</span> enctype=<span class="string">&#x27;multipart/form-data&#x27;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;face&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;上传&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>小结：上传的同名的文件要给覆盖</p><h3 id="5-4-与文件上传有关的配置"><a href="#5-4-与文件上传有关的配置" class="headerlink" title="5.4 与文件上传有关的配置"></a>5.4 <strong>与文件上传有关的配置</strong></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">post_max_size = <span class="number">8</span>M：表单允许的最大值</span><br><span class="line"></span><br><span class="line">upload_max_filesize = <span class="number">2</span>M：允许上传的文件大小</span><br><span class="line"></span><br><span class="line">upload_tmp_dir =F:\wamp\tmp：指定临时文件地址，如果不知道操作系统指定</span><br><span class="line"></span><br><span class="line">file_uploads = On：是否允许文件上传</span><br><span class="line"></span><br><span class="line">max_file_uploads = <span class="number">20</span>：允许同时上传<span class="number">20</span>个文件</span><br></pre></td></tr></table></figure><h1 id="6-优化文件上传"><a href="#6-优化文件上传" class="headerlink" title="6 优化文件上传"></a>6 <strong>优化文件上传</strong></h1><h2 id="6-1-更改文件名"><a href="#6-1-更改文件名" class="headerlink" title="6.1 更改文件名"></a>6.1 <strong>更改文件名</strong></h2><p>方法一：通过时间戳做文件名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$path</span>=<span class="string">&#x27;face.stu.jpg&#x27;</span>;</span><br><span class="line"><span class="comment">//echo strrchr($path,&#x27;.&#x27;);  //从最后一个点开始截取，一直截取到最后</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">time</span>().<span class="title function_ invoke__">rand</span>(<span class="number">100</span>,<span class="number">999</span>).<span class="title function_ invoke__">strrchr</span>(<span class="variable">$path</span>,<span class="string">&#x27;.&#x27;</span>);</span><br></pre></td></tr></table></figure><p>方法二：通过uniqid()实现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$path</span>=<span class="string">&#x27;face.stu.jpg&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">uniqid</span>().<span class="title function_ invoke__">strrchr</span>(<span class="variable">$path</span>,<span class="string">&#x27;.&#x27;</span>),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;   <span class="comment">//生成唯一的ID</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">uniqid</span>(<span class="string">&#x27;goods_&#x27;</span>).<span class="title function_ invoke__">strrchr</span>(<span class="variable">$path</span>,<span class="string">&#x27;.&#x27;</span>),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;   <span class="comment">//带有前缀</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">uniqid</span>(<span class="string">&#x27;goods_&#x27;</span>,<span class="literal">true</span>).<span class="title function_ invoke__">strrchr</span>(<span class="variable">$path</span>,<span class="string">&#x27;.&#x27;</span>),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;  <span class="comment">//唯一ID+随机数</span></span><br></pre></td></tr></table></figure><h2 id="6-2-验证文件格式"><a href="#6-2-验证文件格式" class="headerlink" title="6.2 验证文件格式"></a>6.2 <strong>验证文件格式</strong></h2><p>方法一：判断文件的扩展名（不能识别文件伪装）</p><p>操作思路：将文件的后缀和允许的后缀对比</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>)) &#123;</span><br><span class="line">    <span class="variable">$allow</span>=<span class="keyword">array</span>(<span class="string">&#x27;.jpg&#x27;</span>,<span class="string">&#x27;.png&#x27;</span>,<span class="string">&#x27;.gif&#x27;</span>); <span class="comment">//允许的扩展名</span></span><br><span class="line">    <span class="variable">$ext</span>=<span class="title function_ invoke__">strrchr</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;face&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&#x27;.&#x27;</span>);  <span class="comment">//上传文件扩展名</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>,<span class="variable">$allow</span>))</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;允许上传&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;文件不合法&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;form method=<span class="string">&quot;post&quot;</span> action=<span class="string">&quot;&quot;</span> enctype=<span class="string">&#x27;multipart/form-data&#x27;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;face&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;上传&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>注意：比较扩展名不能防止文件伪装。</p><p>方法二：通过<code>$_FIELS[][&#39;type&#39;]</code>类型（不能识别文件伪装）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>)) &#123;</span><br><span class="line">    <span class="variable">$allow</span>=<span class="keyword">array</span>(<span class="string">&#x27;image/jpeg&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>,<span class="string">&#x27;image/gif&#x27;</span>); <span class="comment">//允许的类别</span></span><br><span class="line">    <span class="variable">$mime</span>=<span class="variable">$_FILES</span>[<span class="string">&#x27;face&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];  <span class="comment">//上传文件类型</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$mime</span>,<span class="variable">$allow</span>))</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;允许上传&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;文件不合法&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;form method=<span class="string">&quot;post&quot;</span> action=<span class="string">&quot;&quot;</span> enctype=<span class="string">&#x27;multipart/form-data&#x27;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;face&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;上传&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>注意：比较<code>$_FIELS[][&#39;type&#39;]</code>不能防止文件伪装。</p><p>方法三：php_fileinfo扩展（可以防止文件伪装）</p><p>在php.ini中开启fileinfo扩展</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extension=php_fileinfo.dll</span><br></pre></td></tr></table></figure><p>注意：开启fileinfo扩展以后，就可以使用finfo_*的函数了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>)) &#123;</span><br><span class="line">    <span class="comment">//第一步：创建finfo资源</span></span><br><span class="line">    <span class="variable">$info</span>=<span class="title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE);</span><br><span class="line">    <span class="comment">//var_dump($info);      //resource(2) of type (file_info)</span></span><br><span class="line">    <span class="comment">//第二步：将finfo资源和文件做比较</span></span><br><span class="line">    <span class="variable">$mime</span>=<span class="title function_ invoke__">finfo_file</span>(<span class="variable">$info</span>,<span class="variable">$_FILES</span>[<span class="string">&#x27;face&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]);</span><br><span class="line">    <span class="comment">//第三步，比较是否合法</span></span><br><span class="line">    <span class="variable">$allow</span>=<span class="keyword">array</span>(<span class="string">&#x27;image/jpeg&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>,<span class="string">&#x27;image/gif&#x27;</span>); <span class="comment">//允许的类别</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">in_array</span>(<span class="variable">$mime</span>,<span class="variable">$allow</span>)?<span class="string">&#x27;合法&#x27;</span>:<span class="string">&#x27;不合法&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;form method=<span class="string">&quot;post&quot;</span> action=<span class="string">&quot;&quot;</span> enctype=<span class="string">&#x27;multipart/form-data&#x27;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;face&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;上传&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>小结：验证文件格式有三种方法</p><p>1、可以验证扩展名（不可以防止文件伪装）</p><p>2、通过<code>$_FILES[][&#39;type&#39;]</code>验证（不可以防止文件伪装）</p><p>3、通过file_info扩展（可以防止文件伪装）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-文件操作&quot;&gt;&lt;a href=&quot;#1-文件操作&quot; class=&quot;headerlink&quot; title=&quot;1 文件操作&quot;&gt;&lt;/a&gt;1 &lt;strong&gt;文件操作&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;1-1-将字符串写入文件&quot;&gt;&lt;a href=&quot;#1-1-将字符串</summary>
      
    
    
    
    <category term="Language" scheme="https://gbk.cx/categories/Language/"/>
    
    
    <category term="PHP" scheme="https://gbk.cx/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP基础-2-作用域&amp;递归&amp;文件夹操作</title>
    <link href="https://gbk.cx/p/f60eefa5/"/>
    <id>https://gbk.cx/p/f60eefa5/</id>
    <published>2024-10-19T13:47:09.000Z</published>
    <updated>2024-10-19T14:11:57.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-作用域"><a href="#1-作用域" class="headerlink" title="1 作用域"></a>1 作用域</h1><h2 id="1-1-变量作用域"><a href="#1-1-变量作用域" class="headerlink" title="1.1 变量作用域"></a>1.1 <strong>变量作用域</strong></h2><p>1、全局变量：在函数外面</p><p>2、局部变量：在函数里面，默认情况下，函数内部是不会去访问函数外部的变量</p><p>3、超全局变量：可以在函数内部和函数外部访问</p><p>| $GLOBALS<br> |<br>| — |<br>| $_SERVER |<br>| $_GET |<br>| $_POST |<br>| $_FILES |<br>| $_COOKIE |<br>| $_SESSION |<br>| $_REQUEST |<br>| $_ENV |</p><p>global关键字</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$num</span>=<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">global</span> <span class="variable">$num</span>;   <span class="comment">//将全局变量的$num的地址引入到函数内部  相当于$num=&amp;GLOBALS[&#x27;num&#x27;]</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num</span>;<span class="comment">//10</span></span><br><span class="line"><span class="variable">$num</span>=<span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num</span>;    <span class="comment">//100</span></span><br><span class="line">-----------------------------------</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$num</span>=<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">global</span> <span class="variable">$num</span>;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$num</span>);  <span class="comment">//销毁的是引用，不是具体的值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num</span>;    <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>小结：</p><p>1、$GLOBALS保存的是全局变量的所有的值</p><p>2、global用于创建一个全局变量的引用</p><p>💡 注意：常量没有作用域的概念</p><h2 id="1-2-静态变量（static）"><a href="#1-2-静态变量（static）" class="headerlink" title="1.2 静态变量（static）"></a>1.2 <strong>静态变量（static）</strong></h2><p>静态变量一般指的是静态局部变量。</p><p>静态变量只初始化一次</p><h3 id="1-2-1-常量和静态变量的区别"><a href="#1-2-1-常量和静态变量的区别" class="headerlink" title="1.2.1 常量和静态变量的区别"></a>1.2.1 常量和静态变量的区别</h3><p>1、常量和静态变量都是初始化一次</p><p>2、常量不能改变值，静态变量可以改变值</p><p>3、常量没有作用域，静态变量有作用域</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;num&#x27;</span>,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> num;   <span class="comment">//10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun1</span>();</span><br><span class="line"><span class="title function_ invoke__">fun2</span>();</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">static</span> <span class="variable">$num</span>=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num</span>;  <span class="comment">//Notice: Undefined variable: num 因为静态变量是有作用域的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fun1</span>();</span><br><span class="line"><span class="title function_ invoke__">fun2</span>();</span><br></pre></td></tr></table></figure><h2 id="1-3-匿名函数use"><a href="#1-3-匿名函数use" class="headerlink" title="1.3 匿名函数use()"></a>1.3 <strong>匿名函数use()</strong></h2><p>默认情况下，函数内部不能访问函数外部的变量，但在匿名函数中，可以通过use将外部变量引入匿名函数中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$num</span>=<span class="number">10</span>;</span><br><span class="line"><span class="variable">$fun</span>=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="keyword">use</span>(<span class="params"><span class="variable">$num</span></span>) </span>&#123;  <span class="comment">//将$num引入到匿名函数中</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$fun</span>();   <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>思考：如何在函数内部访问函数外部变量</p><p>1、使用超全局变量</p><p>2、$GLOBALS</p><p>3、global</p><p>4、use将函数外部变量引入到匿名函数内部</p><h1 id="2-递归"><a href="#2-递归" class="headerlink" title="2 递归"></a>2 递归</h1><p>函数内部自己调用自己</p><p>递归有两个元素，一个是递归点（从什么地方递归），第二递归出口</p><h1 id="3-包含文件"><a href="#3-包含文件" class="headerlink" title="3 包含文件"></a>3 包含文件</h1><h2 id="3-1-包含文件的方式"><a href="#3-1-包含文件的方式" class="headerlink" title="3.1 包含文件的方式"></a>3.1 <strong>包含文件的方式</strong></h2><p>1、require：包含多次</p><p>2、include：包含多次</p><p>3、require_once： 包含一次</p><p>4、include_once： 包含一次</p><p>💡 小结：</p><p>1、require遇到错误抛出error类别的错误，停止执行</p><p>2、include遇到错误抛出warning类型的错误，继续执行</p><p>3、require_once、include_once只能包含一次</p><p>4、HTML类型的包含页面中存在PHP代码，如果包含到PHP中是可以被执行的</p><p>5、包含文件相当于把包含文件中的代码拷贝到主文件中执行，魔术常量除外，魔术常量获取的是所在文件的信息。</p><p>6、包含在编译时不执行、运行时加载到内存、独立编译包含文件</p><h2 id="3-2-包含文件的路径"><a href="#3-2-包含文件的路径" class="headerlink" title="3.2 包含文件的路径"></a>3.2 <strong>包含文件的路径</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./当前目录</span><br><span class="line">../上一级目录</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;./head.html&#x27;</span>;   <span class="comment">//在当前目录下查找</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;head.html&#x27;</span>;  <span class="comment">//受include_path配置影响</span></span><br></pre></td></tr></table></figure><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/19/nImlTZP7gI9wY04BSmjJ1729345712719.png" alt="1559631648089.png"></p><p>include_path的使用场景：</p><p>如果包含文件的目录结构比较复杂，比如：在c:\aa\bb\cc\dd中有多个文件需要包含，可以将包含的路径设置成include_path，这样包含就只要写文件名就可以了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">set_include_path</span>(<span class="string">&#x27;c:\aa\bb\cc\dd&#x27;</span>);  <span class="comment">//设置include_path</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;head1.html&#x27;</span>;     <span class="comment">//受include_path配置影响</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;head2.html&#x27;</span>;</span><br></pre></td></tr></table></figure><p>include_path可以设置多个，路径之间用分号隔开</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">set_include_path</span>(<span class="string">&#x27;c:\aa\bb\cc\dd;d:\\&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="4-错误处理"><a href="#4-错误处理" class="headerlink" title="4 错误处理"></a>4 错误处理</h1><h2 id="4-1-错误的级别"><a href="#4-1-错误的级别" class="headerlink" title="4.1 错误的级别"></a>4.1 <strong>错误的级别</strong></h2><ol><li>notice：提示</li><li>warning：警告</li><li>error：致命错误</li></ol><p>notice和warning报错后继续执行，error报错后停止执行</p><h2 id="4-2-错误的提示方法"><a href="#4-2-错误的提示方法" class="headerlink" title="4.2 错误的提示方法"></a>4.2 <strong>错误的提示方法</strong></h2><p>方法一：显示在浏览器上</p><p>方法二：记录在日志中</p><h2 id="4-3-与错误处理有关的配置"><a href="#4-3-与错误处理有关的配置" class="headerlink" title="4.3 与错误处理有关的配置"></a>4.3 <strong>与错误处理有关的配置</strong></h2><p>在php.ini中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. error_reporting = E_ALL：报告所有的错误</span><br><span class="line">2. display_errors = On：将错误显示在浏览器上</span><br><span class="line">3. log_errors = On：将错误记录在日志中</span><br><span class="line">4. error_log=’地址’：错误日志保存的地址</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在项目开发过程中有两个模式，开发模式，运行模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开发模式：错误显示在浏览器上，不要记录在日志中</span><br><span class="line">运行模式：错误不显示在浏览器上，记录是日志中</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-文件编程"><a href="#5-文件编程" class="headerlink" title="5 文件编程"></a>5 文件编程</h1><h2 id="5-1-文件夹操作"><a href="#5-1-文件夹操作" class="headerlink" title="5.1 文件夹操作"></a>5.1 <strong>文件夹操作</strong></h2><p><strong>1 、</strong>创建文件夹【<code>mkdir(路径，权限，是否递归创建)</code>】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make:创建</span><br><span class="line">directory：目录，文件夹</span><br></pre></td></tr></table></figure><p>例题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//1、创建目录</span></span><br><span class="line"><span class="comment">//mkdir(&#x27;./aa&#x27;);    //创建aa文件夹</span></span><br><span class="line"><span class="comment">//mkdir(&#x27;./aa/bb&#x27;); //在aa目录下创建bb(aa目录必须存在)</span></span><br><span class="line"><span class="title function_ invoke__">mkdir</span>(<span class="string">&#x27;./aa/bb/cc/dd&#x27;</span>,<span class="number">0777</span>,<span class="literal">true</span>);   <span class="comment">//递归创建</span></span><br></pre></td></tr></table></figure><p>小结：</p><p>1、0777表示是文件夹的权限，在Linux中会详细讲解</p><p>2、true表示递归创建，默认是false</p><p><strong>2、</strong>删除文件夹【rmdir()】</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//remove:移除</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">rmdir</span>(<span class="string">&#x27;./aa/bb/cc/dd&#x27;</span>); <span class="comment">//删除dd文件夹</span></span><br></pre></td></tr></table></figure><p>提醒：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、删除的文件夹必须是空的</span><br><span class="line">2、PHP基于安全考虑，没有提供递归删除。</span><br></pre></td></tr></table></figure><p><strong>3、</strong>重命名文件夹【rename(旧名字，新名字)】</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">rename</span>(<span class="string">&#x27;./aa&#x27;</span>,<span class="string">&#x27;./aaa&#x27;</span>); <span class="comment">//将aa改为aaa</span></span><br></pre></td></tr></table></figure><p><strong>4、</strong>是否是文件夹【is_dir()】</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">is_dir</span>(<span class="string">&#x27;./aaa&#x27;</span>)?<span class="string">&#x27;是文件夹&#x27;</span>:<span class="string">&#x27;不是文件夹&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>5、</strong>打开文件夹、读取文件夹、关闭文件夹</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$folder</span>=<span class="title function_ invoke__">opendir</span>(<span class="string">&#x27;./&#x27;</span>);  <span class="comment">//打开目录</span></span><br><span class="line"><span class="comment">//var_dump($folder);        //resource(3) of type (stream)</span></span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$f</span>=<span class="title function_ invoke__">readdir</span>(<span class="variable">$folder</span>))&#123; <span class="comment">//读取文件夹</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$f</span>==<span class="string">&#x27;.&#x27;</span> || <span class="variable">$f</span>==<span class="string">&#x27;..&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">iconv</span>(<span class="string">&#x27;gbk&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,<span class="variable">$f</span>),<span class="string">&#x27;&lt;br&gt;&#x27;</span>;  <span class="comment">//将gbk转成utf-8</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">closedir</span>(<span class="variable">$folder</span>);      <span class="comment">//关闭文件夹</span></span><br></pre></td></tr></table></figure><p>小结：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、<span class="title function_ invoke__">opendir</span>()返回资源类型</span><br><span class="line"><span class="number">2</span>、每个文件夹中都有.和..</span><br><span class="line"><span class="number">3</span>、<span class="title function_ invoke__">iconv</span>()用来做字符编码转换</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-作用域&quot;&gt;&lt;a href=&quot;#1-作用域&quot; class=&quot;headerlink&quot; title=&quot;1 作用域&quot;&gt;&lt;/a&gt;1 作用域&lt;/h1&gt;&lt;h2 id=&quot;1-1-变量作用域&quot;&gt;&lt;a href=&quot;#1-1-变量作用域&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="Language" scheme="https://gbk.cx/categories/Language/"/>
    
    
    <category term="PHP" scheme="https://gbk.cx/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP基础-1-变量-常量-运算符-数据类型-判断-循环</title>
    <link href="https://gbk.cx/p/5b8fbc6e/"/>
    <id>https://gbk.cx/p/5b8fbc6e/</id>
    <published>2024-10-19T13:44:24.000Z</published>
    <updated>2024-10-19T14:09:40.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-输出语句"><a href="#0-输出语句" class="headerlink" title="0 输出语句"></a>0 输出语句</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span>:输出</span><br><span class="line"><span class="keyword">print</span>:输出，输出成功返回<span class="number">1</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>()：输出数组</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>():输出数据的详细信息，带有数据类型和数据长度</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&#x27;abc&#x27;</span>);<span class="comment">//string(3) &quot;abc&quot; </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="1-变量"><a href="#1-变量" class="headerlink" title="1 变量"></a>1 变量</h1><h2 id="1-1-变量的命名规则"><a href="#1-1-变量的命名规则" class="headerlink" title="1.1 变量的命名规则"></a>1.1 <strong>变量的命名规则</strong></h2><ol><li>变量必须以$开头，$符不是变量的一部分，仅表示后面的标识符是变量名。</li><li>除了$以外，以字母、下划线开头，后面跟着数字、字母、下划线</li><li>变量名区分大小写，$aa和$Aa是两个空间</li></ol><h2 id="1-2-可变变量"><a href="#1-2-可变变量" class="headerlink" title="1.2 可变变量"></a>1.2 <strong>可变变量</strong></h2><p>变量名可以变，将变量名存储在另外一个变量中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="number">10</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$$b</span>;<span class="comment">//10</span></span><br></pre></td></tr></table></figure><h2 id="1-3-变量传递"><a href="#1-3-变量传递" class="headerlink" title="1.3 变量传递"></a>1.3 <strong>变量传递</strong></h2><p>变量的传递有值传递和地址传递（引用传递）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="variable">$num1</span>=<span class="number">10</span>;<span class="comment">//将10付给$num1</span></span><br><span class="line"><span class="variable">$num2</span>=<span class="variable">$num1</span>;<span class="comment">//将$num1的值付给$num2</span></span><br><span class="line"><span class="variable">$num2</span>=<span class="number">20</span>;<span class="comment">//更改$num2</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num1</span>;<span class="comment">//10</span></span><br></pre></td></tr></table></figure><h2 id="1-4-销毁变量"><a href="#1-4-销毁变量" class="headerlink" title="1.4 销毁变量"></a>1.4 <strong>销毁变量</strong></h2><p>用unset()来销毁变量，销毁的是变量名，变量值由PHP垃圾回收机制销毁</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$num1</span>=<span class="number">10</span>;</span><br><span class="line"><span class="variable">$num2</span>=&amp;<span class="variable">$num1</span>;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$num1</span>);<span class="comment">//销毁的是变量名</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num2</span>;<span class="comment">//10</span></span><br></pre></td></tr></table></figure><h1 id="2-常量"><a href="#2-常量" class="headerlink" title="2 常量"></a>2 常量</h1><h2 id="2-1-定义常量"><a href="#2-1-定义常量" class="headerlink" title="2.1 定义常量"></a>2.1 <strong>定义常量</strong></h2><p>1、用define()函数定义常量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">define</span>(常量名，值，[是否区别大小写])  <span class="literal">true</span>表示不区分大小写，默认是<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>2、还可以使用const关键字定义常量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">NAME</span>=<span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> NAME;<span class="comment">//tom</span></span><br></pre></td></tr></table></figure><p>定义常量有两种方式，define()和const</p><p>常量在整个运行过程中值保持不变，常量不能重新定义</p><p>使用constant获取特殊字符做的常量名的值</p><p>defined()用来判断常量是否被定义</p><h2 id="2-2-预定义常量"><a href="#2-2-预定义常量" class="headerlink" title="2.2 预定义常量"></a>2.2 <strong>预定义常量</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> PHP_VERSION,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;<span class="comment">//PHP版本号</span></span><br><span class="line"><span class="keyword">echo</span> PHP_OS,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;<span class="comment">//PHP操作系统</span></span><br><span class="line"><span class="keyword">echo</span> PHP_INT_MAX,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;<span class="comment">//PHP中整型的最大值</span></span><br></pre></td></tr></table></figure><h2 id="2-3-魔术常量"><a href="#2-3-魔术常量" class="headerlink" title="2.3 魔术常量"></a>2.3 魔术常量</h2><p>魔术常量它们的值随着它们在代码中的位置改变而改变</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="keyword">__LINE__</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;<span class="comment">//获取当前行号</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">__FILE__</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;<span class="comment">//文件的完整路径和文件名</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">__DIR__</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;<span class="comment">//文件所在的目录</span></span><br></pre></td></tr></table></figure><h1 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3 数据类型"></a>3 数据类型</h1><h2 id="3-1-基本类型（标量类型）"><a href="#3-1-基本类型（标量类型）" class="headerlink" title="3.1 基本类型（标量类型）"></a>3.1 <strong>基本类型（标量类型）</strong></h2><h3 id="3-1-1-整型"><a href="#3-1-1-整型" class="headerlink" title="3.1.1 整型"></a>3.1.1 整型</h3><p>存整数，PHP_INT_MAX获取整形最大值</p><table><thead><tr><th><strong>机制</strong></th><th><strong>缩写</strong></th><th><strong>单词</strong></th></tr></thead><tbody><tr><td>十进制</td><td>dec</td><td>decimalist</td></tr><tr><td>二进制</td><td>bin</td><td>binary</td></tr><tr><td>八进制</td><td>oct</td><td>octonary</td></tr><tr><td>十六进制</td><td>hex</td><td>hexdecimalist</td></tr></tbody></table><h3 id="3-1-2-浮点型"><a href="#3-1-2-浮点型" class="headerlink" title="3.1.2 浮点型"></a>3.1.2 浮点型</h3><p>浮点数在内存中保存的是近似值</p><p>浮点数不能参与比较</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">0.9</span>==(<span class="number">1</span>-<span class="number">0.1</span>));<span class="comment">//bool(true) </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">0.1</span>==(<span class="number">1</span>-<span class="number">0.9</span>));<span class="comment">//bool(false)</span></span><br></pre></td></tr></table></figure><p>如果浮点数要比较，必须确定比较的位数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">0.9</span>==(<span class="number">1</span>-<span class="number">0.1</span>));<span class="comment">//bool(true) </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">0.1</span>==(<span class="number">1</span>-<span class="number">0.9</span>));<span class="comment">//bool(false) </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">bccomp</span>(<span class="number">0.1</span>,<span class="number">1</span>-<span class="number">0.9</span>,<span class="number">5</span>));<span class="comment">//比较小数点后面5位   int(0)   0表示相等</span></span><br></pre></td></tr></table></figure><p>💡 提醒：如果一个整数超出了整形的范围，会自动的转成浮点型</p><h3 id="3-1-3-布尔型"><a href="#3-1-3-布尔型" class="headerlink" title="3.1.3 布尔型"></a>3.1.3 布尔型</h3><p>不能使用echo 和print输出布尔型，要使用var_dump()输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span>=<span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;我的名字叫$name&#x27;</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;<span class="comment">//我的名字叫$name</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;我的名字叫<span class="subst">$name</span>&quot;</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;<span class="comment">//我的名字叫tom</span></span><br></pre></td></tr></table></figure><h3 id="3-1-4-字符串型"><a href="#3-1-4-字符串型" class="headerlink" title="3.1.4 字符串型"></a>3.1.4 字符串型</h3><p>在PHP中单引号字符串和双引号字符串是有区别的</p><p>单引号字符串是真正的字符串</p><p>双引号字符串要解析字符串中的变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span>=<span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;我的名字叫$name&#x27;</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;<span class="comment">//我的名字叫$name</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;我的名字叫<span class="subst">$name</span>&quot;</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;<span class="comment">//我的名字叫tom</span></span><br></pre></td></tr></table></figure><h2 id="3-2-复合类型"><a href="#3-2-复合类型" class="headerlink" title="3.2 复合类型"></a>3.2 <strong>复合类型</strong></h2><h3 id="3-2-1-数组"><a href="#3-2-1-数组" class="headerlink" title="3.2.1 数组"></a>3.2.1 <strong>数组</strong></h3><p>在PHP中数组有两种形式，索引数组和关联数组</p><p>索引数组：用整数做下标，默认从0开始，后面依次加一</p><p>关联数组：用字符串做下标，通过&#x3D;&gt;符号将下标和值关联起来</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//1、索引数组的声明</span></span><br><span class="line"><span class="variable">$stu</span>=<span class="keyword">array</span>(<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;berry&#x27;</span>,<span class="string">&#x27;ketty&#x27;</span>);   <span class="comment">//索引数组</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$stu</span>);<span class="comment">//输出数组  Array ( [0] =&gt; tom [1] =&gt; berry [2] =&gt; ketty ) </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$stu</span>[<span class="number">0</span>],<span class="string">&#x27;&lt;br&gt;&#x27;</span>;<span class="comment">//tom</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$stu</span>[<span class="number">1</span>],<span class="string">&#x27;&lt;br&gt;&#x27;</span>;<span class="comment">//berry</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$stu</span>[<span class="number">2</span>],<span class="string">&#x27;&lt;hr&gt;&#x27;</span>;<span class="comment">//ketty</span></span><br><span class="line">------------------------------------------</span><br><span class="line"><span class="comment">//2、关联数组</span></span><br><span class="line"><span class="variable">$emp</span>=<span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;李白&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>=&gt;<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;age&#x27;</span>=&gt;<span class="number">22</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$emp</span>);<span class="comment">//Array ( [name] =&gt; 李白 [sex] =&gt; 男 [age] =&gt; 22 ) </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$emp</span>[<span class="string">&#x27;name&#x27;</span>],<span class="string">&#x27;&lt;br&gt;&#x27;</span>;<span class="comment">//李白</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$emp</span>[<span class="string">&#x27;sex&#x27;</span>],<span class="string">&#x27;&lt;br&gt;&#x27;</span>;<span class="comment">//男</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$emp</span>[<span class="string">&#x27;age&#x27;</span>];<span class="comment">//22</span></span><br></pre></td></tr></table></figure><p>二维数组的声明</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$stu</span>=[</span><br><span class="line">[<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>=&gt;<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;age&#x27;</span>=&gt;<span class="number">22</span>],</span><br><span class="line">[<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;berry&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>=&gt;<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;age&#x27;</span>=&gt;<span class="number">23</span>]</span><br><span class="line">];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>短数组语法，可以直接通过中括号声明数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$stu</span>=[<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;berry&#x27;</span>,<span class="string">&#x27;ketty&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$stu</span>);  <span class="comment">//Array ( [0] =&gt; tom [1] =&gt; berry [2] =&gt; ketty )</span></span><br></pre></td></tr></table></figure><h3 id="3-2-2-对象"><a href="#3-2-2-对象" class="headerlink" title="3.2.2 对象"></a>3.2.2 <strong>对象</strong></h3><h2 id="3-3-特殊类型"><a href="#3-3-特殊类型" class="headerlink" title="3.3 特殊类型"></a>3.3 <strong>特殊类型</strong></h2><p>1、资源</p><p>2、null</p><h2 id="3-4-类型转换"><a href="#3-4-类型转换" class="headerlink" title="3.4 类型转换"></a>3.4 <strong>类型转换</strong></h2><p>1、自动类型转换：当提供的类型和需要的类型不一致的时候会自动进行类型转换</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$num</span>=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$num</span>)&#123;   <span class="comment">//自动将数字转成布尔型</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;aa&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;bb&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;20&#x27;</span>-<span class="number">10</span>;<span class="comment">//自动的将字符串转成数字</span></span><br></pre></td></tr></table></figure><p>2、强制类型转换</p><p>语法：（数据类型）数据</p><p>其他类型和布尔之间的转换</p><p>规则：0、空为假，非0非空为真</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="keyword">bool</span>)<span class="string">&#x27;abc&#x27;</span>);<span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;<span class="comment">//bool(true)  </span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="keyword">bool</span>)<span class="string">&#x27;&#x27;</span>);<span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;<span class="comment">//bool(false) </span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="keyword">bool</span>)<span class="string">&#x27;0&#x27;</span>);<span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;<span class="comment">//bool(false)</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4 运算符"></a>4 运算符</h1><h2 id="4-1-算术运算符"><a href="#4-1-算术运算符" class="headerlink" title="4.1 算术运算符"></a>4.1 <strong>算术运算符</strong></h2><table><thead><tr><th><strong>一元运算符</strong></th><th><strong>二元运算符</strong></th></tr></thead><tbody><tr><td>++</td><td>+</td></tr><tr><td>–</td><td>-</td></tr><tr><td></td><td>*</td></tr><tr><td></td><td>&#x2F;</td></tr><tr><td></td><td>%   (取模)</td></tr></tbody></table><h2 id="4-2-关系运算符（比较运算符）"><a href="#4-2-关系运算符（比较运算符）" class="headerlink" title="4.2 关系运算符（比较运算符）"></a>4.2 <strong>关系运算符（比较运算符）</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">=</span><br><span class="line">&lt;</span><br><span class="line">&lt;=</span><br><span class="line">== <span class="comment">//弱类型比较 不对数据类型作比较 &#x27;1&#x27;=1 true</span></span><br><span class="line">!=</span><br><span class="line">===<span class="comment">//强类型比较 对数据类型和值都进行比较 &#x27;1&#x27;=1 false</span></span><br><span class="line">!==</span><br></pre></td></tr></table></figure><h2 id="4-3-逻辑运算符"><a href="#4-3-逻辑运算符" class="headerlink" title="4.3 逻辑运算符"></a>4.3 <strong>逻辑运算符</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&amp;与：运算符两边的表达式都要计算</span><br><span class="line">|或：运算符两边的表达式都要计算</span><br><span class="line"></span><br><span class="line">&amp;&amp;短路与：如果前面的条件不满足，后面的条件就不用计算了</span><br><span class="line">||短路或</span><br><span class="line">!非</span><br></pre></td></tr></table></figure><h2 id="4-4-赋值运算符"><a href="#4-4-赋值运算符" class="headerlink" title="4.4 赋值运算符"></a>4.4 赋值运算符</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">=<span class="comment">//赋值</span></span><br><span class="line">+=<span class="comment">//a+=b   a=a+b</span></span><br><span class="line">-=</span><br><span class="line">*=</span><br><span class="line">/=</span><br><span class="line">%=</span><br></pre></td></tr></table></figure><h2 id="4-5-字符串连接符"><a href="#4-5-字符串连接符" class="headerlink" title="4.5 字符串连接符(.)"></a>4.5 字符串连接符(.)</h2><h2 id="4-6-错误抑制符"><a href="#4-6-错误抑制符" class="headerlink" title="4.6 错误抑制符(@)"></a>4.6 <strong>错误抑制符(@)</strong></h2><p>错误抑制符只对表达式有效</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> @(<span class="variable">$aa</span>+<span class="variable">$bb</span>);<span class="comment">//错误抑制</span></span><br></pre></td></tr></table></figure><h2 id="4-7-三元运算符"><a href="#4-7-三元运算符" class="headerlink" title="4.7 三元运算符(?:)"></a>4.7 <strong>三元运算符(?:)</strong></h2><p>表达式1 ? 值1 : 值2</p><h2 id="4-8-null合并运算符"><a href="#4-8-null合并运算符" class="headerlink" title="4.8 null合并运算符(??)"></a>4.8 <strong>null合并运算符(??)</strong></h2><p>PHP7.0以后才支持</p><p>例题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo $name??&#x27;姓名不详&#x27;;     //姓名不详</span><br></pre></td></tr></table></figure><p>多学一招：两个用来判断的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">isset()：判断变量是否被设置，并且设置的不是null</span><br><span class="line">empty()：检查一个变量是否为空，能转成false全部是空，[&#x27;&#x27;,0,0.0,array(),null]</span><br></pre></td></tr></table></figure><p>例题</p><h1 id="5-判断"><a href="#5-判断" class="headerlink" title="5 判断"></a>5 判断</h1><h2 id="5-1-语法"><a href="#5-1-语法" class="headerlink" title="5.1 语法"></a>5.1 <strong>语法</strong></h2><p>1、if语句</p><p>2、ifelse语句</p><p>3、switch case语句</p><h1 id="6-循环"><a href="#6-循环" class="headerlink" title="6 循环"></a>6 循环</h1><p>1、for</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始值;条件;增量)&#123;</span><br><span class="line"><span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、while&amp;do-while</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件)&#123;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">while</span>(条件)</span><br></pre></td></tr></table></figure><p>3、foreach</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法一</span></span><br><span class="line"><span class="keyword">foreach</span>(数组 <span class="keyword">as</span> 值)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//语法二</span></span><br><span class="line"><span class="keyword">foreach</span>(数组 <span class="keyword">as</span> 键=&gt;值)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$stu</span>=[<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;berry&#x27;</span>,<span class="string">&#x27;ketty&#x27;</span>];</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$stu</span> <span class="keyword">as</span> <span class="variable">$v</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$v</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">tom</span></span><br><span class="line"><span class="comment">berry</span></span><br><span class="line"><span class="comment">ketty</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$stu</span> <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$v</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$k&#125;</span>:<span class="subst">&#123;$v&#125;</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">0:tom</span></span><br><span class="line"><span class="comment">1:berry</span></span><br><span class="line"><span class="comment">2:ketty</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>小结：</p><ul><li>for、while、do-while可以相互替换</li><li>如果明确知道循环多少次首先for循环，如要要循环到条件不成立为止选while或do-while</li><li>先判断再执行选while，先执行再判断选do-while</li><li>while循环条件不成立就不执行，do-while至少执行一次</li></ul><h1 id="7-跳转语句"><a href="#7-跳转语句" class="headerlink" title="7 跳转语句"></a>7 跳转语句</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>：中断循环</span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span>：中断当前循环，进入下一个循环</span><br></pre></td></tr></table></figure><h1 id="8-函数"><a href="#8-函数" class="headerlink" title="8 函数"></a>8 函数</h1><h2 id="8-1-函数定义"><a href="#8-1-函数定义" class="headerlink" title="8.1 函数定义"></a>8.1 <strong>函数定义</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">参数<span class="number">1</span>，参数<span class="number">2</span>，...</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结：</p><p>1、变量名区分大小写</p><p>2、关键字、函数名不区分大小写</p><p>8.2 <strong>可变函数</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"><span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$args</span>,<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;show&#x27;</span>;<span class="comment">//将函数名保存到变量中</span></span><br><span class="line"><span class="variable">$str</span>(<span class="string">&#x27;锄禾日当午&#x27;</span>);</span><br></pre></td></tr></table></figure><p>8.3 <strong>匿名函数</strong></p><p>匿名函数就是没有名字的函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//匿名函数</span></span><br><span class="line"><span class="variable">$fun</span>=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;锄禾日当午&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//匿名函数调用</span></span><br><span class="line"><span class="variable">$fun</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0-输出语句&quot;&gt;&lt;a href=&quot;#0-输出语句&quot; class=&quot;headerlink&quot; title=&quot;0 输出语句&quot;&gt;&lt;/a&gt;0 输出语句&lt;/h1&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte</summary>
      
    
    
    
    <category term="Language" scheme="https://gbk.cx/categories/Language/"/>
    
    
    <category term="PHP" scheme="https://gbk.cx/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>汇编入门学习</title>
    <link href="https://gbk.cx/p/d147e7fa/"/>
    <id>https://gbk.cx/p/d147e7fa/</id>
    <published>2024-10-19T13:25:45.000Z</published>
    <updated>2024-10-20T02:21:19.463Z</updated>
    
    <content type="html"><![CDATA[<h1>汇编</h1><h1>一、指令</h1><h2 id="1-mov">1 mov</h2><p>可以立即数到内存，寄存器到内存。内存到寄存器</p><h3 id="1-1-mov指令操作的四种形式">1.1 mov指令操作的四种形式</h3><ol><li>[立即数]</li><li>[reg] reg代表寄存器 可以是8个通用寄存器中的任意一个</li><li>[reg+立即数]</li><li>[reg+reg*{1,2,4,8}]</li></ol><h3 id="1-2-指令格式">1.2 指令格式</h3><ol><li>MOV r/m8,r8      r通用寄存器</li><li>MOV r/m16,r16   m代表内存</li><li>MOV r/m32,r32  r8代表8位通用寄存器</li><li>MOV r8,r/m8      m8代表8为内存</li><li>MOV r16,r/m16   imm8代表8位立即数</li><li>MOV r32,r/m32</li><li>MOV r8,imm8</li><li>MOV r16,imm16</li><li>MOV r32,imm32</li></ol><h2 id="2-movs">2 movs</h2><p>移动数据 内存-内存 （EDI-ESI）</p><p>MOVS BYTE PTR ES:[EDI],BYTE PTR DS:[ESI] 简写为：MOVSB</p><p>MOVS WORD PTR ES:[EDI],WORD PTR DS:[ESI] 简写为：MOVSW</p><p>MOVS DWORD PTR ES:[EDI],DWORD PTR DS:[ESI] 简写为：MOVSD</p><p>💡 默认DF位是0时，当完成movs操作后ESI和EDI的值会加byte,word,dword{1，2，4}</p><h2 id="3-stos">3 stos</h2><p>将AI/AX/EAX的值存储到[EDI]指定的内存单元</p><p>STOS BYTE PRT ES:[EDI] 简写为STOSB</p><p>STOS WORD PRT ES:[EDI] 简写为STOSW</p><p>STOS DWORD PRT ES:[EDI] 简写为STOSD</p><p>💡 默认DF位是0时，当完成stos操作后EDI的值会加byte,word,dword{1，2，4}</p><h2 id="4-rep">4 rep</h2><p>按计数寄存器ECX中指定的次数重复执行字符串指令</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">MOV</span> <span class="variable constant_">ECX</span>,<span class="number">10</span></span><br><span class="line"><span class="variable constant_">REP</span> <span class="variable constant_">MOVSD</span></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">REP</span> <span class="variable constant_">STOSD</span></span><br></pre></td></tr></table></figure><h2 id="5-add">5 add</h2><h3 id="5-1-指令格式">5.1 指令格式</h3><ol><li>ADD r/m8,imm8</li><li>ADD r/m16,imm16</li><li>ADD r/m32,imm32</li><li>ADD r/m16,imm8</li><li>ADD r/m32,imm8</li><li>ADD r/m8,r8</li><li>ADD r/m16,r16</li><li>ADD r/m32,r32</li><li>ADD r8,r/m8</li><li>ADD r16,r/m16</li><li>ADD r32,r/m32</li></ol><h2 id="6-sub">6 sub</h2><h3 id="6-1-指令格式">6.1 指令格式</h3><ol><li>SUB r/m8,imm8</li><li>SUB r/m16,imm16</li><li>SUB r/m32,imm32</li><li>SUB r/m16,imm8</li><li>SUB r/m32,imm8</li><li>SUB r/m8,r8</li><li>SUB r/m16,r16</li><li>SUB r/m32,r32</li><li>SUB r8,r/m8</li><li>SUB r16,r/m16</li><li>SUB r32,r/m32</li></ol><h2 id="7-and">7 and</h2><h3 id="7-1-指令格式">7.1 指令格式</h3><ol><li>AND r/m8,imm8</li><li>AND r/m16,imm16</li><li>AND r/m32,imm32</li><li>AND r/m16,imm8</li><li>AND r/m32,imm8</li><li>AND r/m8,r8</li><li>AND r/m16,r16</li><li>AND r/m32,r32</li><li>AND r8,r/m8</li><li>AND r16,r/m16</li><li>AND r32,r/m32</li></ol><h2 id="8-or">8 or</h2><h3 id="8-1-指令格式">8.1 指令格式</h3><ol><li>OR r/m8,imm8</li><li>OR r/m16,imm16</li><li>OR r/m32,imm32</li><li>OR r/m16,imm8</li><li>OR r/m32,imm8</li><li>OR r/m8,r8</li><li>OR r/m16,r16</li><li>OR r/m32,r32</li><li>OR r8,r/m8</li><li>OR r16,r/m16</li><li>OR r32,r/m32</li></ol><h2 id="9-not">9 not</h2><h3 id="9-1-功能">9.1 功能</h3><p>进行取反操作</p><h3 id="9-2-指令格式">9.2 指令格式</h3><ol><li>NOT r32</li><li>NOT r16</li><li>NOT m16</li><li>NOT m32</li></ol><h2 id="10-xor">10 xor</h2><h3 id="10-1-指令格式">10.1 指令格式</h3><ol><li>XOR r/m8,imm8</li><li>XOR r/m16,imm16</li><li>XOR r/m32,imm32</li><li>XOR r/m16,imm8</li><li>XOR r/m32,imm8</li><li>XOR r/m8,r8</li><li>XOR r/m16,r16</li><li>XOR r/m32,r32</li><li>XOR r8,r/m8</li><li>XOR r16,r/m16</li><li>XOR r32,r/m32</li></ol><h2 id="11-push">11 push</h2><h3 id="11-1-功能">11.1 功能</h3><ol><li>向堆栈中压入数据</li><li>然后修改栈顶指针ESP寄存器地址，看数据类型byte,word,dword分别对应-1，-2，-4</li></ol><h3 id="11-2-指令格式">11.2 指令格式</h3><ol><li>PUSH r32</li><li>PUSH r16</li><li>PUSH m16</li><li>PUSH m32</li><li>PUSH imm8/imm16/imm32</li><li>PUSHAD（把8个通用寄存器的值存入堆栈）</li></ol><h3 id="11-3-其他方式实现该功能">11.3 其他方式实现该功能</h3><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/19/tzdTVzkA9nSuhP3vM6p01729344068916.png" alt="image"></p><h2 id="12-pop">12 pop</h2><h3 id="12-1-功能">12.1 功能</h3><ol><li>将栈顶数据存储到寄存器/内存</li><li>修改栈顶指针ESP寄存器地址，看数据类型byte,word,dword分别对应+1，+2，+4</li></ol><h3 id="12-2-指令格式">12.2 指令格式</h3><ol><li>POP r16</li><li>POP r32</li><li>POP m16</li><li>POP m32</li><li>POPAD （把存入堆栈的8个寄存器值弹出，恢复8个寄存器的值）</li></ol><h3 id="12-3-其他方式实现该功能">12.3 其他方式实现该功能</h3><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/19/IDqXn7QaUsncKSoprbes1729344086548.png" alt="image"></p><h2 id="13-jmp">13 jmp</h2><h3 id="13-1-功能">13.1 功能</h3><ol><li>修改寄存器EIP的值</li></ol><h3 id="13-2-指令格式">13.2 指令格式</h3><ol><li>JMP 寄存器/立即数/内存</li></ol><h2 id="14-call">14 call</h2><h3 id="14-1-功能">14.1 功能</h3><ol><li>PUSH当前call指令的下一行地址进入堆栈</li><li>往EIP内存入立即数/寄存器/内存    简写：jmp 立即数/寄存器/内存</li></ol><p>💡 与JMP唯一的区别：在堆栈中存储call指令下一行内存地址</p><h3 id="14-2-指令格式">14.2 指令格式</h3><ol><li>CALL 立即数/寄存器/内存</li></ol><h2 id="15-ret">15 ret</h2><h3 id="15-1-功能">15.1 功能</h3><ol><li>将当前栈顶数据值存入EIP      ADD ESP,4</li><li>然后当前栈顶指针+4，赋值给ESP    MOV EIP,[ESP-4]</li></ol><h3 id="15-2-指令格式">15.2 指令格式</h3><ol><li>RET</li></ol><h2 id="16-CMP">16 CMP</h2><h3 id="16-1-功能">16.1 功能</h3><p>该指令是比较两个操作数。</p><p>实际上，它相当于SUB指令，但是相减的记过并不保存到第一个操作数中。</p><p>只是根据相减的结果来改变零标志位的,当两个操作数相等的时候,零标志位置1。</p><h3 id="16-2-指令格式">16.2 指令格式</h3><ol><li>CMP R/M,R/M/IMM</li></ol><h2 id="17-TEST">17 TEST</h2><h3 id="17-1-功能">17.1 功能</h3><p>TEST指令相当于AND指令，只不过与的结果并不保存到第一个操作数中。</p><p>该指令在一定程序上和CMP指令时类似的,两个数值进行AND操作,结果不保存,但是会改变相应标志位.</p><h3 id="17-2-指令格式">17.2 指令格式</h3><p>TEST r/m,r/m/imm</p><h2 id="18-ADC">18 ADC</h2><h3 id="18-1-功能">18.1 功能</h3><p>带进位加法，两边不能同时为内存 宽度要一样</p><h3 id="18-2-指令格式">18.2 指令格式</h3><ol><li>ADC r/m,r/m/imm</li></ol><h2 id="19-SBB">19 SBB</h2><h3 id="19-1-功能">19.1 功能</h3><p>带借位减法，两边不能同时为内存 宽度要一样</p><h3 id="19-2-指令格式">19.2 指令格式</h3><ol><li>SBB r/m,r/m</li></ol><h2 id="20-XCHG">20 XCHG</h2><h3 id="20-1-功能">20.1 功能</h3><p>交换数据，两边不能同时为内存 宽度要一样</p><h3 id="20-2-指令格式">20.2 指令格式</h3><ol><li>XCHG r/m,r/m</li></ol><h2 id="21-算术位移指令">21 算术位移指令</h2><h3 id="21-1-SAL（算术左移）">21.1 SAL（算术左移）</h3><p>SAR Reg/Mem, CL/Imm</p><h3 id="21-2-SAR（算术右移）">21.2 SAR（算术右移）</h3><p>SAR Reg/Mem, CL/Imm</p><p>注意：算术右移时候补最高位符号位，是1补1，是0补0</p><h2 id="22-逻辑移位指令">22 逻辑移位指令</h2><p>注意：不管是左移还是右移都是补0</p><h3 id="22-1-SHL（逻辑左移）">22.1 SHL（逻辑左移）</h3><p>SHL Reg/Mem, CL/Imm</p><h3 id="22-2-SHR（逻辑右移）">22.2 SHR（逻辑右移）</h3><p>SHR Reg/Mem, CL/Imm</p><h2 id="23-循环移位指令">23 循环移位指令</h2><h3 id="23-1-ROL（循环左移）">23.1 ROL（循环左移）</h3><p>ROL r/m, i8</p><p>最低位是1则补1，最低位是0则补0</p><h3 id="23-2-ROR（循环右移）">23.2 ROR（循环右移）</h3><p>ROR r/m, CL</p><p>最高位是1则补1，最高位是0则补0</p><h2 id="24-带进位的循环移位指令">24 带进位的循环移位指令</h2><p>CF位是1则补1，反之则补0</p><h3 id="24-1-RCL（带进位循环左移）">24.1 RCL（带进位循环左移）</h3><p>RCL r/m, i8</p><h3 id="24-2-RCR（带进位循环右移）">24.2 RCR（带进位循环右移）</h3><p>RCR r/m, CL</p><h1>二、存储模式</h1><p>大端模式：数据高位在低位，数据低位在高位</p><p>小端模式：数据高位在高位，数据低位在低位</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/19/FA7VNMp2h04dlYk2uiOY1729344094077.png" alt="image"></p><h1>三 JCC</h1><h2 id="1-标志寄存器-EFLAGS">1 标志寄存器 EFLAGS</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/19/2jddoYVTheo4vVBfG6Pe1729344096976.png" alt="image"></p><h2 id="2-CF（bit-0）-Carry-flag">2 CF（bit 0）[Carry flag]</h2><h3 id="2-1-功能">2.1 功能</h3><p>若算术操作产生的结果在最高有效位发生进位或者借位则将其置1，反之清零。这个标志通常用来只是无符号整型运算的溢出状态。</p><p>👉 有符号运算看O位，无符号运算看C位</p><h3 id="2-2-例子">2.2 例子</h3><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/19/PwH0TLISl2GN2FgrYHIw1729344103144.png" alt="image"></p><h2 id="3-PF-（bit-2）-parity-flag">3 PF （bit 2）[parity flag]</h2><h3 id="3-1-功能">3.1 功能</h3><p>如果结果的最低有效字节包含偶数个1位，则该位置1，否则清零。</p><p>利用PF课进行奇偶校验检查：</p><p>需要传输“11001110”，数据中含有5个“1”，所以其奇校验位为“0”，同时把“110011100”数据传输给接收方，接收方收到数据时后再一次计算奇偶性，“110011100”中仍然含有5个“1”，所以接收方计算出的奇校验位还是“0”，与发送方一致，表示在此次传输过程中未发生错误</p><h2 id="4-AF（bit-4）-Auxiliary-carry-flag">4 AF（bit 4）[Auxiliary carry flag]</h2><h3 id="4-1-功能">4.1 功能</h3><ol><li>在字操作时，发生低字节向高字节进位或借位时；</li><li>在字节操作时，发生低四位向高四位进位或借位时。</li></ol><p>辅助进位标志AF的值被置为1，否则其值为0：</p><h2 id="5-ZF（bit-6）-zero-flag">5 ZF（bit 6）[zero flag]</h2><h3 id="5-1-功能">5.1 功能</h3><p>零标志ZF用来反映运算结果是否为0。</p><p>若结果为0，则将其置1，反之清零</p><p>经常与CMP或者TEST等指令一起使用</p><h2 id="6-SF（bit-7）-Sign-flag">6 SF（bit 7）[Sign flag]</h2><h3 id="6-1-功能">6.1 功能</h3><p>该标志被设置为有符号整型的最高有效位</p><p>0指示结果为正，反之则为负</p><h2 id="7-OF（bit-11）-OverFlow-flag">7 OF（bit 11）[OverFlow flag]</h2><h3 id="7-1-功能">7.1 功能</h3><p>一处标志OF用于反映有符号数加减运算所得结果是否溢出。</p><p>如果是无符号数运算，是否溢出看CF位。</p><p>如果是有符号数运算，是否溢出看OF位。</p><h2 id="8-DF（bit-10）-Oirection-flag">8 DF（bit 10）[Oirection flag]</h2><h3 id="8-1-功能">8.1 功能</h3><p>这个方向标志控制串指令（MOVS,CMPS,SCAS,LODS以及STOS）设置DF标志是的串指令自动递减（从高地址向低地址方向处理字符串），清楚该标志则使得指令自动递增</p><p>STD以及CLD指令分别用于设置以及清楚DF标志</p><h2 id="9-JCC指令">9 JCC指令</h2><table><thead><tr><th>Index</th><th>JCC指令</th><th>说明</th><th>EFLAGS</th></tr></thead><tbody><tr><td>1</td><td>JE,，JZ</td><td>结果为零则跳转(相等时跳转)</td><td>ZF=1</td></tr><tr><td>2</td><td>JNE，JNZ</td><td>结果不为零则跳转(不相等时跳转)</td><td>ZF=0</td></tr><tr><td>3</td><td>JS</td><td>结果为负则跳转</td><td>SF=1</td></tr><tr><td>4</td><td>JNS</td><td>结果为非负则跳转</td><td>SF=0</td></tr><tr><td>5</td><td>JP，JPE</td><td>结果中1的个数为偶数则跳转</td><td>PF=1</td></tr><tr><td>6</td><td>JNP，JPO</td><td>结果中1的个数为偶数则跳转</td><td>PF=0</td></tr><tr><td>7</td><td>JO</td><td>结果溢出了则跳转</td><td>OF=1</td></tr><tr><td>8</td><td>JNO</td><td>结果没有溢出则跳转</td><td>OF=0</td></tr><tr><td>9</td><td>JB，JNAE</td><td>小于则跳转 (无符号数)</td><td>CF=1</td></tr><tr><td>10</td><td>JNB，JAE</td><td>大于等于则跳转 (无符号数)</td><td>CF=0</td></tr><tr><td>11</td><td>JBE，JNA</td><td>小于等于则跳转 (无符号数)</td><td>CF=1 or ZF=1</td></tr><tr><td>12</td><td>JNBE，JA</td><td>大于则跳转(无符号数)</td><td>CF=0 and ZF=0</td></tr><tr><td>13</td><td>JL，JNGE</td><td>小于则跳转 (有符号数)</td><td>SF≠ OF</td></tr><tr><td>14</td><td>JNL，JGE</td><td>大于等于则跳转 (有符号数)</td><td>SF=OF</td></tr><tr><td>15</td><td>JLE，JNG</td><td>小于等于则跳转 (有符号数)</td><td>ZF=1 or SF≠ OF</td></tr><tr><td>16</td><td>JNLE，JG</td><td>大于则跳转(有符号数)</td><td>ZF=0 and SF=OF</td></tr></tbody></table><p>👉 在任何运算之前得先确定时有符号运算还是无符号运算</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/19/EXei6gcBRwac3PrdL7l31729344109884.png" alt="image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;汇编&lt;/h1&gt;
&lt;h1&gt;一、指令&lt;/h1&gt;
&lt;h2 id=&quot;1-mov&quot;&gt;1 mov&lt;/h2&gt;
&lt;p&gt;可以立即数到内存，寄存器到内存。内存到寄存器&lt;/p&gt;
&lt;h3 id=&quot;1-1-mov指令操作的四种形式&quot;&gt;1.1 mov指令操作的四种形式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[</summary>
      
    
    
    
    <category term="Language" scheme="https://gbk.cx/categories/Language/"/>
    
    
    <category term="Assembly" scheme="https://gbk.cx/tags/Assembly/"/>
    
  </entry>
  
  <entry>
    <title>shellcode编写</title>
    <link href="https://gbk.cx/p/22672422/"/>
    <id>https://gbk.cx/p/22672422/</id>
    <published>2024-10-08T05:52:29.000Z</published>
    <updated>2024-10-19T13:34:09.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是ShellCode？"><a href="#什么是ShellCode？" class="headerlink" title="什么是ShellCode？"></a>什么是ShellCode？</h1><p>不依赖环境，放到任何地方都可以执行的机器码</p><h1 id="shellcode编写原则"><a href="#shellcode编写原则" class="headerlink" title="shellcode编写原则"></a>shellcode编写原则</h1><ol><li>不能有全局变量</li><li>不能使用常量字符串</li><li>不能使用系统调用</li><li>不能嵌套调用其他函数</li></ol><h1 id="案例思路"><a href="#案例思路" class="headerlink" title="案例思路"></a>案例思路</h1><p>通过TEB结构体查找PEB，然后在PEB中找到<strong>_PEB_LDR_DATA</strong>，再从<strong>_PEB_LDR_DATA</strong>中找到<strong>InLoadOrderModuleList</strong>，这是一个链表，链表内存储的是有关所有加载dll的相关信息，可以通过这个结构来进行断链dll隐藏，<strong>_LDR_DATA_TABLE_ENTRY</strong>这是链表里的node的结构体，接下来我们遍历我们想要找到的dll，拿到DllBase，之后通过PE的知识解析，从中找到导出表，从导出表中拿到<strong>GetProcAddress</strong>和<strong>LoadLibraryA</strong>函数，之后就可以通过这两个函数进行加载dll和使用dll中的函数。</p><p>其中有关<strong>_LDR_DATA_TABLE_ENTRY</strong>结构体内容如下，可以参考看看</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//0x50 bytes (sizeof)</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_LDR_DATA_TABLE_ENTRY</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InLoadOrderLinks;                                    <span class="comment">//0x0</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InMemoryOrderLinks;                                  <span class="comment">//0x8</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InInitializationOrderLinks;                          <span class="comment">//0x10</span></span><br><span class="line">    VOID* DllBase;                                                          <span class="comment">//0x18</span></span><br><span class="line">    VOID* EntryPoint;                                                       <span class="comment">//0x1c</span></span><br><span class="line">    ULONG SizeOfImage;                                                      <span class="comment">//0x20</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_UNICODE_STRING</span> FullDllName;                                     <span class="comment">//0x24</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_UNICODE_STRING</span> BaseDllName;                                     <span class="comment">//0x2c</span></span><br><span class="line">    ULONG Flags;                                                            <span class="comment">//0x34</span></span><br><span class="line">    USHORT LoadCount;                                                       <span class="comment">//0x38</span></span><br><span class="line">    USHORT TlsIndex;                                                        <span class="comment">//0x3a</span></span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> HashLinks;                                       <span class="comment">//0x3c</span></span><br><span class="line">        <span class="keyword">struct</span></span><br><span class="line">        &#123;</span><br><span class="line">            VOID* SectionPointer;                                           <span class="comment">//0x3c</span></span><br><span class="line">            ULONG CheckSum;                                                 <span class="comment">//0x40</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        ULONG TimeDateStamp;                                                <span class="comment">//0x44</span></span><br><span class="line">        VOID* LoadedImports;                                                <span class="comment">//0x44</span></span><br><span class="line">    &#125;;</span><br><span class="line">    VOID* EntryPointActivationContext;                                      <span class="comment">//0x48</span></span><br><span class="line">    VOID* PatchInformation;                                                 <span class="comment">//0x4c</span></span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><h1 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo08shellcode.cpp : Defines the entry point for the console application.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="comment">//function</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">FARPROC</span> <span class="params">(WINAPI *GETPROCADDRESS)</span><span class="params">(HMODULE hModule,LPCSTR lpProcName)</span>; </span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(WINAPI *MESSAGEBOXA)</span><span class="params">(HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption, UINT uType)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">HMODULE</span> <span class="params">(WINAPI *LOADLIBRARYA)</span><span class="params">(LPCSTR lpLibFileName)</span>;</span><br><span class="line"></span><br><span class="line">GETPROCADDRESS PGETPROCADDRESS;</span><br><span class="line">MESSAGEBOXA PMESSAGEBOX;</span><br><span class="line">LOADLIBRARYA PLOADLIBRARY;</span><br><span class="line"></span><br><span class="line"><span class="comment">//struct</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    USHORT Length;                                                          <span class="comment">//0x0</span></span><br><span class="line">    USHORT MaximumLength;                                                   <span class="comment">//0x2</span></span><br><span class="line">    PWSTR Buffer;                                                         <span class="comment">//0x4</span></span><br><span class="line">&#125;UNICODE_STRING;</span><br><span class="line"><span class="comment">//0x0 bytes (sizeof)</span></span><br><span class="line"><span class="comment">//0x28 bytes (sizeof)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB_LDR_DATA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DWORD Length;                                                           <span class="comment">//0x0</span></span><br><span class="line">    BYTE Initialized;                                                      <span class="comment">//0x4</span></span><br><span class="line">    VOID* SsHandle;                                                         <span class="comment">//0x8</span></span><br><span class="line">    LIST_ENTRY InLoadOrderModuleList;                               <span class="comment">//0xc</span></span><br><span class="line">    LIST_ENTRY InMemoryOrderModuleList;                             <span class="comment">//0x14</span></span><br><span class="line">    LIST_ENTRY InInitializationOrderModuleList;                     <span class="comment">//0x1c</span></span><br><span class="line">    VOID* EntryInProgress;                                                  <span class="comment">//0x24</span></span><br><span class="line">&#125;PEB_LDR_DATA; </span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LIST_ENTRY InLoadOrderLinks;                                    <span class="comment">//0x0</span></span><br><span class="line">    LIST_ENTRY InMemoryOrderLinks;                                  <span class="comment">//0x8</span></span><br><span class="line">    LIST_ENTRY InInitializationOrderLinks;                          <span class="comment">//0x10</span></span><br><span class="line">    VOID* DllBase;                                                          <span class="comment">//0x18</span></span><br><span class="line">    VOID* EntryPoint;                                                       <span class="comment">//0x1c</span></span><br><span class="line">    DWORD SizeOfImage;                                                      <span class="comment">//0x20</span></span><br><span class="line">    UNICODE_STRING FullDllName;                                     <span class="comment">//0x24</span></span><br><span class="line">    UNICODE_STRING BaseDllName;                                     <span class="comment">//0x2c</span></span><br><span class="line">    DWORD Flags;                                                            <span class="comment">//0x34</span></span><br><span class="line">    WORD LoadCount;                                                       <span class="comment">//0x38</span></span><br><span class="line">    WORD TlsIndex;                                                        <span class="comment">//0x3a</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        LIST_ENTRY HashLinks;                                       <span class="comment">//0x3c</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            VOID* SectionPointer;                                           <span class="comment">//0x3c</span></span><br><span class="line">            DWORD CheckSum;                                                 <span class="comment">//0x40</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        DWORD TimeDateStamp;                                                <span class="comment">//0x44</span></span><br><span class="line">        VOID* LoadedImports;                                                <span class="comment">//0x44</span></span><br><span class="line">    &#125;;</span><br><span class="line">    VOID* EntryPointActivationContext;                <span class="comment">//0x48</span></span><br><span class="line">    VOID* PatchInformation;                                                 <span class="comment">//0x4c</span></span><br><span class="line">&#125;LDR_DATA_TABLE_ENTRY; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">strcmp</span><span class="params">(<span class="type">char</span>* buf1,<span class="type">char</span>* buf2)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(*buf1 &amp;&amp; *buf2 &amp;&amp; *buf1 == *buf2)&#123;</span><br><span class="line">buf1++;</span><br><span class="line">buf2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*buf1 == *buf2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ToShellcode</span><span class="params">()</span>&#123;</span><br><span class="line">LDR_DATA_TABLE_ENTRY *pPLD = <span class="literal">NULL</span>,*pBeg = <span class="literal">NULL</span>;</span><br><span class="line">PGETPROCADDRESS = <span class="literal">NULL</span>;</span><br><span class="line">PLOADLIBRARY = <span class="literal">NULL</span>;</span><br><span class="line">PMESSAGEBOX = <span class="literal">NULL</span>;</span><br><span class="line">WORD *pFirst = <span class="literal">NULL</span>,*pLast = <span class="literal">NULL</span>;</span><br><span class="line">DWORD ret = <span class="number">0</span>,i=<span class="number">0</span>;</span><br><span class="line">DWORD dwKernelBase = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> szKerner32[] = &#123;<span class="string">&#x27;k&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;e&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;r&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;e&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;l&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;3&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;.&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;d&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;l&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;l&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">char</span> szUser32[] = &#123;<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> szGetProAddress[] = &#123;<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">char</span> szLoadLibrary[] = &#123;<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">char</span> szMessageBox[] = &#123;<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">char</span> lpText[] = &#123;<span class="number">0xD7</span>,<span class="number">0xA2</span>,<span class="number">0xC8</span>,<span class="number">0xEB</span>,<span class="number">0xB3</span>,<span class="number">0xC9</span>,<span class="number">0xB9</span>,<span class="number">0xA6</span>,<span class="number">0x00</span>&#125;;</span><br><span class="line"><span class="type">char</span> lpCaption[]= &#123;<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">__asm&#123;</span><br><span class="line">mov eax,fs:[<span class="number">0x30</span>] <span class="comment">//PEB</span></span><br><span class="line">mov eax,[eax+<span class="number">0xc</span>] <span class="comment">//PEB-&gt;Ldr</span></span><br><span class="line">add eax,<span class="number">0x0c</span> <span class="comment">//LDR_DATA_TABLE_ENTRY InLoadOrderModuleList</span></span><br><span class="line">mov pBeg,eax</span><br><span class="line">mov eax,[eax]</span><br><span class="line">mov pPLD,eax</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if (strcmp(szMessageBox,name))</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printf(&quot;%d:--%s--%x\n&quot;,t+1,name,funAddress);</span></span><br><span class="line"><span class="comment">PMESSAGEBOX = (MESSAGEBOX)funAddress;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//kernel32.dll</span></span><br><span class="line"><span class="keyword">while</span> (pPLD != pBeg)</span><br><span class="line">&#123;</span><br><span class="line">pLast = (WORD*)pPLD-&gt;BaseDllName.Buffer;</span><br><span class="line">pFirst = (WORD*)szKerner32;</span><br><span class="line"><span class="keyword">while</span>(!pLast &amp;&amp; *pLast == *pFirst)&#123;</span><br><span class="line">pLast++;</span><br><span class="line">pFirst++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*pLast == *pFirst)</span><br><span class="line">&#123;</span><br><span class="line">dwKernelBase = (DWORD)pPLD-&gt;DllBase;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pPLD = (LDR_DATA_TABLE_ENTRY*)pPLD-&gt;InLoadOrderLinks.Flink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)dwKernelBase;</span><br><span class="line">PIMAGE_NT_HEADERS pNTHeader = (PIMAGE_NT_HEADERS)((DWORD)pDosHeader + pDosHeader-&gt;e_lfanew);</span><br><span class="line">PIMAGE_FILE_HEADER pPEHeader = (PIMAGE_FILE_HEADER)((DWORD)pNTHeader + <span class="number">4</span>);</span><br><span class="line">PIMAGE_OPTIONAL_HEADER32 pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((DWORD)pPEHeader + IMAGE_SIZEOF_FILE_HEADER);</span><br><span class="line">DWORD dataDirectorySize = <span class="keyword">sizeof</span>(pOptionHeader-&gt;DataDirectory) / <span class="keyword">sizeof</span>(IMAGE_DATA_DIRECTORY);</span><br><span class="line">PIMAGE_DATA_DIRECTORY pDataDirectory = (PIMAGE_DATA_DIRECTORY)pOptionHeader-&gt;DataDirectory;</span><br><span class="line">PIMAGE_EXPORT_DIRECTORY pExportTable = (PIMAGE_EXPORT_DIRECTORY)(dwKernelBase + pDataDirectory-&gt;VirtualAddress);</span><br><span class="line">LPVOID funNameBase = (LPVOID)(dwKernelBase + pExportTable-&gt;AddressOfNames);</span><br><span class="line">LPVOID funAddressBase = (LPVOID)(dwKernelBase + pExportTable-&gt;AddressOfFunctions);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (DWORD t = <span class="number">0</span>;t&lt;pExportTable-&gt;NumberOfNames;t++)</span><br><span class="line">&#123;</span><br><span class="line">DWORD funAddress = dwKernelBase + *(PDWORD)((DWORD)funAddressBase+(t*<span class="number">4</span>));</span><br><span class="line"><span class="type">char</span>* name = (<span class="type">char</span>*)(dwKernelBase + *(PDWORD)((DWORD)funNameBase+(t*<span class="number">4</span>)));</span><br><span class="line"><span class="comment">//printf(&quot;name:%s\n&quot;,name);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(szGetProAddress,name))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d:--%s--%x\n&quot;</span>,t+<span class="number">1</span>,name,funAddress);</span><br><span class="line">PGETPROCADDRESS = (GETPROCADDRESS)funAddress;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(szLoadLibrary,name))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d:--%s--%x\n&quot;</span>,t+<span class="number">1</span>,name,funAddress);</span><br><span class="line">PLOADLIBRARY = (LOADLIBRARYA)funAddress;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//getchar();</span></span><br><span class="line">HMODULE hmodule = PLOADLIBRARY((LPCSTR)szUser32);</span><br><span class="line">PMESSAGEBOX = (MESSAGEBOXA)PGETPROCADDRESS(hmodule,szMessageBox);</span><br><span class="line">PMESSAGEBOX(<span class="number">0</span>,lpText,lpCaption,MB_OK);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">ToShellcode();</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是ShellCode？&quot;&gt;&lt;a href=&quot;#什么是ShellCode？&quot; class=&quot;headerlink&quot; title=&quot;什么是ShellCode？&quot;&gt;&lt;/a&gt;什么是ShellCode？&lt;/h1&gt;&lt;p&gt;不依赖环境，放到任何地方都可以执行的机器码&lt;/p&gt;
</summary>
      
    
    
    
    <category term="逆向" scheme="https://gbk.cx/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="shellcode" scheme="https://gbk.cx/tags/shellcode/"/>
    
  </entry>
  
  <entry>
    <title>保护模式</title>
    <link href="https://gbk.cx/p/6c15571f/"/>
    <id>https://gbk.cx/p/6c15571f/</id>
    <published>2024-09-26T14:05:55.000Z</published>
    <updated>2024-10-19T03:27:23.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="保护模式介绍"><a href="#保护模式介绍" class="headerlink" title="保护模式介绍"></a>保护模式介绍</h1><h2 id="什么是保护模式？"><a href="#什么是保护模式？" class="headerlink" title="什么是保护模式？"></a>什么是保护模式？</h2><p>x86 CPU的3个模式：实模式、保护模式和虚拟8086模式。</p><h2 id="为什么不直接讲x64的？"><a href="#为什么不直接讲x64的？" class="headerlink" title="为什么不直接讲x64的？"></a>为什么不直接讲x64的？</h2><p>x86是由Intel推出的一种复杂指令集,能够生产支持这种指令集CPU公司主要是Intel和AMD.</p><p>AMD在1999年的时候，拓展了这套指令集，称为x86-64,后改名为AMD64,Intel也兼容了这个产品，称为Intel 64.但AMD64和Intel64几乎是一样的，所以在很多资料中统称为x64.这套指令集是对x86的拓展，向下兼容的.</p><h2 id="保护模式有什么特点？"><a href="#保护模式有什么特点？" class="headerlink" title="保护模式有什么特点？"></a>保护模式有什么特点？</h2><p>段的机制</p><p>页的机制</p><h2 id="学习保护模式有什么用？"><a href="#学习保护模式有什么用？" class="headerlink" title="学习保护模式有什么用？"></a>学习保护模式有什么用？</h2><p>真正理解内核是如何运作的</p><h1 id="段寄存器结构"><a href="#段寄存器结构" class="headerlink" title="段寄存器结构"></a>段寄存器结构</h1><h2 id="1、什么是段寄存器？"><a href="#1、什么是段寄存器？" class="headerlink" title="1、什么是段寄存器？"></a>1、什么是段寄存器？</h2><p>当我们用汇编读写某一个地址时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov dword ptr ds:[0x123456]</span><br></pre></td></tr></table></figure><p>eax我们真正读写的地址是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ds.base + 0x123456</span><br></pre></td></tr></table></figure><p><strong>ES CS SS DS FS GS LDTR TR</strong>  共8个</p><h2 id="2、段寄存器的结构"><a href="#2、段寄存器的结构" class="headerlink" title="2、段寄存器的结构"></a>2、段寄存器的结构</h2><p><img src="C:/Users/36085/AppData/Roaming/Typora/typora-user-images/image-20240923131745478.png" alt="image-20240923131745478"></p><h2 id="3、段寄存器的读写"><a href="#3、段寄存器的读写" class="headerlink" title="3、段寄存器的读写"></a>3、段寄存器的读写</h2><h3 id="3-1-读段寄存器"><a href="#3-1-读段寄存器" class="headerlink" title="3.1 读段寄存器"></a>3.1 读段寄存器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">比如：MOV AX,ES    只能读16位的可见部分</span><br><span class="line"></span><br><span class="line">读写LDTR的指令为：SLDT/LLDT</span><br><span class="line"></span><br><span class="line">读写TR的指令为：STR/LTR</span><br></pre></td></tr></table></figure><h3 id="3-2-写段寄存器"><a href="#3-2-写段寄存器" class="headerlink" title="3.2 写段寄存器"></a>3.2 写段寄存器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如：MOV DS,AX   写时是写96位  </span><br></pre></td></tr></table></figure><h1 id="段寄存器属性探测"><a href="#段寄存器属性探测" class="headerlink" title="段寄存器属性探测"></a>段寄存器属性探测</h1><h2 id="1、段寄存器成员简介"><a href="#1、段寄存器成员简介" class="headerlink" title="1、段寄存器成员简介"></a>1、段寄存器成员简介</h2><table><thead><tr><th><strong>段寄存器</strong></th><th><strong>Selector</strong></th><th><strong>Attribute</strong></th><th><strong>Base</strong></th><th><strong>Limit</strong></th></tr></thead><tbody><tr><td>ES</td><td>0023</td><td>可读、可写</td><td>0</td><td>0xFFFFFFFF</td></tr><tr><td>CS</td><td>001B</td><td>可读、可执行</td><td>0</td><td>0xFFFFFFFF</td></tr><tr><td>SS</td><td>0023</td><td>可读、可写</td><td>0</td><td>0xFFFFFFFF</td></tr><tr><td>DS</td><td>0023</td><td>可读、可写</td><td>0</td><td>0xFFFFFFFF</td></tr><tr><td>FS</td><td>003B</td><td>可读、可写</td><td>0x7FFDE000</td><td>0xFFF</td></tr><tr><td>GS</td><td>-</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><h2 id="2、探测Attribute"><a href="#2、探测Attribute" class="headerlink" title="2、探测Attribute"></a>2、探测Attribute</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int var = 0;</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">mov ax,ss//cs不行 cs是可读 可执行 但不可写</span><br><span class="line">mov ds,ax</span><br><span class="line">mov dword ptr ds:[var],eax</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、探测Base"><a href="#3、探测Base" class="headerlink" title="3、探测Base"></a>3、探测Base</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int var = 1;</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">mov ax,fs</span><br><span class="line">mov gs,ax</span><br><span class="line">mov eax,gs:[0]//不要用DS 否则编译不过去</span><br><span class="line">mov dword ptr ds:[var],eax</span><br><span class="line"></span><br><span class="line">//mov edx,dword ptr ds:[0x7FFDF000]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、探测Limit"><a href="#4、探测Limit" class="headerlink" title="4、探测Limit"></a>4、探测Limit</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int var = 1;</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">mov ax,fs</span><br><span class="line">mov gs,ax</span><br><span class="line">mov eax,gs:[0]//不要用DS 否则编译不过去</span><br><span class="line">mov dword ptr ds:[var],eax</span><br><span class="line"></span><br><span class="line">//mov edx,dword ptr ds:[0x7FFDF000]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="段描述符与段选择子"><a href="#段描述符与段选择子" class="headerlink" title="段描述符与段选择子"></a>段描述符与段选择子</h1><h2 id="段描述符分类"><a href="#段描述符分类" class="headerlink" title="段描述符分类"></a>段描述符分类</h2><p>GDT(全局描述符表)  </p><p>LDT(局部描述符表)</p><p>当我们执行类似MOV DS,AX指令时，CPU会查表，根据AX的值来决定查找GDT还是LDT,查找表的什么位置，查出多少数据.</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/23/451f0XYnzy9Q5q933mQn1727069019859.png" alt="image-20240923132339229"></p><h2 id="段描述符"><a href="#段描述符" class="headerlink" title="段描述符"></a>段描述符</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/23/jeVO88xnfdIXyGW35Aje1727069148863.png" alt="image-20240923132548637"></p><h2 id="段选择子"><a href="#段选择子" class="headerlink" title="段选择子"></a>段选择子</h2><p>段选择子是一个16位的段描述符，该描述符指向了定义该段的段描述符.</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/23/SNBS0LpfKl2WOYKL6Fpu1727069279346.png" alt="image-20240923132759152"></p><p><strong>RPL：</strong>请求特权级别</p><p><strong>TI：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TI=0  查GDT表</span><br><span class="line">TI=1  查LDT表</span><br></pre></td></tr></table></figure><p><strong>Index：</strong>处理器将索引值乘以8在加上GDT或者LDT的<strong>Base地址</strong>，就是要加载的段描述符</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/07/otGPfgORNBUZKw1bl7ib1728276445387.png" alt="image-20241007124724810"></p><h2 id="加载段描述符至段寄存器"><a href="#加载段描述符至段寄存器" class="headerlink" title="加载段描述符至段寄存器"></a>加载段描述符至段寄存器</h2><p>除了MOV指令，我们还可以使用<strong>LES、LSS、LDS、LFS、LGS</strong>指令修改寄存器</p><p>CS不能通过上述的指令进行修改，CS为代码段，CS的改变会导致EIP的改变，要改CS，必须要保证CS与EIP一起改，后面会讲</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">char buffer[6];</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">les ecx,fword ptr ds:[buffer] //高2个字节给es，低四个字节给ecx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>[!NOTE]</p><p>注意：RPL&lt;&#x3D;DPL(在数值上)</p></blockquote><h2 id="段描述符属性"><a href="#段描述符属性" class="headerlink" title="段描述符属性"></a>段描述符属性</h2><h3 id="P位和G位"><a href="#P位和G位" class="headerlink" title="P位和G位"></a>P位和G位</h3><p>1、P位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">P = 1 段描述符有效</span><br><span class="line"></span><br><span class="line">P = 0 段描述符无效</span><br></pre></td></tr></table></figure><p>2、G位（当前寻址上限）</p><p>G &#x3D; 0 Limit单位是bytes</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Limit = 000 FFFFF 前面加000</span><br></pre></td></tr></table></figure><p>G &#x3D; 1 Limit单位是以4KB</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Limit = FFFFF FFF 后面加FFF</span><br></pre></td></tr></table></figure><h3 id="S位和TYPE域"><a href="#S位和TYPE域" class="headerlink" title="S位和TYPE域"></a>S位和TYPE域</h3><p><strong>1、S位</strong></p><p><strong>S &#x3D; 1</strong> 代码段或者数据段描述符</p><p><strong>S &#x3D; 0</strong> 系统段描述符</p><p><strong>2、TYPE域</strong></p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/23/HXEuU2qYUVnAv2baAHv61727070886381.png" alt="image-20240923135446213"></p><h4 id="分析举例"><a href="#分析举例" class="headerlink" title="分析举例"></a>分析举例</h4><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/23/qO12uvUnMZjdKXyfRJCq1727070949252.png" alt="image-20240923135549083"></p><h4 id="数据段（DS）说明"><a href="#数据段（DS）说明" class="headerlink" title="数据段（DS）说明"></a>数据段（DS）说明</h4><p>Access 访问位，表示该位最后一次被操作系统清零后，该段是否被访问过.每当处理器将该段选择符置入某个段寄存器时，就将该位置1.</p><p>Write 是否可写</p><p>E 扩展方向 （向上拓展红色部分图一，向下拓展红色部分图二）</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/23/o5OU5GmVhc4yXh4awvVR1727071015823.png" alt="image-20240923135655239"></p><h4 id="代码段（CS）说明"><a href="#代码段（CS）说明" class="headerlink" title="代码段（CS）说明"></a>代码段（CS）说明</h4><p>A 访问位</p><p>R 可读位</p><p>C 一致位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C = 1 一致代码段</span><br><span class="line"></span><br><span class="line">C = 0 非一致代码段</span><br></pre></td></tr></table></figure><h4 id="系统段（SS）描述符"><a href="#系统段（SS）描述符" class="headerlink" title="系统段（SS）描述符"></a>系统段（SS）描述符</h4><p>当S&#x3D;0时，该段描述符为系统描述符.系统描述符有分为以下类型</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/23/6Nz4S19QrtwLIg7SulKq1727071223376.png" alt="image-20240923140023146"></p><h3 id="DB位"><a href="#DB位" class="headerlink" title="DB位"></a>DB位</h3><p>DB位：当前实际地址最多大小</p><p>1、CS段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D = 1 采用32位寻址方式</span><br></pre></td></tr></table></figure><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/24/CVU6623mNzm5Cds5lpmY1727179769864.png" alt="image-20240924200830741"></p><p>整个地址空间是4KB</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D = 0 采用16位寻址方式</span><br><span class="line">前缀67 改变寻址方式</span><br></pre></td></tr></table></figure><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/24/quzQTBtWvaSAniiFI9ja1727179763079.png" alt="image-20240924200922757"></p><p>整个地址空间是64K</p><p>2、SS段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D = 1 隐式堆栈访问指令（如：PUSH POP CALL） 使用32位堆栈指针寄存器ESP</span><br><span class="line"></span><br><span class="line">D = 0 隐式堆栈访问指令（如：PUSH POP CALL） 使用16位堆栈指针寄存器SP</span><br></pre></td></tr></table></figure><p>3、向下拓展的数据段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D = 1 段上线为4GB</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D = 0 段上线为64KB</span><br></pre></td></tr></table></figure><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/24/isF11qm2OpVGW2hVbjkL1727179885987.png" alt="image-20240924201125839"></p><p><strong>总结</strong></p><ul><li>段描述符中的DB位控制操作数的默认大小，DB&#x3D;0时默认操作数为16位，DB&#x3D;1时默认操作数为32位。 </li><li>寄存器宽度的改变通过改变DB位实现，不影响寄存器本身的宽度。 </li><li>CS段描述符的DB位控制代码段的默认操作数大小，影响push指令的默认操作数。 </li><li>SS段描述符的DB位改变堆栈寄存器的寻址方式，从32位变为16位</li></ul><h1 id="段权限检查"><a href="#段权限检查" class="headerlink" title="段权限检查"></a>段权限检查</h1><h2 id="CPU分级"><a href="#CPU分级" class="headerlink" title="CPU分级"></a>CPU分级</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/24/FVfBwXHWulDjzsN3HxTt1727181087996.png" alt="image-20240924203127817"></p><h2 id="如何查看程序处于几环"><a href="#如何查看程序处于几环" class="headerlink" title="如何查看程序处于几环?"></a>如何查看程序处于几环?</h2><p>CPL(Current Privilege Level) ：当前特权级</p><p>CS和SS中存储的段选择子<strong>后2位</strong></p><p>例如：23 &#x3D;&#x3D; 0010 0011 2b &#x3D;&#x3D; 0010 1011  11&#x3D;&#x3D;3 那么在三环</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/24/6Z0nGdhvUuNesBtJ2sSi1727181581236.png" alt="image-20240924203902095"></p><h2 id="DPL-Descriptor-Privilege-Level-描述符特权级别"><a href="#DPL-Descriptor-Privilege-Level-描述符特权级别" class="headerlink" title="DPL(Descriptor Privilege Level)  描述符特权级别"></a>DPL(Descriptor Privilege Level)  描述符特权级别</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/24/Ad4QrcS3lzPuduCEaidJ1727181126958.png" alt="image-20240924203206796"></p><p>DPL存储在段描述符中，规定了访问该段所需要的特权级别是什么.</p><p>通俗的理解：如果你想访问我，那么你应该具备什么特权.</p><p><strong>举例说明：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov DS,AX  如果AX指向的段DPL = 0  </span><br><span class="line"></span><br><span class="line">但当前程序的CPL = 3 这行指令是不会成功的</span><br></pre></td></tr></table></figure><h2 id="RPL-Request-Privilege-Level-请求特权级别"><a href="#RPL-Request-Privilege-Level-请求特权级别" class="headerlink" title="RPL(Request Privilege Level)  请求特权级别"></a>RPL(Request Privilege Level)  请求特权级别</h2><p>RPL是针对段选择子而言的，每个段的选择子都有自己的RPL</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/24/W6Mea376WM7nPEaMdcJX1727181187606.png" alt="image-20240924203307380"></p><p>举例说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mov ax,0008与Mov ax,000B //段选择子  </span><br><span class="line"></span><br><span class="line">Mov ds,axMov ds,ax//将段描述指向的是同一个段描述符,但RPL是不一样的.</span><br></pre></td></tr></table></figure><h2 id="数据段的权限检查"><a href="#数据段的权限检查" class="headerlink" title="数据段的权限检查"></a>数据段的权限检查</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">比如当前程序处于0环，也就是说CPL=0</span><br><span class="line"></span><br><span class="line">Mov ax,000B//1011   RPL = 3</span><br><span class="line"></span><br><span class="line">Mov ds,ax//ax指向的段描述符的DPL = 0</span><br></pre></td></tr></table></figure><p>数据段的权限检查：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CPL &lt;= DPL  并且 RPL &lt;= DPL (数值上的比较)</span><br></pre></td></tr></table></figure><p>注意：代码段和系统段描述符中的检查方式并不一样</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CPL  CPU当前的权限级别</span><br><span class="line"></span><br><span class="line">DPL  如果你想访问我，你应该具备什么样的权限</span><br><span class="line"></span><br><span class="line">RPL  用什么权限去访问一个段</span><br></pre></td></tr></table></figure><h1 id="代码跨段执行流程"><a href="#代码跨段执行流程" class="headerlink" title="代码跨段执行流程"></a>代码跨段执行流程</h1><p>段寄存器:<code>ES,CS,SS,DS,FS,GS,LDTR,TR</code></p><p>段寄存器读写：除<strong>CS</strong>外，其他的段寄存器都可以通过<code>MOV,LES,LSS,LDS,LFS,LGS</code>指令进行修改</p><h2 id="1、代码间的跳转-段间跳转-非调用门之类的"><a href="#1、代码间的跳转-段间跳转-非调用门之类的" class="headerlink" title="1、代码间的跳转(段间跳转  非调用门之类的)"></a>1、代码间的跳转(段间跳转  非调用门之类的)</h2><p>段间跳转，有2种情况，即要跳转的段是一致代码段还是非一致代码段，也就是看C等于0还是1</p><p>同时修改CS与EIP的指令</p><p><strong>JMP FAR</strong> &#x2F; CALL FAR &#x2F; RETF &#x2F; INT &#x2F;IRETED</p><blockquote><p>[!NOTE]</p><p>注意：<strong>只改变EIP</strong>的指令 <strong>JMP &#x2F; CALL &#x2F; JCC &#x2F; RET</strong></p></blockquote><h2 id="2、执行流程"><a href="#2、执行流程" class="headerlink" title="2、执行流程"></a>2、执行流程</h2><p>CPU如何执行这行代码? <strong>JMP 0x20:0x004183D7</strong> </p><p>(1) 段选择子拆分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x20 对应二进制形式 0000 0000 0010 0000</span><br><span class="line">RPL = 00   </span><br><span class="line">TI = 0</span><br><span class="line">Index = 4</span><br></pre></td></tr></table></figure><p>(2) 查表得到段描述符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TI = 0 所以查GDT表</span><br><span class="line"></span><br><span class="line">Index = 4 找到对应的段描述符</span><br><span class="line"></span><br><span class="line">四种情况可以跳转：代码段、调用门、TSS任务段、任务门</span><br></pre></td></tr></table></figure><p>(3) 权限检查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果是非一致代码段，要求:CPL == DPL 并且 RPL &lt;= DPL</span><br><span class="line"></span><br><span class="line">如果是一致代码段，要求:CPL &gt;= DPL</span><br></pre></td></tr></table></figure><p>(4) 加载段描述符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过上面的权限检查后，CPU会将段描述符加载到CS段寄存器中.</span><br></pre></td></tr></table></figure><p>(5) 代码执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CPU将 CS.Base + Offset 的值写入EIP 然后执行CS:EIP处的代码，段间跳转结束.</span><br></pre></td></tr></table></figure><p>3、总结</p><p>对于一致代码段:也就是共享的段</p><ul><li>特权级高的程序不允许访问特权级低的数据：核心态不允许访问用户态的数据</li><li>特权级低的程序可以访问到特权级高的数据，但特权级不会改变：用户态还是用户态</li></ul><p>对于普通代码段：也就是非一致代码段</p><ul><li>只允许同级访问</li><li>绝对禁止不同级别的访问：核心态不是用户态，用户态也不是核心态.</li></ul><p>直接对代码段进行JMP 或者 CALL的操作，无论目标是一致代码段还是非一致代码段，CPL都不会发生改变.如果要提升CPL的权限，只能通过<strong>调用门</strong>.</p><h2 id="3、实验"><a href="#3、实验" class="headerlink" title="3、实验"></a>3、实验</h2><h3 id="3-1-构造段描述符"><a href="#3-1-构造段描述符" class="headerlink" title="3.1 构造段描述符"></a>3.1 构造段描述符</h3><p>找一个非一致代码段描述符,复制一份，写入到GDT表中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kd&gt; r gdtr</span><br><span class="line">gdtr=8003f000</span><br><span class="line">kd&gt; dq 8003f000</span><br><span class="line">8003f000  00000000`00000000 00cf9b00`0000ffff</span><br><span class="line">8003f010  00cf9300`0000ffff 00cffb00`0000ffff</span><br><span class="line">8003f020  00cff300`0000ffff 80008b04`200020ab</span><br><span class="line">8003f030  ffc093df`f0000001 0040f300`00000fff</span><br><span class="line">8003f040  0000f200`0400ffff 00000000`00000000</span><br><span class="line">8003f050  80008954`b1000068 80008954`b1680068</span><br><span class="line">8003f060  00009302`2f40ffff 0000920b`80003fff</span><br><span class="line">8003f070  ff0092ff`700003ff 80009a40`0000ffff</span><br></pre></td></tr></table></figure><p>将 <strong>00cffb00&#96;0000ffff</strong> 数据写如某个P位为0的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kd&gt; eq 8003f048 00cffb00`0000ffff(用内核工具查看新增是否成功）</span><br></pre></td></tr></table></figure><h3 id="3-2-OD中进行测试"><a href="#3-2-OD中进行测试" class="headerlink" title="3.2 OD中进行测试"></a>3.2 OD中进行测试</h3><p>在OD中，执行跨段跳转  JMP FAR 004B:0041840D</p><p>成功的话，CS段寄存器就会修改成4B</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/27/vOK03qIJuFb3wCZy7sMf1727442637455.png" alt="image-20240927211027897"></p><h3 id="3-3-修改段描述符的权限级别-并再次在OD中进行测试"><a href="#3-3-修改段描述符的权限级别-并再次在OD中进行测试" class="headerlink" title="3.3 修改段描述符的权限级别,并再次在OD中进行测试"></a>3.3 修改段描述符的权限级别,并再次在OD中进行测试</h3><p>将00cffb00`0000ffff 改为00cf9b00`0000ffff在OD中，执行跨段跳转  JMP FAR 004B:0041840D</p><h3 id="3-4-将该段描述符的属性更改为一致代码段"><a href="#3-4-将该段描述符的属性更改为一致代码段" class="headerlink" title="3.4 将该段描述符的属性更改为一致代码段."></a>3.4 将该段描述符的属性更改为一致代码段.</h3><p>将00cffb00`0000ffff 改为00cf9f00`0000ffff在OD中，执行跨段跳转  JMP FAR 004B:0041840D</p><p>如果是一致代码段，要求:CPL &gt;&#x3D; DPL (<strong>当前同样可以访问</strong>)</p><p>CPL:3</p><p>DPL:0</p><h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><p>1、为了对数据进行保护，普通代码段是禁止不同级别进行访问的。用户态的代码不能访问内核的数据，同样，内核态的代码也不能访问用户态的数据.</p><p>2、如果想提供一些通用的功能，而且这些功能并不会破坏内核数据，那么可以选择一致代码段，这样低级别的程序可以在不提升CPL权限等级的情况下即可以访问.</p><p>3、如果想访问普通代码段，只有通过“调用门”等提示CPL权限，才能访问。</p><h1 id="长调用与短调用"><a href="#长调用与短调用" class="headerlink" title="长调用与短调用"></a>长调用与短调用</h1><p>我们通过<strong>JMP FAR</strong>可以<strong>实现段间</strong>的跳转，如果要实现跨段的调用就必须要学习<strong>CALL FAR</strong>，也就是<strong>长调用</strong>.</p><p><strong>CALL FAR</strong>比<strong>JMP FAR</strong>要复杂，JMP并<strong>不影响堆栈</strong>,但CALL指令会影响.</p><h2 id="1、短调用"><a href="#1、短调用" class="headerlink" title="1、短调用"></a>1、短调用</h2><p>指令格式：CALL  立即数&#x2F;寄存器&#x2F;内存</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/26/H0ZwWZk6Jpe6yRZRNNcK1727361345620.png" alt="image-20240926223503339"></p><p>发生改变的寄存器：ESP EIP</p><h2 id="2、长调用-跨段不提权"><a href="#2、长调用-跨段不提权" class="headerlink" title="2、长调用(跨段不提权)"></a>2、长调用(跨段不提权)</h2><p>指令格式：CALL  CS:EIP(EIP是废弃的)</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/26/NMPihSWSaCmDWoeer6uv1727361361024.png" alt="image-20240926223600844"></p><p>发生改变的寄存器：ESP EIP  CS</p><h2 id="3、长调用-跨段并提权"><a href="#3、长调用-跨段并提权" class="headerlink" title="3、长调用(跨段并提权)"></a>3、长调用(跨段并提权)</h2><p>指令格式：CALL  CS:EIP(EIP是废弃的)</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/26/clDOXb1AIUYYohoICGDg1727361380630.png" alt="image-20240926223620406"></p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/26/4UFV97QwOwh5C5hWbqRU1727361399616.png" alt="image-20240926223639418"></p><p>发生改变的寄存器：ESP EIP  CS SS</p><h2 id="4、总结-1"><a href="#4、总结-1" class="headerlink" title="4、总结"></a>4、总结</h2><ol><li>跨段调用时，一旦有权限切换，就会切换堆栈.</li><li>CS的权限一旦改变，SS的权限也要随着改变，CS与SS的等级必须一样.</li><li>JMP FAR 只能跳转到同级<strong>非一致代码段</strong>，但CALL FAR可以通过调用门提权，提升CPL的权限.</li></ol><h1 id="调用门"><a href="#调用门" class="headerlink" title="调用门"></a>调用门</h1><h2 id="1、调用门执行流程"><a href="#1、调用门执行流程" class="headerlink" title="1、调用门执行流程"></a>1、调用门执行流程</h2><p>指令格式：CALL  CS:EIP(EIP是废弃的)</p><p>执行步骤：</p><ol><li>根据CS的值 查GDT表，找到对应的段描述符  这个描述符是一个调用门.</li><li>在调用门描述符中存储另一个代码段段的选择子.</li><li>选择子指向的段  <strong>段.Base + 偏移地址</strong> 就是真正要执行的地址.</li></ol><h2 id="2、门描述符"><a href="#2、门描述符" class="headerlink" title="2、门描述符"></a>2、门描述符</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/17/Wr6DYYDdWiPGLz6xE55W1729174532995.png" alt="image-20240928111147890"></p><p>（16-31位）offset+（0-15位）offset &#x3D; 跳转到函数执行的位置</p><h2 id="3、构造一个调用门（无参-提权）"><a href="#3、构造一个调用门（无参-提权）" class="headerlink" title="3、构造一个调用门（无参  提权）"></a>3、构造一个调用门（无参  提权）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">第一步：构造大概的值</span><br><span class="line">DPL:3环 == 11</span><br><span class="line">0000 0000 0000 0000 1110 1100(调用门固定值) 0000 0000 == 0000ec00</span><br><span class="line">0000 0000 0000 1000 0000 0000 0000 0000 == 00080000</span><br><span class="line">0000ec00`00080000</span><br><span class="line">第二步：拿到方法地址</span><br><span class="line">401000</span><br><span class="line">0040ec00`00081000</span><br><span class="line">第三步：eq 80b99048 0040ec00`00081000</span><br><span class="line">第四步：运行程序</span><br></pre></td></tr></table></figure><h3 id="3-1-代码测试"><a href="#3-1-代码测试" class="headerlink" title="3.1 代码测试"></a>3.1 代码测试</h3><p>步骤一：代码测试，并观察堆栈与寄存器的变化记录执行前的寄存器值：SS   ESP CS </p><p><strong>执行前：</strong></p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/29/yDdxxb3jn4PQUPdk70Cu1727576118622.png" alt="image-20240929101518189"></p><p><strong>执行后：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eax=00000048 ebx=7ffd9000 ecx=00000000 </span><br><span class="line">edx=00000001 esi=00000000 edi=0012fe5c</span><br><span class="line">eip=00401000 esp=a69f5ca0 ebp=0012fe5c iopl=0         </span><br><span class="line">nv up ei pl nz na pe nc</span><br><span class="line"></span><br><span class="line">cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00000206</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>变化：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CS:1b-&gt;08 </span><br><span class="line"></span><br><span class="line">ESP:12fd7c-&gt;a682bca0(高地址)</span><br><span class="line"></span><br><span class="line">SS:23-&gt;10 </span><br></pre></td></tr></table></figure><p><strong>堆栈：</strong></p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/29/gEUPyj7DpBodvihUdqwq1727576828262.png" alt="image-20240929102708081"></p><p>步骤二：在测试代码中加入特权指令并读取高2G内存</p><p>测试代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">BYTE GDT[<span class="number">6</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">DWORD dwH2Gvalue;</span><br><span class="line"><span class="type">void</span> _declspec(naked) <span class="built_in">getRegister</span>()&#123;</span><br><span class="line">__asm&#123;</span><br><span class="line">pushad</span><br><span class="line">pushfd</span><br><span class="line"></span><br><span class="line">mov eax,<span class="number">0x80b9900c</span></span><br><span class="line">mov ebx,[eax]</span><br><span class="line">mov dwH2Gvalue,ebx</span><br><span class="line">sgdt GDT <span class="comment">//获取GDT表地址</span></span><br><span class="line"></span><br><span class="line">popfd</span><br><span class="line">popad</span><br><span class="line"></span><br><span class="line">retf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printfRegister</span><span class="params">()</span></span>&#123;</span><br><span class="line">DWORD GDT_ADDR = *(PDWORD)(&amp;GDT[<span class="number">2</span>]);</span><br><span class="line">WORD GDT_LIMIT = *(PWORD)(&amp;GDT[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x %x %x\n&quot;</span>,dwH2Gvalue,GDT_ADDR,GDT_LIMIT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">testfun1</span><span class="params">()</span></span>&#123;</span><br><span class="line">__asm&#123;</span><br><span class="line">mov ebx,ebx</span><br><span class="line">mov ebx,ebx</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">*(DWORD*)&amp;buf[<span class="number">0</span>] = <span class="number">0x12345678</span>;</span><br><span class="line">*(WORD*)&amp;buf[<span class="number">4</span>] = <span class="number">0x48</span>;</span><br><span class="line"></span><br><span class="line">__asm&#123;</span><br><span class="line">call fword ptr[buf]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printfRegister</span>();</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _tmain(<span class="type">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">testfun1</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/29/xDB3Wymf8q1IxdeCNyh71727577654131.png" alt="image-20240929104053905"></p><h2 id="4、构造一个调用门（有参-提权）"><a href="#4、构造一个调用门（有参-提权）" class="headerlink" title="4、构造一个调用门（有参  提权）"></a>4、构造一个调用门（有参  提权）</h2><p>调用门描述符：</p><p>0040EC0<strong>3</strong>&#96;00081030 （三个参数）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kd&gt;eq 8003f048 0040EC03`00081030</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo03.cpp : 定义控制台应用程序的入口点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD x,y,z;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _declspec(naked) <span class="built_in">getRegister</span>()&#123;</span><br><span class="line">__asm&#123;</span><br><span class="line">pushad</span><br><span class="line">pushfd</span><br><span class="line"></span><br><span class="line">mov eax,[esp<span class="number">+0x24</span><span class="number">+0x8</span><span class="number">+0x8</span>]</span><br><span class="line">mov dword ptr ds:[x],eax</span><br><span class="line"></span><br><span class="line">mov eax,[esp<span class="number">+0x24</span><span class="number">+0x8</span><span class="number">+0x4</span>]</span><br><span class="line">mov dword ptr ds:[y],eax</span><br><span class="line"></span><br><span class="line">mov eax,[esp<span class="number">+0x24</span><span class="number">+0x8</span><span class="number">+0x0</span>]</span><br><span class="line">mov dword ptr ds:[z],eax</span><br><span class="line">        </span><br><span class="line">popfd</span><br><span class="line">popad</span><br><span class="line"></span><br><span class="line">retf <span class="number">0xc</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printfRegister</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x %x %x\n&quot;</span>,x,y,z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">testfun1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">*(DWORD*)&amp;buf[<span class="number">0</span>] = <span class="number">0x12345678</span>;</span><br><span class="line">*(WORD*)&amp;buf[<span class="number">4</span>] = <span class="number">0x68</span>;</span><br><span class="line"></span><br><span class="line">__asm&#123;</span><br><span class="line">push <span class="number">1</span></span><br><span class="line">push <span class="number">2</span></span><br><span class="line">push <span class="number">3</span></span><br><span class="line">call fword ptr[buf]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printfRegister</span>();</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _tmain(<span class="type">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">testfun1</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功获取到3个传入的参数</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/30/Kt8jetaX0fvdstqzSYUT1727665410690.png" alt="image-20240930110250565"></p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><ol><li>当通过门，<strong>权限不变</strong>的时候，只会PUSH<strong>两个值</strong>：<strong>CS和返回地址</strong>新的CS的值由调用门决定</li><li>当通过门，<strong>权限改变</strong>的时候，会PUSH<strong>四个值</strong>：<strong>SS、ESP、CS和返回地址</strong>   新的<strong>CS的值由调用门</strong>决定  新的<strong>SS和ESP</strong>由<strong>TSS</strong>提供</li><li>通过门调用时，要执行哪行代码有调用门决定，但使用RETF返回时，由堆栈中压入的值决定，这就是说，进门时只能按指定路线走，出门时可以翻墙(只要改变堆栈里面的值就可以想去哪去哪)</li><li>可不可以再建个门出去呢?也就是用Call  当然可以了 前门进 后门出</li></ol><p></p><h1 id="中断门"><a href="#中断门" class="headerlink" title="中断门"></a>中断门</h1><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>系统调用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">大家在开发应用程序时都会使用到Windows提供的API，这些API在执行的过程中需要从3环一步一步进入到0环，这一过程就是系统调用，在这个过程中也用到了中断门（一些比较老的API使用的是中断门，但是新API中使用的都是快速调用）</span><br></pre></td></tr></table></figure><ul><li>调试</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">大家使用OD调试程序时候会使用断点，断点本质上就是在你选中的这一行中写入一个字节0xCC，也就是INT 3指令，这个指令就是用来执行中断门的。中断门也有一张表，我们称之为IDT（中断描述符表），与GDT一样，IDT也是由一系列描述符组成的，每个描述符占8字节，需要注意的是IDT表中的第一个元素不是NULL（GDT是）</span><br></pre></td></tr></table></figure><h2 id="1、IDT"><a href="#1、IDT" class="headerlink" title="1、IDT"></a>1、IDT</h2><p>IDT即中断描述符表,同GDT一样，IDT也是由一系列描述符组成的，每个描述符占8个字节。但要注意的是，IDT表中的第一个元素不是NULL。在windbg中查看IDT表的基址和长度</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/30/lXbPi73p6xbUDvXFmwb01727672653729.png" alt="image-20240930130413487"></p><h2 id="2、IDT表的构成"><a href="#2、IDT表的构成" class="headerlink" title="2、IDT表的构成"></a>2、IDT表的构成</h2><p>IDT表可以包含3种门描述符：</p><ul><li>任务门描述符</li><li>中断门描述符</li><li>陷阱门描述符</li></ul><h2 id="3、中断门描述符结构"><a href="#3、中断门描述符结构" class="headerlink" title="3、中断门描述符结构"></a>3、中断门描述符结构</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/30/FBiQhnxsDRtKLOyDNhKN1727672735493.png" alt="image-20240930130535215"></p><p>当<strong>8-12位</strong>的值是<strong>01110</strong>则是一个<strong>中断门</strong></p><p>函数执行：401030</p><p>0040ee00&#96;00081030</p><h2 id="4、构造一个中断门"><a href="#4、构造一个中断门" class="headerlink" title="4、构造一个中断门"></a>4、构造一个中断门</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//INT index 指令触发寻找中断门</span></span><br><span class="line"><span class="comment">//当前（写入的地址-idt首地址）/ 8 = index索引 16进制 </span></span><br><span class="line">__asm&#123;</span><br><span class="line">    push fs</span><br><span class="line">    INT <span class="number">0x22</span></span><br><span class="line">    pop fs</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、中断执行"><a href="#5、中断执行" class="headerlink" title="5、中断执行"></a>5、中断执行</h2><p>INTX<br>其中，X是索引，<strong>X*8+IDT的基址</strong>就是具体的中断门描述符</p><h2 id="6、中断返回"><a href="#6、中断返回" class="headerlink" title="6、中断返回"></a>6、中断返回</h2><p>INT N指令：</p><ol><li><p>在<strong>没有权限切换时</strong>，会向堆栈<strong>PUSH 3</strong>个值，分别是：<strong>CS EFLAG EIP</strong>（返回地址）</p></li><li><p>在<strong>有权限切换时</strong>，会向堆栈<strong>PUSH 5</strong>个值，分别是：<strong>SS ESP EFLAG CS EIP</strong>（返回地址）</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/02/KWvP6brQkxNkfez6mEC51727873709073.png" alt="image-20241002205508651"></p></li></ol><p>在中断门中，<strong>不能通过RETF返回</strong>，而应该通过<strong>IRET&#x2F;IRETD</strong>指令返回</p><h1 id="陷阱门"><a href="#陷阱门" class="headerlink" title="陷阱门"></a>陷阱门</h1><h2 id="1、陷阱门描述符结构"><a href="#1、陷阱门描述符结构" class="headerlink" title="1、陷阱门描述符结构"></a>1、陷阱门描述符结构</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/30/TtzQriS89EmV91AhknSR1727672874147.png" alt="image-20240930130753905"></p><p>当<strong>8-12位</strong>的值是<strong>01111</strong>则是一个<strong>陷阱门</strong></p><h2 id="2、构造一个陷阱门"><a href="#2、构造一个陷阱门" class="headerlink" title="2、构造一个陷阱门"></a>2、构造一个陷阱门</h2><p>构造一个陷阱门（0040EF00 00081030）</p><p>0000ef00 00080000</p><p>0000 0000 0000 0000 1110 1111 0000 0000</p><p>写入到IDT表中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eq&gt;8003f500 0040EF00`0008103</span><br></pre></td></tr></table></figure><p>执行陷阱门</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__asm&#123;</span><br><span class="line">    INT 0x32</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、陷阱门与中断门的区别"><a href="#3、陷阱门与中断门的区别" class="headerlink" title="3、陷阱门与中断门的区别"></a>3、陷阱门与中断门的区别</h2><p>中断门执行时，将IF位（中断标志）清零,但陷阱门不会。</p><h1 id="任务段"><a href="#任务段" class="headerlink" title="任务段"></a>任务段</h1><p>在调用门、中断门与陷阱门中，一旦出现权限切换，那么就会有堆栈的切换。而且，由于CS的CPL发生改变，也导致了SS也必须要切换。</p><p>切换时，会有新的ESP和SS(CS是由中断门或者调用门指定)这2个值从哪里来的呢？<strong>TSS (Task-state segment )，任务状态段.</strong></p><h2 id="1、TSS的结构"><a href="#1、TSS的结构" class="headerlink" title="1、TSS的结构"></a>1、TSS的结构</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/30/zFWvIRU2iyFyxWS9Ad7v1727701379679.png" alt="image-20240930210259383"></p><p>大小104字节</p><h2 id="2、TSS的作用"><a href="#2、TSS的作用" class="headerlink" title="2、TSS的作用"></a>2、TSS的作用</h2><p>不要把TSS与“任务切换”联系到一起</p><p>TSS的意义就在于<strong>可以同时换掉”一堆”寄存器</strong></p><h2 id="3、TR段寄存器取值"><a href="#3、TR段寄存器取值" class="headerlink" title="3、TR段寄存器取值"></a>3、TR段寄存器取值</h2><p>CPU如何找到TSS呢?  通过<strong>TR段寄存器</strong>，base找到TSS内存 Limit指的是TSS内存大小，TR段寄存器值来自于GDT表，GDT表里的TSS段描述符</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/30/BnuP5qcHZBwLYcgSi9NJ1727701491032.png" alt="image-20240930210450817"></p><h2 id="4、TSS段描述符-TSS-Descriptor"><a href="#4、TSS段描述符-TSS-Descriptor" class="headerlink" title="4、TSS段描述符(TSS Descriptor)"></a>4、TSS段描述符(TSS Descriptor)</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/30/Ds8KSWImUOVrDsg0fZ5h1727701602037.png" alt="image-20240930210641733"></p><h2 id="5、TR寄存器读写"><a href="#5、TR寄存器读写" class="headerlink" title="5、TR寄存器读写"></a>5、TR寄存器读写</h2><ol><li>将TSS段描述符加载到TR寄存器</li></ol><p>指令：LTR</p><p>说明：</p><ul><li><p>用LTR指令去装载的话仅仅是改变TR寄存器的值(96位) 并没有真正改变TSS  </p></li><li><p>LTR指令只能在系统层使用</p></li><li><p>加载后TSS段描述符会状态位会发生改变</p></li></ul><h2 id="6、修改TR寄存器"><a href="#6、修改TR寄存器" class="headerlink" title="6、修改TR寄存器"></a>6、修改TR寄存器</h2><ul><li>在Ring0 我们可以通过<strong>LTR指令</strong>去修改TR寄存器</li><li>在Ring3 我们可以通过<strong>CALL FAR</strong> 或者 <strong>JMP FAR</strong>指令来修改</li></ul><p>用JMP去访问一个代码段的时候，改变的是CS和EIP ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JMP 0x48:0x123456  如果0x48是代码段  </span><br><span class="line">执行后：CS--&gt;0x48  EIP--&gt;0x123456</span><br></pre></td></tr></table></figure><p>用JMP去访问一个任务段的时候：</p><p>如果0x48是TSS段描述符，先修改TR寄存器，在用TR.Base指向的TSS中的值修改当前的寄存器</p><p><strong>注意：</strong></p><p>如果你用<strong>JMP</strong>的话<strong>Previous Task Link的值不变</strong>和<strong>NT位不变</strong>，没有人给你填充初始值多少现在就多少，如果用<strong>Call</strong>那就会写成原来那个<strong>TSS段的选择子</strong>和<strong>NT位置1</strong></p><p>NT &#x3D; 0 IRET（堆栈取 中断返回）</p><p>NT &#x3D; 1 IRET （TSS:PTL 不是中断返回）</p><h2 id="7、实现任务切换"><a href="#7、实现任务切换" class="headerlink" title="7、实现任务切换"></a>7、实现任务切换</h2><ol><li>构造完整的TSS</li><li>构造TSS段描述符</li><li>使用CALL FAR&#x2F;JMP FAR指令修改TR寄存器</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> o_eax, n_esp;</span><br><span class="line"><span class="type">short</span> n_cs, n_ss;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> __declspec(naked) <span class="built_in">GetValue</span>() &#123;</span><br><span class="line">    <span class="comment">// 将寄存器保存到全局变量中</span></span><br><span class="line">    _asm &#123;</span><br><span class="line">        mov o_eax, eax</span><br><span class="line">        mov n_esp, esp</span><br><span class="line">        mov ax, cs</span><br><span class="line">        mov n_cs, ax</span><br><span class="line">        mov ax, ss</span><br><span class="line">        mov n_ss, ax</span><br><span class="line">        mov eax, o_eax</span><br><span class="line">        iretd</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> stack[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 栈</span></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">6</span>] = &#123;<span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x4B</span>, <span class="number">0x0</span>&#125;; <span class="comment">// 选择子</span></span><br><span class="line">    <span class="type">int</span> iCr3 = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Input: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%x&quot;</span>, &amp;iCr3);</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line"> </span><br><span class="line">    DWORD tss[<span class="number">0x68</span>] = &#123;</span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// Previous Task Link</span></span><br><span class="line">        <span class="comment">// 不同权限对应的ESP、SS，如果不涉及到权限切换所以可以将这些寄存器的值全部填0</span></span><br><span class="line">        <span class="number">0x00000000</span>, <span class="comment">// ESP0</span></span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// SS0</span></span><br><span class="line">        <span class="number">0x00000000</span>, <span class="comment">// ESP1</span></span><br><span class="line">        <span class="number">0x00000000</span>, <span class="comment">// SS1</span></span><br><span class="line">        <span class="number">0x00000000</span>, <span class="comment">// ESP2</span></span><br><span class="line">        <span class="number">0x00000000</span>, <span class="comment">// SS2</span></span><br><span class="line">        (DWORD)iCr3, <span class="comment">// Cr3，与页的知识有关，必须要赋值</span></span><br><span class="line">        <span class="number">0x00401020</span>,    <span class="comment">// EIP，下一次执行代码的位置，必须要赋值，在代码中就是GetValue函数的地址</span></span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// EFLAGS</span></span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// EAX</span></span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// ECX</span></span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// EDX</span></span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// EBX</span></span><br><span class="line">        (DWORD)stack, <span class="comment">// ESP，任务切换时也需要切换栈，所以在代码中我们可以声明一个数组，将其地址作为一块栈</span></span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// EBP</span></span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// ESI</span></span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// EDI</span></span><br><span class="line">        <span class="number">0x00000023</span>,    <span class="comment">// ES</span></span><br><span class="line">        <span class="number">0x00000008</span>, <span class="comment">// CS，切到0环的代码段描述符</span></span><br><span class="line">        <span class="number">0x00000010</span>,    <span class="comment">// SS，CS与SS需要保持一致</span></span><br><span class="line">        <span class="number">0x00000023</span>,    <span class="comment">// DS</span></span><br><span class="line">        <span class="number">0x00000030</span>,    <span class="comment">// FS，切到0环就是0x30，3环就是0x3B</span></span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// GS，Windows没有使用这个段寄存器所以永远是0</span></span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// LDT，填0</span></span><br><span class="line">        <span class="number">0x20ac0000</span>    <span class="comment">// IO_MAP，Windows2000以后不用了，默认值</span></span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    _asm &#123;</span><br><span class="line">        push fs</span><br><span class="line">        call far fword ptr[buffer] <span class="comment">// 长调用</span></span><br><span class="line">        pop fs</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 输出寄存器的值证明完成了任务切换</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ESP: %x, CS: %x, SS: %x \n&quot;</span>, n_esp, n_cs, n_ss);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据TSS段描述符的结构构造描述符，首先获取TSS的地址，在代码中下断点然后查看地址即可：其地址为0x0012fd70</p><p>我们就得出对应TSS段描述符中Base的值，接着Limit就是TSS的大小0x68，DPL为3（3环程序访问）</p><p>Type域为0x9即表示当前描述符没有被加载过。</p><p>在Windbg中断点输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kd&gt; !process 0 0</span><br></pre></td></tr></table></figure><p>指令找到当前的程序获取Cr3的值填入到程序中</p><p>最终得出TSS段描述符为：</p><p>构造TSS段描述符：XX00e9XX&#96;XXXX0068</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tss:0x0012fc2c</span><br><span class="line">eq 8003f0c0 0000e912`fc2c0068</span><br><span class="line"></span><br><span class="line">cr3:bf3915e0 getValue 4113d0</span><br></pre></td></tr></table></figure><p>接着我们使用eq指令在Windbg中向GDT表中写入我们构造好的TSS段描述符：</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/07/KVPM6rvgNMFV4RVM17IW1728277738860.png" alt="image-20241007130858507"></p><p>通过windbg寄存器我们可以看到<strong>EIP,ESP,CS,SS</strong>变成了我们设置的值</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/06/6KYUZZx4ktu1GyYWmOak1728229374094.png" alt="image-20241006233017065"></p><h1 id="任务门"><a href="#任务门" class="headerlink" title="任务门"></a>任务门</h1><h2 id="1、任务门描述符"><a href="#1、任务门描述符" class="headerlink" title="1、任务门描述符"></a>1、任务门描述符</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/07/8U3GIHx0xIIpIhNHfYQq1728268454890.png" alt="image-20241007103357569"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">构造任务门：0000 e500 00c3 0000</span><br><span class="line">&gt;eq 8003f500 0000e500`00c30000</span><br></pre></td></tr></table></figure><h2 id="2、任务门执行过程："><a href="#2、任务门执行过程：" class="headerlink" title="2、任务门执行过程："></a>2、任务门执行过程：</h2><ol><li><p>INT N</p></li><li><p>查IDT表，找到中断门描述符</p></li><li><p>通过中断门描述符，查GDT表，找到任务段描述符</p></li><li><p>使用TSS段中的值修改寄存器</p></li><li><p>IRETD返回</p></li></ol><h2 id="3、代码"><a href="#3、代码" class="headerlink" title="3、代码"></a>3、代码</h2><p>段选择子一定要计算正确</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">idt <span class="number">0x20</span> 构造中断门</span><br><span class="line">eq <span class="number">8003</span>f500 <span class="number">0000e500</span>`<span class="number">004</span>b0000</span><br><span class="line">gdt <span class="number">0x4b</span> 构造任务门 <span class="number">0100</span> <span class="number">1011</span> RPL：<span class="number">3</span>   </span><br><span class="line">eq <span class="number">8003</span>f048 <span class="number">0000e912</span>`fd700068 </span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo07.cpp : Defines the entry point for the console application.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line">DWORD dwOK,dwESP,dwCS;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> __declspec(naked) <span class="built_in">GetValue</span>() &#123;</span><br><span class="line">    <span class="comment">// 将寄存器保存到全局变量中</span></span><br><span class="line">dwOK = <span class="number">1</span>;</span><br><span class="line">_asm &#123;</span><br><span class="line">mov eax,esp</span><br><span class="line">mov dwESP,eax</span><br><span class="line">mov ax,cs</span><br><span class="line">mov word ptr[dwCS],ax</span><br><span class="line"></span><br><span class="line">iretd</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> stack[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 栈</span></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">6</span>] = &#123;<span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0xC0</span>, <span class="number">0x0</span>&#125;; <span class="comment">// 选择子</span></span><br><span class="line">    <span class="type">int</span> iCr3 = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Input: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%x&quot;</span>, &amp;iCr3);</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line"></span><br><span class="line">DWORD tss[<span class="number">0x68</span>] = &#123;</span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// Previous Task Link</span></span><br><span class="line"><span class="comment">// 不同权限对应的ESP、SS，如果不涉及到权限切换所以可以将这些寄存器的值全部填0</span></span><br><span class="line"><span class="number">0x00000000</span>, <span class="comment">// ESP0</span></span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// SS0</span></span><br><span class="line"><span class="number">0x00000000</span>, <span class="comment">// ESP1</span></span><br><span class="line"><span class="number">0x00000000</span>, <span class="comment">// SS1</span></span><br><span class="line"><span class="number">0x00000000</span>, <span class="comment">// ESP2</span></span><br><span class="line"><span class="number">0x00000000</span>, <span class="comment">// SS2</span></span><br><span class="line">(DWORD)iCr3, <span class="comment">// Cr3，与页的知识有关，必须要赋值</span></span><br><span class="line">(ULONG)GetValue,    <span class="comment">// EIP，下一次执行代码的位置，必须要赋值，在代码中就是GetValue函数的地址</span></span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// EFLAGS</span></span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// EAX</span></span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// ECX</span></span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// EDX</span></span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// EBX</span></span><br><span class="line">(DWORD)stack, <span class="comment">// ESP，任务切换时也需要切换栈，所以在代码中我们可以声明一个数组，将其地址作为一块栈</span></span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// EBP</span></span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// ESI</span></span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// EDI</span></span><br><span class="line"><span class="number">0x00000023</span>,    <span class="comment">// ES</span></span><br><span class="line"><span class="number">0x00000008</span>, <span class="comment">// CS，切到0环的代码段描述符</span></span><br><span class="line"><span class="number">0x00000010</span>,    <span class="comment">// SS，CS与SS需要保持一致</span></span><br><span class="line"><span class="number">0x00000023</span>,    <span class="comment">// DS</span></span><br><span class="line"><span class="number">0x00000030</span>,    <span class="comment">// FS，切到0环就是0x30，3环就是0x3B</span></span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// GS，Windows没有使用这个段寄存器所以永远是0</span></span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// LDT，填0</span></span><br><span class="line"><span class="number">0x20ac0000</span>    <span class="comment">// IO_MAP，Windows2000以后不用了，默认值</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;TSS:%x\n&quot;</span>,&amp;tss);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line">_asm &#123;</span><br><span class="line">PUSH fs</span><br><span class="line">        INT <span class="number">0X20</span> <span class="comment">// 长调用</span></span><br><span class="line">POP fs</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 输出寄存器的值证明完成了任务切换</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ESP: %x, CS: %x, dwOK: %x \n&quot;</span>, dwESP, dwCS, dwOK);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/07/8bKiXthV3rimrarhDWpU1728275715272.png" alt="image-20241007123514913"></p><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><h2 id="1、4GB空间"><a href="#1、4GB空间" class="headerlink" title="1、4GB空间"></a>1、4GB空间</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/08/5Z5pnViAPg3J2BOweGCM1728390412723.png" alt="image-20241008202635838"></p><h2 id="2、物理地址"><a href="#2、物理地址" class="headerlink" title="2、物理地址"></a>2、物理地址</h2><p>地址分为：线性地址、有效地址、物理地址</p><p>指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MOV eax,dword ptr ds:[0x12345678]</span><br></pre></td></tr></table></figure><p>0x12345678是属于<strong>有效地址</strong></p><p>ds.base+0x12345678 &#x3D; <strong>线性地址</strong></p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/08/LKXCn1fsd7zd5qKDjvyr1728390530624.png" alt="image-20241008202850335"></p><h2 id="3、物理在哪"><a href="#3、物理在哪" class="headerlink" title="3、物理在哪"></a>3、物理在哪</h2><p>每个进程<strong>都有</strong>一个CR3，(准确的说是都一个CR3的值，CR3本身是个寄存器，一个核，只有一套寄存器)</p><p>CR3指向<strong>一个物理页</strong>，一共<strong>4096字节</strong></p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/08/n8OTgsBNZHoo6Mnf1kXc1728390608743.png" alt="image-20241008203008475"></p><h2 id="4、设置分页方式"><a href="#4、设置分页方式" class="headerlink" title="4、设置分页方式"></a>4、设置分页方式</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/08/IELhIlCFpMemfDTyLMOS1728390680467.png" alt="image-20241008203120205"></p><p>将<strong>noexecute</strong> 改成 <strong>execute</strong></p><h2 id="5、如何寻找物理地址（10-10-12为例）"><a href="#5、如何寻找物理地址（10-10-12为例）" class="headerlink" title="5、如何寻找物理地址（10-10-12为例）"></a>5、如何寻找物理地址（10-10-12为例）</h2><p>10-10-12 一共32位，把一段地址拆分成三段10位 10位 12位</p><p>用notepad为例</p><p>第一步先在notepad中写入一个hello world字符串，然后使用CE进行搜索拿到字符串在进程中的地址</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/08/DILMxADdzyK8ixm2nJRD1728395216103.png" alt="image-20241008214655861"></p><p>第二步拆分地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">000AA750 hello world字符串在进程中地址</span><br><span class="line">第一级：0000 0000 00     0</span><br><span class="line">第二级：00 1010 1010     AA * 4 = 2A8</span><br><span class="line">第三级：750</span><br></pre></td></tr></table></figure><p>第三步windbg进行查看找到cr3的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DirBase:314b7000</span><br><span class="line">第一级：!dd cr3+0 = 314b7000+0</span><br><span class="line">第二级：!dd 3192d067+2A8 后面三位是属性使用时改成000</span><br><span class="line">第三级：!dd 319ed000+750</span><br><span class="line">!db 319ed000+750 可验证</span><br></pre></td></tr></table></figure><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/08/n0Fqj6QeO61jV0UAt96v1728395638354.png" alt="image-20241008215310139"></p><h1 id="PDE-PTE"><a href="#PDE-PTE" class="headerlink" title="PDE&#x2F;PTE"></a>PDE&#x2F;PTE</h1><h2 id="PDE和PTE介绍"><a href="#PDE和PTE介绍" class="headerlink" title="PDE和PTE介绍"></a>PDE和PTE介绍</h2><h3 id="1、PDE与PTE"><a href="#1、PDE与PTE" class="headerlink" title="1、PDE与PTE"></a>1、PDE与PTE</h3><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/08/EjZKLDijGZbnrSOdBkU61728396699049.png" alt="image-20241008221138790"></p><h3 id="2、指向相同物理页"><a href="#2、指向相同物理页" class="headerlink" title="2、指向相同物理页"></a>2、指向相同物理页</h3><ol><li>PTE可以没有物理页，且只能对应一个物理页</li><li>多个PTE也可以指向同一个物理页</li></ol><h3 id="3、实验-1"><a href="#3、实验-1" class="headerlink" title="3、实验"></a>3、实验</h3><p>查分0地址，观察PTE是否有物理页</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/10/oFPnasTRJaT0o3mZTDWj1728560982174.png" alt="image-20241010194913603"></p><p>向0地址读写数据</p><p>没有挂物理页之前向0地址写入不了数据</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/10/Q9MSk8uXQly3SxtL4xX21728561255881.png" alt="image-20241010195415642"></p><p>手动挂物理页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">x的线性地址：0x1245052</span><br><span class="line">先拆分</span><br><span class="line">0000 0001 00 10</span><br><span class="line">10 0100 0101 245 * 4 = 914</span><br><span class="line">052</span><br><span class="line"></span><br><span class="line">DirBase: 553aa000</span><br><span class="line">第一级：</span><br><span class="line">kd&gt; !dd 553aa000</span><br><span class="line">#553aa000 54ad6067 54a95067 00000000 00000000</span><br><span class="line">#553aa010 00000000 00000000 00000000 00000000</span><br><span class="line">#553aa020 00000000 00000000 00000000 00000000</span><br><span class="line">#553aa030 00000000 00000000 00000000 00000000</span><br><span class="line">#553aa040 00000000 00000000 00000000 00000000</span><br><span class="line">#553aa050 00000000 00000000 00000000 00000000</span><br><span class="line">#553aa060 00000000 00000000 00000000 00000000</span><br><span class="line">#553aa070 00000000 00000000 00000000 00000000</span><br><span class="line"></span><br><span class="line">第二级：</span><br><span class="line">kd&gt; !dd 54ad6000 + 914</span><br><span class="line">#54ad6914 54df5067 00000000 00000000 00000000</span><br><span class="line">#54ad6924 00000000 00000000 00000000 00000000</span><br><span class="line">#54ad6934 00000000 00000000 00000000 5576d067</span><br><span class="line">#54ad6944 5556f067 553b0067 00000000 00000000</span><br><span class="line">#54ad6954 00000000 00000000 00000000 00000000</span><br><span class="line">#54ad6964 00000000 00000000 00000000 00000000</span><br><span class="line">#54ad6974 00000000 00000000 00000000 0bb31025</span><br><span class="line">#54ad6984 0bb32025 00000000 00000000 00000000</span><br><span class="line"></span><br><span class="line">查询下0地址</span><br><span class="line">kd&gt; !dd 54ad6000</span><br><span class="line">#54ad6000 00000000 00000000 00000000 00000000</span><br><span class="line">#54ad6010 00000000 00000000 00000000 00000000</span><br><span class="line">#54ad6020 00000000 00000000 00000000 00000000</span><br><span class="line">#54ad6030 00000000 00000000 00000000 00000000</span><br><span class="line">#54ad6040 54e97067 00000000 00000000 00000000</span><br><span class="line">#54ad6050 00000000 00000000 00000000 00000000</span><br><span class="line">#54ad6060 00000000 00000000 00000000 00000000</span><br><span class="line">#54ad6070 00000000 00000000 00000000 00000000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">把当前x变量的物理页挂到0地址上</span><br><span class="line">kd&gt; !ed 54ad6000 54df5067</span><br></pre></td></tr></table></figure><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/10/FsSU6DnjN4Z7Ds622Wg81728562002027.png" alt="image-20241010200641755"></p><h2 id="PDE-PTE-属性"><a href="#PDE-PTE-属性" class="headerlink" title="PDE&#x2F;PTE 属性"></a>PDE&#x2F;PTE 属性</h2><h3 id="1、物理页的属性"><a href="#1、物理页的属性" class="headerlink" title="1、物理页的属性"></a>1、物理页的属性</h3><p>物理页的属性 &#x3D; PDE属性 &amp; PTE属性</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/10/vtQpUVZN57SBHaANIgUL1728566338534.png" alt="image-20241010211858304"></p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/10/zkjSN56LctzrSPqnSDvv1728566358327.png" alt="image-20241010211917981"></p><h3 id="2、P位"><a href="#2、P位" class="headerlink" title="2、P位"></a>2、P位</h3><p>PDE和PTE的P位<strong>如果为0</strong>，则当前的物理页是<strong>无效的</strong>，反之</p><h3 id="3、R-W位"><a href="#3、R-W位" class="headerlink" title="3、R&#x2F;W位"></a>3、R&#x2F;W位</h3><p>R&#x2F;W &#x3D; 0 只读</p><p>R&#x2F;W &#x3D; 1 可读可写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>,str);</span><br><span class="line">getchar();</span><br><span class="line"></span><br><span class="line">DWORD dwAddr = (DWORD)str;</span><br><span class="line"></span><br><span class="line">*(<span class="type">char</span>*)dwAddr = <span class="string">&#x27;M&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>已知上面代码在正常情况下str是只读的，后续是无法对它进行任何的修改操作的。会报错内存访问异常</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/10/EukWg5CVN7ypP6QawaLB1728566675871.png" alt="image-20241010212435527"></p><p>现在我们对R&#x2F;W位进行查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">0x420f94</span><br><span class="line">Dirbase:7f4fd000</span><br><span class="line">0000 0000 01 </span><br><span class="line">00 0010 0000 20*4=80</span><br><span class="line">f94</span><br><span class="line">第一级：</span><br><span class="line">kd&gt; !dd 7f4fd000</span><br><span class="line">#7f4fd000 7f57b067 7f7ba067 00000000 00000000</span><br><span class="line">#7f4fd010 00000000 00000000 00000000 00000000</span><br><span class="line">#7f4fd020 00000000 00000000 00000000 00000000</span><br><span class="line">#7f4fd030 00000000 00000000 00000000 00000000</span><br><span class="line">#7f4fd040 00000000 00000000 00000000 00000000</span><br><span class="line">#7f4fd050 00000000 00000000 00000000 00000000</span><br><span class="line">#7f4fd060 00000000 00000000 00000000 00000000</span><br><span class="line">#7f4fd070 00000000 00000000 00000000 00000000</span><br><span class="line">第二级：</span><br><span class="line">kd&gt; !dd 7f7ba000 + 80</span><br><span class="line">#7f7ba080 7c7e9025 00000000 00de4067 7f895067</span><br><span class="line">#7f7ba090 7fe65067 7eb52027 00000000 00000000</span><br><span class="line">#7f7ba0a0 00000000 00000000 00000000 00000000</span><br><span class="line">#7f7ba0b0 00000000 00000000 00000000 00000000</span><br><span class="line">#7f7ba0c0 7f8dc067 7f7dd067 7f5de067 7f8df067</span><br><span class="line">#7f7ba0d0 7f960067 7fe61067 00de2067 7fbe3067</span><br><span class="line">#7f7ba0e0 00000000 00000000 00000000 00000000</span><br><span class="line">#7f7ba0f0 00000000 00000000 00000000 00000000</span><br></pre></td></tr></table></figure><p>可以看到<code>7c7e9025</code>对应的二进制是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0111 1100 0111 1110 1001 0000 0010 0101  而第二位R/W：0 说明是只读权限</span><br></pre></td></tr></table></figure><p>现在我们修改<code>7c7e9025</code>-&gt;<code>7c7e9027</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0111 1100 0111 1110 1001 0000 0010 0111</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">kd&gt; !dd 7f7ba000 + 80</span><br><span class="line">#7f7ba080 7c7e9025 00000000 00de4067 7f895067</span><br><span class="line">#7f7ba090 7fe65067 7eb52027 00000000 00000000</span><br><span class="line">#7f7ba0a0 00000000 00000000 00000000 00000000</span><br><span class="line">#7f7ba0b0 00000000 00000000 00000000 00000000</span><br><span class="line">#7f7ba0c0 7f8dc067 7f7dd067 7f5de067 7f8df067</span><br><span class="line">#7f7ba0d0 7f960067 7fe61067 00de2067 7fbe3067</span><br><span class="line">#7f7ba0e0 00000000 00000000 00000000 00000000</span><br><span class="line">#7f7ba0f0 00000000 00000000 00000000 00000000</span><br><span class="line">kd&gt; !ed 7f7ba080 7c7e9027</span><br><span class="line">kd&gt; !dd 7f7ba000 + 80</span><br><span class="line">#7f7ba080 7c7e9027 00000000 00de4067 7f895067</span><br><span class="line">#7f7ba090 7fe65067 7eb52027 00000000 00000000</span><br><span class="line">#7f7ba0a0 00000000 00000000 00000000 00000000</span><br><span class="line">#7f7ba0b0 00000000 00000000 00000000 00000000</span><br><span class="line">#7f7ba0c0 7f8dc067 7f7dd067 7f5de067 7f8df067</span><br><span class="line">#7f7ba0d0 7f960067 7fe61067 00de2067 7fbe3067</span><br><span class="line">#7f7ba0e0 00000000 00000000 00000000 00000000</span><br><span class="line">#7f7ba0f0 00000000 00000000 00000000 00000000</span><br></pre></td></tr></table></figure><p>现在看看效果</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/10/5rUlUtc4KVv6ScBKCYCj1728567369260.png" alt="image-20241010213609008"></p><p>已经成功！！！！</p><h3 id="4、U-S-位"><a href="#4、U-S-位" class="headerlink" title="4、U&#x2F;S 位"></a>4、U&#x2F;S 位</h3><p>U&#x2F;S &#x3D; 0 特权用户</p><p>U&#x2F;S &#x3D; 1 普通用户</p><h3 id="5、P-S位"><a href="#5、P-S位" class="headerlink" title="5、P&#x2F;S位"></a>5、P&#x2F;S位</h3><p>只对<strong>PDE有意义</strong>，PS &#x3D;&#x3D; PageSize的意思</p><p>当PS&#x3D;&#x3D;1的时候 PDE直接指向物理页 无PTE,低22位是页内偏移。也就是说少一级偏移。</p><h3 id="6、A位"><a href="#6、A位" class="headerlink" title="6、A位"></a>6、A位</h3><p>是否被访问（读或者写）过  </p><p>A&#x3D;1 访问过 </p><blockquote><p>[!NOTE]</p><p>即使只访问一个字节也会导致PDE或者PTE置1</p></blockquote><h3 id="7、D位"><a href="#7、D位" class="headerlink" title="7、D位"></a>7、D位</h3><p>脏位：是否被写过   </p><p>0：没有被写过   </p><p>1：被写过</p><h1 id="页目录表基址"><a href="#页目录表基址" class="headerlink" title="页目录表基址"></a>页目录表基址</h1><h2 id="1、拆分C0300000"><a href="#1、拆分C0300000" class="headerlink" title="1、拆分C0300000"></a>1、拆分C0300000</h2><p>当前我们用DbgView程序为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">DirBase: 238ef000</span><br><span class="line"></span><br><span class="line">1100 0000 00 00 300 * 4 = C00</span><br><span class="line">11 0000 0000 300 * 4 = C00</span><br><span class="line">000</span><br><span class="line"></span><br><span class="line">kd&gt; !dd 238ef000   </span><br><span class="line">#238ef000 237e3067 2365a067 23a2e067 23a1c067 </span><br><span class="line">#238ef010 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef020 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef030 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef040 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef050 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef060 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef070 00000000 00000000 00000000 00000000</span><br><span class="line"></span><br><span class="line">kd&gt; !dd 238ef000 + C00 PDT</span><br><span class="line">#238efc00 238ef063 236f0063 00000000 09f55163 //PDE</span><br><span class="line">#238efc10 09f56163 09f57163 09f58163 09f59163</span><br><span class="line">#238efc20 09f5a163 09f5b163 09f5c163 09f5d163</span><br><span class="line">#238efc30 09f5e163 09f5f163 09f60163 09f61163</span><br><span class="line">#238efc40 09f62163 09f63163 09f64163 09f65163</span><br><span class="line">#238efc50 09f66163 09f67163 09f68163 09f69163</span><br><span class="line">#238efc60 09f6a163 09f6b163 09f2c163 09f2d163</span><br><span class="line">#238efc70 09f2e163 09f2f163 09f30163 09f31163</span><br><span class="line"></span><br><span class="line">kd&gt; !dd 238ef000 + C00 PTT</span><br><span class="line">#238efc00 238ef063 236f0063 00000000 09f55163 //PTE</span><br><span class="line">#238efc10 09f56163 09f57163 09f58163 09f59163</span><br><span class="line">#238efc20 09f5a163 09f5b163 09f5c163 09f5d163</span><br><span class="line">#238efc30 09f5e163 09f5f163 09f60163 09f61163</span><br><span class="line">#238efc40 09f62163 09f63163 09f64163 09f65163</span><br><span class="line">#238efc50 09f66163 09f67163 09f68163 09f69163</span><br><span class="line">#238efc60 09f6a163 09f6b163 09f2c163 09f2d163</span><br><span class="line">#238efc70 09f2e163 09f2f163 09f30163 09f31163</span><br><span class="line"></span><br><span class="line">kd&gt; !dd 238ef000</span><br><span class="line">#238ef000 237e3067 2365a067 23a2e067 23a1c067</span><br><span class="line">#238ef010 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef020 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef030 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef040 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef050 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef060 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef070 00000000 00000000 00000000 00000000</span><br></pre></td></tr></table></figure><p><strong>结论：C0300000存储的值就是PDT</strong></p><p>如果我们要访问第N个PDE，那么有如下<strong>公式：0xC0300000 + N*4</strong></p><h2 id="2、页目录表基址-XP系统-10-10-12分页模式"><a href="#2、页目录表基址-XP系统-10-10-12分页模式" class="headerlink" title="2、页目录表基址(XP系统 10-10-12分页模式)"></a>2、页目录表基址(XP系统 10-10-12分页模式)</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/11/HgPnOhamozV6l5oGK3Ea1728637589862.png" alt="image-20241011170520641"></p><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><ol><li>通过<strong>0xC0300000</strong>找到的<strong>物理页就是页目录表</strong></li><li>这个物理页即是<strong>页目录表本身也是页表</strong></li><li>页目录表是一张<strong>特殊的页表</strong>，每一项PTE指向的<strong>不是普通的物理页</strong>，而是<strong>指向其他的页表</strong></li><li>如果我们要<strong>访问第N个PDE</strong>，那么有如下公式：<strong>0xC0300000 + N*4</strong></li></ol><h1 id="页表基址"><a href="#页表基址" class="headerlink" title="页表基址"></a>页表基址</h1><h2 id="1、拆分C0000000-C0001000"><a href="#1、拆分C0000000-C0001000" class="headerlink" title="1、拆分C0000000 &#x2F; C0001000"></a>1、拆分C0000000 &#x2F; C0001000</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/11/oARaKWKx3PJEATdWyNeZ1728638528527.png" alt="image-20241011172208229"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">DirBase: 238ef000</span><br><span class="line">第一个PTT</span><br><span class="line">kd&gt; !dd 237e3000</span><br><span class="line">#237e3000 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3010 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3020 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3030 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3040 23764067 00000000 00000000 00000000</span><br><span class="line">#237e3050 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3060 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3070 00000000 00000000 00000000 00000000</span><br><span class="line"></span><br><span class="line">第二个PTT</span><br><span class="line">kd&gt; !dd 2365a000 </span><br><span class="line">#2365a000 238ee025 23951025 23b08025 239c9025</span><br><span class="line">#2365a010 23b0a025 23b8b025 23b4c025 2388d025</span><br><span class="line">#2365a020 2398e025 238cf025 00000000 238ad025</span><br><span class="line">#2365a030 00000000 239ef025 23830025 23931025</span><br><span class="line">#2365a040 00000000 23833025 23734025 237f5025</span><br><span class="line">#2365a050 236f6025 23677025 00000000 00000000</span><br><span class="line">#2365a060 00000000 00000000 00000000 00000000</span><br><span class="line">#2365a070 00000000 235a5025 23666025 00000000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C0000000</span><br><span class="line">11 0000 0000 300 * 4 = C00</span><br><span class="line">00 0000 0000 0</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">kd&gt; !dd 238ef000 + C00</span><br><span class="line">kd&gt; !dd 238ef000 + 0</span><br><span class="line">kd&gt; !dd 237e3000 </span><br><span class="line">#237e3000 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3010 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3020 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3030 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3040 23764067 00000000 00000000 00000000</span><br><span class="line">#237e3050 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3060 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3070 00000000 00000000 00000000 00000000</span><br><span class="line">用0xC0000000查出来的是第一张PTT表</span><br><span class="line"></span><br><span class="line">C0001000 </span><br><span class="line">11 0000 0000 300 * 4 = C00</span><br><span class="line">00 0000 0001 1 * 4 = 0</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">kd&gt; !dd 238ef000 + C00</span><br><span class="line">kd&gt; !dd 238ef000 + 4</span><br><span class="line">kd&gt; !dd 2365a000</span><br><span class="line">#2365a000 238ee025 23951025 23b08025 239c9025</span><br><span class="line">#2365a010 23b0a025 23b8b025 23b4c025 2388d025</span><br><span class="line">#2365a020 2398e025 238cf025 00000000 238ad025</span><br><span class="line">#2365a030 00000000 239ef025 23830025 23931025</span><br><span class="line">#2365a040 00000000 23833025 23734025 237f5025</span><br><span class="line">#2365a050 236f6025 23677025 00000000 00000000</span><br><span class="line">#2365a060 00000000 00000000 00000000 00000000</span><br><span class="line">#2365a070 00000000 235a5025 23666025 00000000</span><br><span class="line">用0xC0001000查出来的是第二张PTT表</span><br></pre></td></tr></table></figure><p>线性地址0xc0000000映射到第一个PTT表，0xC0000000到0xC0001000刚好相差0x1000相当于一个页，后续地址增量为4KB，对应不同的PTT表。 0xc0300000线性地址用于访问页目录表本身。掌握0xc0000000和0xc0300000两个地址等于掌握了进程内存的读写权限</p><p><strong>总结：</strong></p><ul><li>页表被映射到了从<strong>0xC0000000</strong>到<strong>0xC03FFFFF</strong>的<strong>4M地址</strong>空间</li><li>在这<strong>1024</strong>个表中有一张特殊的表：<strong>页目录表</strong></li><li>页目录被映射到了<strong>0xC0300000开始处的4K地址</strong>空间</li></ul><h2 id="2、总结"><a href="#2、总结" class="headerlink" title="2、总结"></a>2、总结</h2><p>PDI与PTI：10-10-12  （I就是Index）</p><p>访问页目录表的公式：0xC0300000 + PDI*4</p><p>访问页表的公式：0xC0000000 + PDI*4096 + PTI*4</p><h2 id="2-9-9-12分页"><a href="#2-9-9-12分页" class="headerlink" title="2-9-9-12分页"></a>2-9-9-12分页</h2><p>随着硬件的发展，这时候10-10-12分页的物理地址显然不够用，因此2-9-9-12分页随之产生。</p><h3 id="1、10-10-12分页划分"><a href="#1、10-10-12分页划分" class="headerlink" title="1、10-10-12分页划分"></a>1、10-10-12分页划分</h3><ul><li>先确定了页的大小 4K  所以后面的12位的功能就确定了。(4096 &#x3D; 2^12)</li><li>当初的物理内存比较小，所以4个字节的PTE就够了，加上页的尺寸是4K 所以一个页能存储1024个 PTE 也就是2的10次方 第二个10也就确定了。(4096&#x2F;4 &#x3D; 1024 &#x3D; 2^10)</li></ul><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/13/JrTI7hLQKgTmAb3TISHA1728824934503.png" alt="image-20241013210854043"></p><ul><li>剩下的10为PDI  10+10+12刚好32位</li></ul><h3 id="2、2-9-9-12分页划分"><a href="#2、2-9-9-12分页划分" class="headerlink" title="2、2-9-9-12分页划分"></a>2、2-9-9-12分页划分</h3><ul><li>页的大小是确定的，4KB不能随便改，所以12确定了</li><li>如果想增大物理内存的访问范围，就需要增大PTE，考虑对齐的因素，增加到8个字节</li></ul><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/13/0FoRASR5hqxrTI91KGua1728826070179.png" alt="image-20241013212749894"></p><ul><li>同理PDI也是2的9次方32，2-9-9-12 还差2位 所以就再做一级 叫PDPI</li></ul><h3 id="3、2-9-9-12分页结构"><a href="#3、2-9-9-12分页结构" class="headerlink" title="3、2-9-9-12分页结构"></a>3、2-9-9-12分页结构</h3><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/13/AtcWHzl3KwcymIHccf701728826495790.png" alt="image-20241013213455559"></p><p>PDPTE：Page-Directory-Point-Table  Entry页目录指针表项 每项占8个字节</p><h3 id="4、如何寻找物理地址（2-9-9-12为例）"><a href="#4、如何寻找物理地址（2-9-9-12为例）" class="headerlink" title="4、如何寻找物理地址（2-9-9-12为例）"></a>4、如何寻找物理地址（2-9-9-12为例）</h3><p>2-9-9-12 一共32位，把一段地址拆分成三段2位 9位 9位 12位</p><p>用notepad为例</p><p>第一步先在notepad中写入一个hello world字符串，然后使用CE进行搜索拿到字符串在进程中的地址</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/13/bun9GbE6RWztqGKoggzl1728826626971.png" alt="image-20241008214655861"></p><p>第二步拆分地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">000AA750 hello world字符串在进程中地址</span><br><span class="line">第一部分：00     0*8</span><br><span class="line">第一部分：00 0000 000  0*8</span><br><span class="line">第一部分：0 1010 1010 AA * 8 = 550</span><br><span class="line">第四部分：750</span><br></pre></td></tr></table></figure><p>第三步windbg进行查看找到cr3的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">DirBase:123402a0</span><br><span class="line">第一级：!dd 123402a0</span><br><span class="line">kd&gt; !dd 123402a0</span><br><span class="line">#123402a0 288a8001 00000000 28729001 00000000</span><br><span class="line">#123402b0 2886a001 00000000 287a7001 00000000</span><br><span class="line">#123402c0 1d083001 00000000 1cf44001 00000000</span><br><span class="line">#123402d0 1cec5001 00000000 1d142001 00000000</span><br><span class="line">#123402e0 1d402001 00000000 1d383001 00000000</span><br><span class="line">#123402f0 1d1c4001 00000000 1d301001 00000000</span><br><span class="line">#12340300 1cc20001 00000000 1cce1001 00000000</span><br><span class="line">#12340310 1cc62001 00000000 1cb5f001 00000000</span><br><span class="line"></span><br><span class="line">第二级：!dd 288a8000+0 后面三位是属性使用时改成000</span><br><span class="line">kd&gt; !dd 288a8000</span><br><span class="line">#288a8000 285e4067 00000000 28b43067 00000000</span><br><span class="line">#288a8010 28696067 00000000 00000000 00000000</span><br><span class="line">#288a8020 285e5067 00000000 2885e067 00000000</span><br><span class="line">#288a8030 28ca1067 00000000 29088067 00000000</span><br><span class="line">#288a8040 28757067 00000000 00000000 00000000</span><br><span class="line">#288a8050 00000000 00000000 00000000 00000000</span><br><span class="line">#288a8060 00000000 00000000 00000000 00000000</span><br><span class="line">#288a8070 00000000 00000000 00000000 00000000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第三级：!dd 285e4000+550</span><br><span class="line">kd&gt; !dd 285e4000+550</span><br><span class="line">#285e4550 2892b067 80000000 28821067 80000000</span><br><span class="line">#285e4560 28922067 80000000 286e4067 80000000</span><br><span class="line">#285e4570 28625067 80000000 28866067 80000000</span><br><span class="line">#285e4580 288e7067 80000000 28a68067 80000000</span><br><span class="line">#285e4590 288e9067 80000000 00000200 00000000</span><br><span class="line">#285e45a0 00000200 00000000 00000200 00000000</span><br><span class="line">#285e45b0 29142067 80000000 28c8d067 80000000</span><br><span class="line">#285e45c0 28ed1067 80000000 28d94067 80000000</span><br><span class="line"></span><br><span class="line">第四级：!dd 2892b000 + 750</span><br><span class="line">kd&gt; !dd 2892b000 + 750</span><br><span class="line">#2892b750 00650068 006c006c 0020006f 006f0077</span><br><span class="line">#2892b760 006c0072 00000064 00000000 00000000</span><br><span class="line">#2892b770 00000000 00000000 00000000 00000000</span><br><span class="line">#2892b780 00000000 00000000 00000000 00000000</span><br><span class="line">#2892b790 00000000 0088000c 000a0005 0008014a</span><br><span class="line">#2892b7a0 00000000 000350ac 000aaec8 000aa3e0</span><br><span class="line">#2892b7b0 00000000 00000000 00000000 00000000</span><br><span class="line">#2892b7c0 0005002e 00102341 000800cc 00000000</span><br><span class="line"></span><br><span class="line">!db 2892b000 + 750 可验证</span><br></pre></td></tr></table></figure><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/13/8IaJhgOOdFs5MUgH0tj51728826881104.png" alt="image-20241013214120803"></p><p>开启2-9-9-12：将C:\boot.ini文件中的execute改为noexecute 重启</p><h3 id="5、PDPTE结构"><a href="#5、PDPTE结构" class="headerlink" title="5、PDPTE结构"></a>5、PDPTE结构</h3><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/13/vqU1F4LaD69wRO6PBMRW1728827704407.png" alt="image-20241013215504128"></p><ul><li>PDPTE共有四项（4 &#x3D; 2^2）</li><li>35-12 存储的是页目录表的基址，低12位补0，共36位，即页目录基址。</li></ul><h3 id="6、PDE结构"><a href="#6、PDE结构" class="headerlink" title="6、PDE结构"></a>6、PDE结构</h3><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/14/EUvbwdgM5XdePwyyq7Sh1728874672666.png" alt="image-20241014105554938"></p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/14/5DdAdCyGpeseJffH5SSt1728874573241.png" alt="image-20241014105612693"></p><ul><li>当<strong>PS&#x3D;1</strong>时是大页，<strong>35-21</strong>位是<strong>大页</strong>的物理地址，这样36位的物理地址的<strong>低21位为0</strong>，这就意味着页的<strong>大小为2MB</strong>，且都是2MB对齐。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2^21 = 2MB</span><br></pre></td></tr></table></figure><ul><li>当<strong>PS&#x3D;0</strong>时，<strong>35-12位</strong>是<strong>页表基址</strong>，<strong>低12位补0</strong>，共36位</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2^12 = 4KB</span><br></pre></td></tr></table></figure><p>在所有的表项中（除了指向2MB页的页目录项），基地址都被视为36位物理地址的高24位，这就迫使页表和页都是4KB对齐的（这样，36位物理地址的低12位都为0）。当页目录项指向一个2MB的页时，基地址被视为36位物理地址的高15位，这就迫使2MB的页都是2MB对齐的（这样，36位物理地址的低21位为0）</p><h3 id="7、PTE结构"><a href="#7、PTE结构" class="headerlink" title="7、PTE结构"></a>7、PTE结构</h3><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/14/2iG4rk7bkuvblZczskD41728883346644.png" alt="image-20241014132226411"></p><p>PTE中35-12是物理页基址，24位，低12位补0</p><p>物理页基址+12位的页内偏移指向具体数据</p><h3 id="8、XD标志位"><a href="#8、XD标志位" class="headerlink" title="8、XD标志位"></a>8、XD标志位</h3><p>AMD中称为<strong>NX,即No Excetion</strong></p><p><strong>PDE&#x2F;PTE</strong>结构：</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/14/PiNTt0pQTCaB3UxSdo5s1728883493201.png" alt="image-20241014132452904"></p><p>段的属性：有可读、可写和可执行</p><p>页的属性：有可读、可写</p><p>当RET执行返回的时候，如果我修改堆栈里面的数据指向一个我提前准备好的数据（把数据当作代码来执行，漏洞都是依赖这点，比如SQL注入也是）所以，Intel就做了硬件保护，做了一个不可执行位，XD&#x3D;1时。那么你的软件溢出了也没有关系，即使你的EIP蹦到了危险的<strong>“数据区”</strong>，也是不可以执行的！在<strong>PAE分页模式</strong>下，PDE与PTE的<strong>最高位为XD&#x2F;NX位</strong></p><h1 id="TLB"><a href="#TLB" class="headerlink" title="TLB"></a>TLB</h1><h2 id="1、地址解析"><a href="#1、地址解析" class="headerlink" title="1、地址解析"></a>1、地址解析</h2><ul><li>通过一个线性地址访问一个物理页。比如：一个DWORD，其实未必真正读的是4个字节，我们<strong>先读的PDE再读PTE</strong>，最后才读的<strong>4个字节</strong>的页。</li><li>在2-9-9-12会读24个字节，如果跨页可能更多。为了提高效率，只能做记录。CPU内部做了一个表，来记录这些东西，这个表格是CPU内部的，和寄存器一样快，这个表格：TLB</li></ul><h2 id="2、TLB结构"><a href="#2、TLB结构" class="headerlink" title="2、TLB结构"></a>2、TLB结构</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/14/OgG8JZ66X8nm6AP6i8tX1728907964378.png" alt="image-20241014201244043"></p><ol><li>ATTR（属性）：属性是<strong>PDPE PDE PTE三个属性AND</strong>起来的. 如果是10-10-12 就是PDE and PTE</li><li>不同的CPU 这个表的大小不一样</li><li>只要Cr3变了，TLB立马刷新，一核一套TLB.</li></ol><p>操作系统的<strong>高2G映射基本不变</strong>，如果Cr3改了，TLB刷新 重建高2G以上很浪费。所以PDE和PTE中有个<strong>G标志位</strong>，如果<strong>G位为1刷新TLB时</strong>将<strong>不会刷新 PDE&#x2F;PTE的G位为1的页</strong>，当<strong>TLB满了</strong>，根据统计信息<strong>将不常用的地址废弃</strong>，最近最常用的保留</p><h2 id="3、TLB种类"><a href="#3、TLB种类" class="headerlink" title="3、TLB种类"></a>3、TLB种类</h2><p>TLB在X86体系的CPU里的实际应用最早是从Intel的486CPU开始的，在X86体系的CPU里边，一般都设有如下4组TLB:</p><p>第一组：缓存<strong>一般页表</strong>（4K字节页面）的<strong>指令页表缓存</strong>（Instruction-TLB）</p><p>第二组：缓存<strong>一般页表</strong>（4K字节页面）的<strong>数据页表缓存</strong>（Data-TLB）</p><p>第三组：缓存<strong>大尺寸页表</strong>（2M&#x2F;4M字节页面）的<strong>指令页表缓存</strong>（Instruction-TLB）</p><p>第四组：缓存<strong>大尺寸页表</strong>（2M&#x2F;4M字节页面）的<strong>数据页表缓存</strong>（Data-TLB）</p><h1 id="中断与异常"><a href="#中断与异常" class="headerlink" title="中断与异常"></a>中断与异常</h1><h2 id="1、什么是中断"><a href="#1、什么是中断" class="headerlink" title="1、什么是中断"></a>1、什么是中断</h2><ol><li>中断通常是由CPU外部的输入输出设备(硬件)所触发的，供外部设备通知CPU“有事情需要处理”，因此又叫<strong>中断请求</strong>(Interrupt Request)</li><li>中断请求的目的是希望CPU暂时停止执行当前正在执行的程序，转去执行中断请求所对应的中断处理例程(中断处理程序在哪有IDT表决定)</li><li>80x86有<strong>两条中断</strong>请求线</li></ol><ul><li><strong>非屏蔽中断线</strong>，称为NMI（NonMaskable Interrupt）</li><li><strong>可屏蔽中断线</strong>，称为INTR（Interrupt Require）</li></ul><h2 id="2、非可屏蔽中断如何处理"><a href="#2、非可屏蔽中断如何处理" class="headerlink" title="2、非可屏蔽中断如何处理"></a>2、非可屏蔽中断如何处理</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/14/Ay0s3FbUcyHkb6HzkWPf1728908293592.png" alt="image-20241014201812991"></p><p>当<strong>非可屏蔽中断产生</strong>时，CPU在执行完当前指令后会里面进入<strong>中断处理程序非可屏蔽中断不受EFLAG寄存器中IF位的影响</strong>，一旦发生，CPU必须处理<strong>非可屏蔽中断处理程序位于IDT表中的2号位置</strong></p><h2 id="3、可屏蔽中断"><a href="#3、可屏蔽中断" class="headerlink" title="3、可屏蔽中断"></a>3、可屏蔽中断</h2><p>在硬件级，可屏蔽中断是由一块专门的芯片来管理的，通常称为<strong>中断控制器</strong>.它负责分配中断资源和管理各个中断源发出的中断请求.为了便于标识各个中断请求，中断管理器通常用IRQ(Interrupt Request)后面加上数字来表示不同的中断</p><p>比如：<strong>在Windows中 时钟中断的IRQ编号为0  也就是：IRQ0</strong></p><h2 id="4、时钟中断"><a href="#4、时钟中断" class="headerlink" title="4、时钟中断"></a>4、时钟中断</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/14/KutN7NpiQIv7m0T6x4lA1728908581780.png" alt="image-20241014202301365"></p><p>大多数操作系统时钟中断在10-100MS之间，<strong>Windows系列</strong>为10-20MS</p><h2 id="5、可屏蔽中断如何处理"><a href="#5、可屏蔽中断如何处理" class="headerlink" title="5、可屏蔽中断如何处理"></a>5、可屏蔽中断如何处理</h2><table><thead><tr><th>（IDT表）中断号</th><th><strong>IRQ</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>0x30</td><td>IRQ0</td><td>时钟中断</td></tr><tr><td>0x31-0x3F</td><td>IRQ1-IRQ15</td><td>其他硬件设备的中断</td></tr></tbody></table><p>如果自己的程序执行时<strong>不希望CPU去处理这些中断</strong></p><ul><li>用<strong>CLI指令清空EFLAG寄存器中的IF位</strong></li><li>用<strong>STI指令设置EFLAG寄存器中的IF位</strong></li></ul><p><strong>硬件中断与IDT表中的对应关系并非固定不变</strong>的，参见：APIC（高级可编程中断控制器）</p><h2 id="6、异常"><a href="#6、异常" class="headerlink" title="6、异常"></a>6、异常</h2><p>异常通常是<strong>CPU在执行指令时检测到的某些错误</strong>，比如除0、访问无效页面等</p><p><strong>中断与异常的区别：</strong></p><p>1、<strong>中断</strong>来自于<strong>外部设备</strong>，是中断源（比如键盘）发起的，CPU是被动的.</p><p>2、<strong>异常</strong>来自于<strong>CPU本身</strong>，是CPU主动产生的</p><p>3、INT N虽然被称为“软件中断”，但其<strong>本质是异常</strong>。EFLAG的<strong>IF位</strong>对<strong>INT N无效</strong>。</p><h2 id="7、异常处理"><a href="#7、异常处理" class="headerlink" title="7、异常处理"></a>7、异常处理</h2><p>无论是由硬件设备触发的<strong>中断请求</strong>还是由CPU产生的<strong>异常</strong>，<strong>处理程序都在IDT表</strong>。</p><p>常见的异常处理程序：</p><table><thead><tr><th><strong>错误类型</strong></th><th>（IDT表）中断号</th></tr></thead><tbody><tr><td>页错误</td><td>0xE</td></tr><tr><td>段错误</td><td>0xD</td></tr><tr><td>除零错误</td><td>0x0</td></tr><tr><td>双重错误</td><td>0x8</td></tr></tbody></table><h2 id="8、缺页异常"><a href="#8、缺页异常" class="headerlink" title="8、缺页异常"></a>8、缺页异常</h2><p>缺页异常的产生：</p><p>1、当PDE&#x2F;PTE的P&#x3D;0时。</p><p>2、当PDE&#x2F;PTE的<strong>属性为只读</strong>，但程序<strong>试图写入</strong>的时一旦<strong>发生缺页异常</strong>，CPU会执行<strong>IDT表</strong>中的<strong>0xE号中断处理程序</strong>，由操作系统来接管。</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/19/mMrSmHzDS2xEasyGk0KZ1729308433756.png" alt="image-20241019112656885"></p><h1 id="控制寄存器"><a href="#控制寄存器" class="headerlink" title="控制寄存器"></a>控制寄存器</h1><h2 id="1、控制寄存器"><a href="#1、控制寄存器" class="headerlink" title="1、控制寄存器"></a>1、控制寄存器</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/18/VpXhN7I6RktNdrXMWDJ91729224760020.png" alt="image-20241018121239756"></p><p>控制寄存器用于<strong>控制和确定CPU的操作模式</strong></p><p>控制寄存器类型：<strong>Cr0、Cr1、Cr2、Cr3、Cr4、Cr8</strong></p><p>Cr0：包含系统控制标志，用于控制处理器的工作模式和状态</p><p>Cr1：保留</p><p>Cr2：包含页面错误线性地址（导致页面错误的线性地址）</p><p>Cr3：页目录表基址</p><p>Cr4：包含一组标志位，用于启用一些体系结构扩展功能，并指示操作系统或执行程序对特定处理器功能的支持情况。</p><p>Cr8：仅64位下使用</p><h2 id="2、Cr0"><a href="#2、Cr0" class="headerlink" title="2、Cr0"></a>2、Cr0</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/18/oSdkNbfPyhh8Edc9xEDq1729224065374.png" alt="image-20241018120049371"></p><p><strong>PE位</strong>：CR0的位0是启用保护（Protection Enable）标志。</p><p>PE&#x3D;1保护模式  </p><p>PE&#x3D;0 实地址模式 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个标志仅开启段级保护，而并没有启用分页机制。若要启用分页机制，那么PE和PG标志都要置位。</span><br></pre></td></tr></table></figure><p><strong>PG位</strong>：当设置该位时即开启了分页机制。在开启这个标志之前必须已经或者同时开启PE标志。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PG=0且PE=0  处理器工作在实地址模式下</span><br><span class="line">PG=0且PE=1  处理器工作在没有开启分页机制的保护模式下</span><br><span class="line"></span><br><span class="line">PG=1且PE=0  在PE没有开启的情况下  无法开启PG</span><br><span class="line">PG=1且PE=1  处理器工作在开启了分页机制的保护模式下</span><br></pre></td></tr></table></figure><p><strong>WP位</strong>：对于Intel 80486或以上的CPU，CR0的位16是写保护（Write Proctect）标志当设置该标志时，处理器会禁止超级用户程序（例如特权级0的程序）向用户级只读页面执行写操作；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当CPL&lt;3的时候：</span><br><span class="line"></span><br><span class="line">如果 WP=0 可以读写任意用户级物理页，只要线性地址有效.</span><br><span class="line">如果 WP=1 可以读取任意用户级物理页，但对于只读的物理页，则不能写.</span><br></pre></td></tr></table></figure><h2 id="3、Cr2"><a href="#3、Cr2" class="headerlink" title="3、Cr2"></a>3、Cr2</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/18/Cz6z4p0yHTIkXbfwqMtx1729224485261.png" alt="image-20241018120805029"></p><p>当CPU访问某个无效页面时，会产生缺页异常，此时，CPU会将引起异常的线性地址存放在CR2中。</p><h2 id="4、Cr4"><a href="#4、Cr4" class="headerlink" title="4、Cr4"></a>4、Cr4</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/18/V49dlb5xr1alIgO2GlO51729224547079.png" alt="image-20241018120906772"></p><p>PAE：<strong>1 是2-9-9-12分页</strong> ，<strong>0 是10-10-12分页</strong></p><p>PSE：</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/18/TFZXsSJnemit3JrWgI5E1729225049948.png" alt="image-20241018120946600"></p><h1 id="PWT-PCD"><a href="#PWT-PCD" class="headerlink" title="PWT&#x2F;PCD"></a>PWT&#x2F;PCD</h1><h2 id="1、CPU缓存"><a href="#1、CPU缓存" class="headerlink" title="1、CPU缓存"></a>1、CPU缓存</h2><ol><li><strong>CPU缓存</strong>是位于CPU与物理内存之间的<strong>临时存储器</strong>，它的容量比内存小的多但是交换速度却比内存要快得多。</li><li>CPU缓存可以做的很大，有几K、几十K、几百K 甚至上M的也有。</li></ol><p>CPU缓存与TLB的区别：</p><p>TLB：线性地址  &lt;—–&gt;  物理地址</p><p>CPU缓存：物理地址  &lt;—–&gt;  内容</p><p>所以当拿到一个程序的线性地址查询时，先会使用TLB，然后在使用CPU缓存</p><h2 id="2、关于PWT-PCD属性"><a href="#2、关于PWT-PCD属性" class="headerlink" title="2、关于PWT&#x2F;PCD属性"></a>2、关于PWT&#x2F;PCD属性</h2><p>PWT：Page Write Through</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PWT =  1 时 写Cache的时候也要将数据写入内存中。</span><br></pre></td></tr></table></figure><p>PCD：Page Cache Disable</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PCD = 1时，禁止某个页写入缓存，直接写内存。比如，做页表用的页，已经存储在TLB中了，可能不需要再缓存了</span><br></pre></td></tr></table></figure><p>具体细节参考Intel白皮书</p><h1 id="调试踩坑"><a href="#调试踩坑" class="headerlink" title="调试踩坑"></a>调试踩坑</h1><p>1、32位的系统就得用老版本的32位windbg，不要用windbg perview 暂时不知道怎么解决</p><p>2、windbg老版本遇到寄存器内容无法显示</p><p> <strong>WingDbg.dll</strong>插件放windbg相同目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!WingDbg.regfix</span><br></pre></td></tr></table></figure><p>下载地址：<a href="https://github.com/mbikovitsky/WingDbg">https://github.com/mbikovitsky/WingDbg</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;保护模式介绍&quot;&gt;&lt;a href=&quot;#保护模式介绍&quot; class=&quot;headerlink&quot; title=&quot;保护模式介绍&quot;&gt;&lt;/a&gt;保护模式介绍&lt;/h1&gt;&lt;h2 id=&quot;什么是保护模式？&quot;&gt;&lt;a href=&quot;#什么是保护模式？&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="逆向" scheme="https://gbk.cx/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="滴水中级" scheme="https://gbk.cx/tags/%E6%BB%B4%E6%B0%B4%E4%B8%AD%E7%BA%A7/"/>
    
    <category term="win内核" scheme="https://gbk.cx/tags/win%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>github actions 云编译</title>
    <link href="https://gbk.cx/p/2d289b78/"/>
    <id>https://gbk.cx/p/2d289b78/</id>
    <published>2024-09-26T14:00:27.000Z</published>
    <updated>2024-10-19T14:47:01.104Z</updated>
    
    <content type="html"><![CDATA[<p>如何使用Github Actions</p><p>如果你想要编译别人的软件，在github上。</p><p>1、fork项目到自己仓库</p><p>2、点击当前项目的Action功能</p><p>3、新建一个工作流New workflow</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/24/TmfwQI40iS8TZKf3VSmC1727154845966.png" alt="image-20240924131404902"></p><p>4、选择你当前项目是什么语言，c、java、go等。</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/24/kKzhj6uv12PC3UE3stYC1727155325725.png" alt="image-20240924132205440"></p><p>之后就会生成一个yml文件给你编辑</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/24/Zk3RxdAK6YD1rzdVck0u1727155350540.png" alt="image-20240924132230354"></p><p>你把下面的模板粘贴进去修改一下就直接编译即可</p><p>如果原项目由github&#x2F;workflows那就直接用他的，没有则可以用下面这个模板</p><h2 id="go项目编译"><a href="#go项目编译" class="headerlink" title="go项目编译"></a>go项目编译</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This workflow will build a golang project</span></span><br><span class="line"><span class="comment"># For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">Go</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&quot;main&quot;</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&quot;main&quot;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Go</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-go@v4</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">go-version:</span> <span class="string">&#x27;1.20&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">goreleaser/goreleaser-action@v4</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">args:</span> <span class="string">&quot;release --rm-dist --snapshot&quot;</span></span><br><span class="line">        <span class="attr">version:</span> <span class="number">1.23</span><span class="number">.0</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">GITHUB_TOKEN:</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span>&quot;</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">./</span> <span class="comment"># 可根据你的项目结构选择编译产物路径</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Zip</span> <span class="string">files</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">zip</span> <span class="string">-r</span> <span class="string">dist/VcenterKiller_archive.zip</span> <span class="string">dist/VcenterKiller*</span> <span class="comment">#编译后的名字 ，在虚拟机默认文件会在dist目录下</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">binaries</span> <span class="string">to</span> <span class="string">release</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">svenstaro/upload-release-action@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">         <span class="attr">repo_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">         <span class="attr">file:</span> <span class="string">dist/VcenterKiller*</span></span><br><span class="line">         <span class="attr">tag:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line">         <span class="attr">overwrite:</span> <span class="literal">true</span></span><br><span class="line">         <span class="attr">file_glob:</span> <span class="literal">true</span></span><br><span class="line">         <span class="attr">draft:</span> <span class="literal">false</span> <span class="comment">#编译完成后 会自动发布到release</span></span><br></pre></td></tr></table></figure><h2 id="java项目编译"><a href="#java项目编译" class="headerlink" title="java项目编译"></a>java项目编译</h2><h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time</span></span><br><span class="line"><span class="comment"># For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This workflow uses actions that are not certified by GitHub.</span></span><br><span class="line"><span class="comment"># They are provided by a third-party and are governed by</span></span><br><span class="line"><span class="comment"># separate terms of service, privacy policy, and support</span></span><br><span class="line"><span class="comment"># documentation.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">Java</span> <span class="string">CI</span> <span class="string">with</span> <span class="string">Maven</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&quot;main&quot;</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&quot;main&quot;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">JDK</span> <span class="number">8</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-java@v4</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">java-version:</span> <span class="string">&#x27;8&#x27;</span></span><br><span class="line">        <span class="attr">distribution:</span> <span class="string">&#x27;temurin&#x27;</span></span><br><span class="line">        <span class="attr">cache:</span> <span class="string">maven</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">with</span> <span class="string">Maven</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        mvn package assembly:single</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">binaries</span> <span class="string">to</span> <span class="string">release</span>    </span><br><span class="line">     </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">binaries</span> <span class="string">to</span> <span class="string">release</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">svenstaro/upload-release-action@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repo_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">file:</span> &#123;<span class="string">路径</span>&#125;<span class="string">/&#123;项目名&#125;*</span></span><br><span class="line">          <span class="attr">tag:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">overwrite:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">file_glob:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">draft:</span> <span class="literal">false</span> <span class="comment">#编译完成后 会自动发布到release</span></span><br></pre></td></tr></table></figure><h3 id="gradle"><a href="#gradle" class="headerlink" title="gradle"></a>gradle</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This workflow uses actions that are not certified by GitHub.</span></span><br><span class="line"><span class="comment"># They are provided by a third-party and are governed by</span></span><br><span class="line"><span class="comment"># separate terms of service, privacy policy, and support</span></span><br><span class="line"><span class="comment"># documentation.</span></span><br><span class="line"><span class="comment"># This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time</span></span><br><span class="line"><span class="comment"># For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">Java</span> <span class="string">CI</span> <span class="string">with</span> <span class="string">Gradle</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&quot;main&quot;</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&quot;main&quot;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">JDK</span> <span class="number">8</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-java@v4</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">java-version:</span> <span class="string">&#x27;8&#x27;</span></span><br><span class="line">        <span class="attr">distribution:</span> <span class="string">&#x27;temurin&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.</span></span><br><span class="line">    <span class="comment"># See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Gradle</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582</span> <span class="comment"># v4.0.0</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">gradle-version:</span> <span class="string">&#x27;8.7&#x27;</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">with</span> <span class="string">Gradle</span> <span class="string">Wrapper</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">./gradlew</span> <span class="string">shadowJar</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">binaries</span> <span class="string">to</span> <span class="string">release</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">svenstaro/upload-release-action@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repo_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">file:</span> <span class="string">build/libs/&#123;项目名&#125;*</span> <span class="comment">#这里需要修改</span></span><br><span class="line">          <span class="attr">tag:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">overwrite:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">file_glob:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">draft:</span> <span class="literal">false</span> <span class="comment">#编译完成后 会自动发布到release</span></span><br></pre></td></tr></table></figure><p>具体保存得看构建的时候日志问题</p><h2 id="rust项目编译"><a href="#rust项目编译" class="headerlink" title="rust项目编译"></a>rust项目编译</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Release</span> <span class="bullet">-</span> <span class="string">Distribute</span> <span class="string">binaries</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># If we want to make release using github interface.</span></span><br><span class="line">  <span class="comment"># release:</span></span><br><span class="line">  <span class="comment">#   types: [published]</span></span><br><span class="line">  <span class="comment"># If we want to make release by pushing new tag.</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;[0-9]+.[0-9]+.[0-9]+&#x27;</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;Cargo.toml&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;Cargo.lock&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;.github/workflows/test.yml&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">BIN_NAME:</span> <span class="string">legba</span></span><br><span class="line">  <span class="attr">PROJECT_NAME:</span> <span class="string">legba</span></span><br><span class="line">  <span class="attr">REPO_NAME:</span> <span class="string">Legba/Legba</span></span><br><span class="line">  <span class="attr">BREW_TAP:</span> <span class="string">Legba/homebrew-tap</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">fail-fast:</span> <span class="literal">false</span> <span class="comment"># don&#x27;t fail other jobs if one fails</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="comment"># aarch64-linux is failing due to python3 missing issues during tests. I&#x27;m removing it for now.</span></span><br><span class="line">        <span class="comment"># build: [x86_64-linux, aarch64-linux, x86_64-macos, aarch64-macos, x86_64-windows, x86_64-win-gnu]</span></span><br><span class="line">        <span class="attr">build:</span> [<span class="string">x86_64-linux</span>, <span class="string">x86_64-macos</span>, <span class="string">aarch64-macos</span>, <span class="string">x86_64-windows</span>, <span class="string">x86_64-win-gnu</span>]</span><br><span class="line">        <span class="attr">include:</span></span><br><span class="line">          <span class="comment"># - build: aarch64-linux</span></span><br><span class="line">          <span class="comment">#   os: ubuntu-20.04</span></span><br><span class="line">          <span class="comment">#   rust: stable</span></span><br><span class="line">          <span class="comment">#   target: aarch64-unknown-linux-gnu</span></span><br><span class="line">          <span class="comment">#   cross: true</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">build:</span> <span class="string">aarch64-macos</span></span><br><span class="line">            <span class="attr">os:</span> <span class="string">macos-latest</span></span><br><span class="line">            <span class="attr">rust:</span> <span class="string">stable</span></span><br><span class="line">            <span class="attr">target:</span> <span class="string">aarch64-apple-darwin</span></span><br><span class="line">            <span class="attr">cross:</span> <span class="literal">true</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">build:</span> <span class="string">x86_64-linux</span></span><br><span class="line">            <span class="attr">os:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">            <span class="attr">rust:</span> <span class="string">stable</span></span><br><span class="line">            <span class="attr">target:</span> <span class="string">x86_64-unknown-linux-gnu</span></span><br><span class="line">            <span class="attr">cross:</span> <span class="literal">false</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">build:</span> <span class="string">x86_64-macos</span></span><br><span class="line">            <span class="attr">os:</span> <span class="string">macos-latest</span></span><br><span class="line">            <span class="attr">rust:</span> <span class="string">stable</span></span><br><span class="line">            <span class="attr">target:</span> <span class="string">x86_64-apple-darwin</span></span><br><span class="line">            <span class="attr">cross:</span> <span class="literal">false</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">build:</span> <span class="string">x86_64-windows</span></span><br><span class="line">            <span class="attr">os:</span> <span class="string">windows-2019</span></span><br><span class="line">            <span class="attr">rust:</span> <span class="string">stable</span></span><br><span class="line">            <span class="attr">target:</span> <span class="string">x86_64-pc-windows-msvc</span></span><br><span class="line">            <span class="attr">cross:</span> <span class="literal">false</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">build:</span> <span class="string">x86_64-win-gnu</span></span><br><span class="line">            <span class="attr">os:</span> <span class="string">windows-2019</span></span><br><span class="line">            <span class="attr">rust:</span> <span class="string">stable-x86_64-gnu</span></span><br><span class="line">            <span class="attr">target:</span> <span class="string">x86_64-pc-windows-gnu</span></span><br><span class="line">            <span class="attr">cross:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">Git</span> <span class="string">config</span> <span class="string">(windows</span> <span class="string">only)</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">contains(matrix.os,</span> <span class="string">&#x27;windows&#x27;</span><span class="string">)</span> <span class="comment"># Windows is missing some dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config --global pack.windowMemory &quot;100m&quot;</span></span><br><span class="line"><span class="string">          git config --global pack.packSizeLimit &quot;100m&quot;</span></span><br><span class="line"><span class="string">          git config --global pack.threads &quot;1&quot;</span></span><br><span class="line"><span class="string">          git config --global pack.deltaCacheSize &quot;512m&quot;</span></span><br><span class="line"><span class="string"></span>      </span><br><span class="line">      <span class="comment">#- name: Windows Install dependencies</span></span><br><span class="line">      <span class="comment">#  if: contains(matrix.os, &#x27;windows&#x27;)</span></span><br><span class="line">      <span class="comment">#  run: |</span></span><br><span class="line">      <span class="comment">#      powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command &quot;iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://chocolatey.org/install.ps1&#x27;))&quot;</span></span><br><span class="line">      <span class="comment">#      SET &quot;PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&quot;</span></span><br><span class="line">      <span class="comment">#      choco install openssl -y</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span> <span class="comment">#(按实际情况修改)</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">contains(matrix.build,</span> <span class="string">&#x27;x86_64-linux&#x27;</span><span class="string">)</span> <span class="comment"># Windows is missing some dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">sudo</span> <span class="string">apt-get</span> <span class="string">update</span> <span class="string">&amp;&amp;</span> <span class="string">sudo</span> <span class="string">apt-get</span> <span class="string">install</span> <span class="string">-y</span> <span class="string">gcc-aarch64-linux-gnu</span> <span class="string">python3</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">python</span> <span class="number">3.10</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-python@v5</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">python-version:</span> <span class="string">&#x27;3.10&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">sources</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">submodules:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.rust</span> <span class="string">&#125;&#125;</span> <span class="string">toolchain</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions-rs/toolchain@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">profile:</span> <span class="string">minimal</span></span><br><span class="line">          <span class="attr">toolchain:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.rust</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">target:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.target</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">override:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">cargo</span> <span class="string">test</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions-rs/cargo@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">use-cross:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.cross</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">args:</span> <span class="string">--release</span> <span class="string">--locked</span> <span class="string">--target</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.target</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">release</span> <span class="string">binary</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions-rs/cargo@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">use-cross:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.cross</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">build</span></span><br><span class="line">          <span class="attr">args:</span> <span class="string">--release</span> <span class="string">--locked</span> <span class="string">--target</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.target</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Calculate</span> <span class="string">tag</span> <span class="string">name</span></span><br><span class="line">        <span class="comment"># if: contains(matrix.build, &#x27;linux&#x27;)</span></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          name=dev</span></span><br><span class="line"><span class="string">          if [[ $&#123;GITHUB_REF&#125; =~ refs/tags/[0-9]+.[0-9]+.[0-9]+ ]]; then</span></span><br><span class="line"><span class="string">            name=$&#123;GITHUB_REF#refs/tags/&#125;</span></span><br><span class="line"><span class="string">          fi</span></span><br><span class="line"><span class="string">          echo &quot;TAG=$name&quot; &gt;&gt; $GITHUB_ENV</span></span><br><span class="line"><span class="string"></span>        <span class="attr">id:</span> <span class="string">tagname</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">package</span> <span class="string">artifacts</span></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          mkdir dist</span></span><br><span class="line"><span class="string">          if [[ &quot;$&#123;&#123; matrix.build &#125;&#125;&quot; =~ &quot;windows&quot; ]]; then</span></span><br><span class="line"><span class="string">            cp &quot;target/$&#123;&#123; matrix.target &#125;&#125;/release/$BIN_NAME.exe&quot; &quot;dist/&quot;</span></span><br><span class="line"><span class="string">          else</span></span><br><span class="line"><span class="string">            cp &quot;target/$&#123;&#123; matrix.target &#125;&#125;/release/$BIN_NAME&quot; &quot;dist/&quot;</span></span><br><span class="line"><span class="string">          fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">          <span class="string">if</span> [[ <span class="string">&quot;$<span class="template-variable">&#123;&#123; matrix.build &#125;&#125;</span>&quot;</span> <span class="string">=~</span> <span class="string">&quot;linux&quot;</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">            <span class="string">cargo</span> <span class="string">install</span> <span class="string">cargo-deb</span></span><br><span class="line">            <span class="string">cargo</span> <span class="string">deb</span> <span class="string">--target</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.target</span> <span class="string">&#125;&#125;</span> <span class="string">--deb-version</span> <span class="string">$&#123;TAG&#125;</span></span><br><span class="line">            <span class="string">cp</span> <span class="string">&quot;target/$<span class="template-variable">&#123;&#123; matrix.target &#125;&#125;</span>/debian/legba_$&#123;TAG&#125;_amd64.deb&quot;</span> <span class="string">&quot;dist/&quot;</span> <span class="string">||</span> <span class="literal">true</span></span><br><span class="line">          <span class="string">fi</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v4.3.4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">bins-$&#123;&#123;</span> <span class="string">matrix.build</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">dist</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">package:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Package</span></span><br><span class="line">    <span class="attr">needs:</span> [<span class="string">build</span>]</span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">sources</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">submodules:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/download-artifact@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">dist</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Calculate</span> <span class="string">tag</span> <span class="string">name</span></span><br><span class="line">        <span class="comment"># if: contains(matrix.build, &#x27;linux&#x27;)</span></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          name=dev</span></span><br><span class="line"><span class="string">          if [[ $&#123;GITHUB_REF&#125; =~ refs/tags/[0-9]+.[0-9]+.[0-9]+ ]]; then</span></span><br><span class="line"><span class="string">            name=$&#123;GITHUB_REF#refs/tags/&#125;</span></span><br><span class="line"><span class="string">          fi</span></span><br><span class="line"><span class="string">          echo &quot;TAG=$name&quot; &gt;&gt; $GITHUB_ENV</span></span><br><span class="line"><span class="string"></span>        <span class="attr">id:</span> <span class="string">tagname</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">archive</span></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          set -ex</span></span><br><span class="line"><span class="string">          rm -rf tmp</span></span><br><span class="line"><span class="string">          mkdir tmp</span></span><br><span class="line"><span class="string">          for dir in dist/bins-* ; do</span></span><br><span class="line"><span class="string">              platform=$&#123;dir#&quot;dist/bins-&quot;&#125;</span></span><br><span class="line"><span class="string">              unset exe</span></span><br><span class="line"><span class="string">              if [[ $platform =~ &quot;win&quot; ]]; then</span></span><br><span class="line"><span class="string">                  exe=&quot;.exe&quot;</span></span><br><span class="line"><span class="string">              fi</span></span><br><span class="line"><span class="string">              pkgname=$PROJECT_NAME-$TAG-$platform</span></span><br><span class="line"><span class="string">              mkdir tmp/$pkgname</span></span><br><span class="line"><span class="string">              cp $dir/$BIN_NAME$exe dist/ || true</span></span><br><span class="line"><span class="string">              mv $dir/$BIN_NAME$exe tmp/$pkgname</span></span><br><span class="line"><span class="string">              chmod +x tmp/$pkgname/$BIN_NAME$exe</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">              <span class="string">if</span> [[ <span class="string">$platform</span> <span class="string">=~</span> <span class="string">&quot;linux&quot;</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">                  <span class="string">mv</span> <span class="string">&quot;$dir/legba_$&#123;TAG&#125;_amd64.deb&quot;</span> <span class="string">dist/</span> <span class="string">||</span> <span class="literal">true</span></span><br><span class="line">              <span class="string">fi</span></span><br><span class="line"></span><br><span class="line">              <span class="string">tar</span> <span class="string">cJf</span> <span class="string">dist/$pkgname.tar.xz</span> <span class="string">-C</span> <span class="string">tmp</span> <span class="string">$pkgname</span></span><br><span class="line">              <span class="string">7z</span> <span class="string">a</span> <span class="string">dist/$pkgname.zip</span> <span class="string">tmp/$pkgname</span></span><br><span class="line">          <span class="string">done</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">binaries</span> <span class="string">to</span> <span class="string">release</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">(github.event_name</span> <span class="string">==</span> <span class="string">&#x27;push&#x27;</span> <span class="string">&amp;&amp;</span> <span class="string">startsWith(github.ref,</span> <span class="string">&#x27;refs/tags/&#x27;</span><span class="string">))</span> <span class="string">||</span> <span class="string">github.event_name</span> <span class="string">==</span> <span class="string">&#x27;release&#x27;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">svenstaro/upload-release-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repo_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">file:</span> <span class="string">dist/*</span></span><br><span class="line">          <span class="attr">file_glob:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">tag:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">overwrite:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如何使用Github Actions&lt;/p&gt;
&lt;p&gt;如果你想要编译别人的软件，在github上。&lt;/p&gt;
&lt;p&gt;1、fork项目到自己仓库&lt;/p&gt;
&lt;p&gt;2、点击当前项目的Action功能&lt;/p&gt;
&lt;p&gt;3、新建一个工作流New workflow&lt;/p&gt;
&lt;p&gt;&lt;img s</summary>
      
    
    
    
    <category term="开发" scheme="https://gbk.cx/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="github-actions" scheme="https://gbk.cx/tags/github-actions/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://gbk.cx/p/4a17b156/"/>
    <id>https://gbk.cx/p/4a17b156/</id>
    <published>2024-08-31T12:55:28.664Z</published>
    <updated>2024-09-01T02:46:30.686Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
