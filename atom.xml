<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RuntimeBroker Blog&#39;s</title>
  
  
  <link href="https://gbk.cx/atom.xml" rel="self"/>
  
  <link href="https://gbk.cx/"/>
  <updated>2024-10-09T01:55:05.161Z</updated>
  <id>https://gbk.cx/</id>
  
  <author>
    <name>RuntimeBroker</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>shellcode编写</title>
    <link href="https://gbk.cx/p/22672422/"/>
    <id>https://gbk.cx/p/22672422/</id>
    <published>2024-10-08T05:52:29.000Z</published>
    <updated>2024-10-09T01:55:05.161Z</updated>
    
    <content type="html"><![CDATA[<h1>什么是ShellCode？</h1><p>不依赖环境，放到任何地方都可以执行的机器码</p><h1>shellcode编写原则</h1><ol><li>不能有全局变量</li><li>不能使用常量字符串</li><li>不能使用系统调用</li><li>不能嵌套调用其他函数</li></ol><h1>案例思路</h1><p>通过TEB结构体查找PEB，然后在PEB中找到**_PEB_LDR_DATA**，再从**_PEB_LDR_DATA<strong>中找到</strong>InLoadOrderModuleList**，这是一个链表，链表内存储的是有关所有加载dll的相关信息，可以通过这个结构来进行断链dll隐藏，<strong>_LDR_DATA_TABLE_ENTRY</strong>这是链表里的node的结构体，接下来我们遍历我们想要找到的dll，拿到DllBase，之后通过PE的知识解析，从中找到导出表，从导出表中拿到<strong>GetProcAddress</strong>和<strong>LoadLibraryA</strong>函数，之后就可以通过这两个函数进行加载dll和使用dll中的函数。</p><p>其中有关**_LDR_DATA_TABLE_ENTRY**结构体内容如下，可以参考看看</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//0x50 bytes (sizeof)</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_LDR_DATA_TABLE_ENTRY</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InLoadOrderLinks;                                    <span class="comment">//0x0</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InMemoryOrderLinks;                                  <span class="comment">//0x8</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> InInitializationOrderLinks;                          <span class="comment">//0x10</span></span><br><span class="line">    VOID* DllBase;                                                          <span class="comment">//0x18</span></span><br><span class="line">    VOID* EntryPoint;                                                       <span class="comment">//0x1c</span></span><br><span class="line">    ULONG SizeOfImage;                                                      <span class="comment">//0x20</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_UNICODE_STRING</span> FullDllName;                                     <span class="comment">//0x24</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">_UNICODE_STRING</span> BaseDllName;                                     <span class="comment">//0x2c</span></span><br><span class="line">    ULONG Flags;                                                            <span class="comment">//0x34</span></span><br><span class="line">    USHORT LoadCount;                                                       <span class="comment">//0x38</span></span><br><span class="line">    USHORT TlsIndex;                                                        <span class="comment">//0x3a</span></span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">_LIST_ENTRY</span> HashLinks;                                       <span class="comment">//0x3c</span></span><br><span class="line">        <span class="keyword">struct</span></span><br><span class="line">        &#123;</span><br><span class="line">            VOID* SectionPointer;                                           <span class="comment">//0x3c</span></span><br><span class="line">            ULONG CheckSum;                                                 <span class="comment">//0x40</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        ULONG TimeDateStamp;                                                <span class="comment">//0x44</span></span><br><span class="line">        VOID* LoadedImports;                                                <span class="comment">//0x44</span></span><br><span class="line">    &#125;;</span><br><span class="line">    VOID* EntryPointActivationContext;                                      <span class="comment">//0x48</span></span><br><span class="line">    VOID* PatchInformation;                                                 <span class="comment">//0x4c</span></span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><h1>实例代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo08shellcode.cpp : Defines the entry point for the console application.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="comment">//function</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">FARPROC</span> <span class="params">(WINAPI *GETPROCADDRESS)</span><span class="params">(HMODULE hModule,LPCSTR lpProcName)</span>; </span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(WINAPI *MESSAGEBOXA)</span><span class="params">(HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption, UINT uType)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">HMODULE</span> <span class="params">(WINAPI *LOADLIBRARYA)</span><span class="params">(LPCSTR lpLibFileName)</span>;</span><br><span class="line"></span><br><span class="line">GETPROCADDRESS PGETPROCADDRESS;</span><br><span class="line">MESSAGEBOXA PMESSAGEBOX;</span><br><span class="line">LOADLIBRARYA PLOADLIBRARY;</span><br><span class="line"></span><br><span class="line"><span class="comment">//struct</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    USHORT Length;                                                          <span class="comment">//0x0</span></span><br><span class="line">    USHORT MaximumLength;                                                   <span class="comment">//0x2</span></span><br><span class="line">    PWSTR Buffer;                                                         <span class="comment">//0x4</span></span><br><span class="line">&#125;UNICODE_STRING;</span><br><span class="line"><span class="comment">//0x0 bytes (sizeof)</span></span><br><span class="line"><span class="comment">//0x28 bytes (sizeof)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB_LDR_DATA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DWORD Length;                                                           <span class="comment">//0x0</span></span><br><span class="line">    BYTE Initialized;                                                      <span class="comment">//0x4</span></span><br><span class="line">    VOID* SsHandle;                                                         <span class="comment">//0x8</span></span><br><span class="line">    LIST_ENTRY InLoadOrderModuleList;                               <span class="comment">//0xc</span></span><br><span class="line">    LIST_ENTRY InMemoryOrderModuleList;                             <span class="comment">//0x14</span></span><br><span class="line">    LIST_ENTRY InInitializationOrderModuleList;                     <span class="comment">//0x1c</span></span><br><span class="line">    VOID* EntryInProgress;                                                  <span class="comment">//0x24</span></span><br><span class="line">&#125;PEB_LDR_DATA; </span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LIST_ENTRY InLoadOrderLinks;                                    <span class="comment">//0x0</span></span><br><span class="line">    LIST_ENTRY InMemoryOrderLinks;                                  <span class="comment">//0x8</span></span><br><span class="line">    LIST_ENTRY InInitializationOrderLinks;                          <span class="comment">//0x10</span></span><br><span class="line">    VOID* DllBase;                                                          <span class="comment">//0x18</span></span><br><span class="line">    VOID* EntryPoint;                                                       <span class="comment">//0x1c</span></span><br><span class="line">    DWORD SizeOfImage;                                                      <span class="comment">//0x20</span></span><br><span class="line">    UNICODE_STRING FullDllName;                                     <span class="comment">//0x24</span></span><br><span class="line">    UNICODE_STRING BaseDllName;                                     <span class="comment">//0x2c</span></span><br><span class="line">    DWORD Flags;                                                            <span class="comment">//0x34</span></span><br><span class="line">    WORD LoadCount;                                                       <span class="comment">//0x38</span></span><br><span class="line">    WORD TlsIndex;                                                        <span class="comment">//0x3a</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        LIST_ENTRY HashLinks;                                       <span class="comment">//0x3c</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            VOID* SectionPointer;                                           <span class="comment">//0x3c</span></span><br><span class="line">            DWORD CheckSum;                                                 <span class="comment">//0x40</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        DWORD TimeDateStamp;                                                <span class="comment">//0x44</span></span><br><span class="line">        VOID* LoadedImports;                                                <span class="comment">//0x44</span></span><br><span class="line">    &#125;;</span><br><span class="line">    VOID* EntryPointActivationContext;                <span class="comment">//0x48</span></span><br><span class="line">    VOID* PatchInformation;                                                 <span class="comment">//0x4c</span></span><br><span class="line">&#125;LDR_DATA_TABLE_ENTRY; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">strcmp</span><span class="params">(<span class="type">char</span>* buf1,<span class="type">char</span>* buf2)</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(*buf1 &amp;&amp; *buf2 &amp;&amp; *buf1 == *buf2)&#123;</span><br><span class="line">buf1++;</span><br><span class="line">buf2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*buf1 == *buf2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ToShellcode</span><span class="params">()</span>&#123;</span><br><span class="line">LDR_DATA_TABLE_ENTRY *pPLD = <span class="literal">NULL</span>,*pBeg = <span class="literal">NULL</span>;</span><br><span class="line">PGETPROCADDRESS = <span class="literal">NULL</span>;</span><br><span class="line">PLOADLIBRARY = <span class="literal">NULL</span>;</span><br><span class="line">PMESSAGEBOX = <span class="literal">NULL</span>;</span><br><span class="line">WORD *pFirst = <span class="literal">NULL</span>,*pLast = <span class="literal">NULL</span>;</span><br><span class="line">DWORD ret = <span class="number">0</span>,i=<span class="number">0</span>;</span><br><span class="line">DWORD dwKernelBase = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> szKerner32[] = &#123;<span class="string">&#x27;k&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;e&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;r&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;n&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;e&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;l&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;3&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;.&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;d&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;l&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;l&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">char</span> szUser32[] = &#123;<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> szGetProAddress[] = &#123;<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">char</span> szLoadLibrary[] = &#123;<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">char</span> szMessageBox[] = &#123;<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">char</span> lpText[] = &#123;<span class="number">0xD7</span>,<span class="number">0xA2</span>,<span class="number">0xC8</span>,<span class="number">0xEB</span>,<span class="number">0xB3</span>,<span class="number">0xC9</span>,<span class="number">0xB9</span>,<span class="number">0xA6</span>,<span class="number">0x00</span>&#125;;</span><br><span class="line"><span class="type">char</span> lpCaption[]= &#123;<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">__asm&#123;</span><br><span class="line">mov eax,fs:[<span class="number">0x30</span>] <span class="comment">//PEB</span></span><br><span class="line">mov eax,[eax+<span class="number">0xc</span>] <span class="comment">//PEB-&gt;Ldr</span></span><br><span class="line">add eax,<span class="number">0x0c</span> <span class="comment">//LDR_DATA_TABLE_ENTRY InLoadOrderModuleList</span></span><br><span class="line">mov pBeg,eax</span><br><span class="line">mov eax,[eax]</span><br><span class="line">mov pPLD,eax</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if (strcmp(szMessageBox,name))</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printf(&quot;%d:--%s--%x\n&quot;,t+1,name,funAddress);</span></span><br><span class="line"><span class="comment">PMESSAGEBOX = (MESSAGEBOX)funAddress;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//kernel32.dll</span></span><br><span class="line"><span class="keyword">while</span> (pPLD != pBeg)</span><br><span class="line">&#123;</span><br><span class="line">pLast = (WORD*)pPLD-&gt;BaseDllName.Buffer;</span><br><span class="line">pFirst = (WORD*)szKerner32;</span><br><span class="line"><span class="keyword">while</span>(!pLast &amp;&amp; *pLast == *pFirst)&#123;</span><br><span class="line">pLast++;</span><br><span class="line">pFirst++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*pLast == *pFirst)</span><br><span class="line">&#123;</span><br><span class="line">dwKernelBase = (DWORD)pPLD-&gt;DllBase;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pPLD = (LDR_DATA_TABLE_ENTRY*)pPLD-&gt;InLoadOrderLinks.Flink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)dwKernelBase;</span><br><span class="line">PIMAGE_NT_HEADERS pNTHeader = (PIMAGE_NT_HEADERS)((DWORD)pDosHeader + pDosHeader-&gt;e_lfanew);</span><br><span class="line">PIMAGE_FILE_HEADER pPEHeader = (PIMAGE_FILE_HEADER)((DWORD)pNTHeader + <span class="number">4</span>);</span><br><span class="line">PIMAGE_OPTIONAL_HEADER32 pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((DWORD)pPEHeader + IMAGE_SIZEOF_FILE_HEADER);</span><br><span class="line">DWORD dataDirectorySize = <span class="keyword">sizeof</span>(pOptionHeader-&gt;DataDirectory) / <span class="keyword">sizeof</span>(IMAGE_DATA_DIRECTORY);</span><br><span class="line">PIMAGE_DATA_DIRECTORY pDataDirectory = (PIMAGE_DATA_DIRECTORY)pOptionHeader-&gt;DataDirectory;</span><br><span class="line">PIMAGE_EXPORT_DIRECTORY pExportTable = (PIMAGE_EXPORT_DIRECTORY)(dwKernelBase + pDataDirectory-&gt;VirtualAddress);</span><br><span class="line">LPVOID funNameBase = (LPVOID)(dwKernelBase + pExportTable-&gt;AddressOfNames);</span><br><span class="line">LPVOID funAddressBase = (LPVOID)(dwKernelBase + pExportTable-&gt;AddressOfFunctions);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (DWORD t = <span class="number">0</span>;t&lt;pExportTable-&gt;NumberOfNames;t++)</span><br><span class="line">&#123;</span><br><span class="line">DWORD funAddress = dwKernelBase + *(PDWORD)((DWORD)funAddressBase+(t*<span class="number">4</span>));</span><br><span class="line"><span class="type">char</span>* name = (<span class="type">char</span>*)(dwKernelBase + *(PDWORD)((DWORD)funNameBase+(t*<span class="number">4</span>)));</span><br><span class="line"><span class="comment">//printf(&quot;name:%s\n&quot;,name);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(szGetProAddress,name))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d:--%s--%x\n&quot;</span>,t+<span class="number">1</span>,name,funAddress);</span><br><span class="line">PGETPROCADDRESS = (GETPROCADDRESS)funAddress;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(szLoadLibrary,name))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d:--%s--%x\n&quot;</span>,t+<span class="number">1</span>,name,funAddress);</span><br><span class="line">PLOADLIBRARY = (LOADLIBRARYA)funAddress;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//getchar();</span></span><br><span class="line">HMODULE hmodule = PLOADLIBRARY((LPCSTR)szUser32);</span><br><span class="line">PMESSAGEBOX = (MESSAGEBOXA)PGETPROCADDRESS(hmodule,szMessageBox);</span><br><span class="line">PMESSAGEBOX(<span class="number">0</span>,lpText,lpCaption,MB_OK);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">ToShellcode();</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;什么是ShellCode？&lt;/h1&gt;
&lt;p&gt;不依赖环境，放到任何地方都可以执行的机器码&lt;/p&gt;
&lt;h1&gt;shellcode编写原则&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;不能有全局变量&lt;/li&gt;
&lt;li&gt;不能使用常量字符串&lt;/li&gt;
&lt;li&gt;不能使用系统调用&lt;/li&gt;
&lt;li&gt;不能</summary>
      
    
    
    
    <category term="逆向" scheme="https://gbk.cx/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="shellcode" scheme="https://gbk.cx/tags/shellcode/"/>
    
    <category term="恶意代码" scheme="https://gbk.cx/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>保护模式（更新中）</title>
    <link href="https://gbk.cx/p/6c15571f/"/>
    <id>https://gbk.cx/p/6c15571f/</id>
    <published>2024-09-26T14:05:55.000Z</published>
    <updated>2024-10-11T10:21:18.306Z</updated>
    
    <content type="html"><![CDATA[<h1>保护模式介绍</h1><h2 id="什么是保护模式？">什么是保护模式？</h2><p>x86 CPU的3个模式：实模式、保护模式和虚拟8086模式。</p><h2 id="为什么不直接讲x64的？">为什么不直接讲x64的？</h2><p>x86是由Intel推出的一种复杂指令集,能够生产支持这种指令集CPU公司主要是Intel和AMD.</p><p>AMD在1999年的时候，拓展了这套指令集，称为x86-64,后改名为AMD64,Intel也兼容了这个产品，称为Intel 64.但AMD64和Intel64几乎是一样的，所以在很多资料中统称为x64.这套指令集是对x86的拓展，向下兼容的.</p><h2 id="保护模式有什么特点？">保护模式有什么特点？</h2><p>段的机制</p><p>页的机制</p><h2 id="学习保护模式有什么用？">学习保护模式有什么用？</h2><p>真正理解内核是如何运作的</p><h1>段寄存器结构</h1><h2 id="1、什么是段寄存器？">1、什么是段寄存器？</h2><p>当我们用汇编读写某一个地址时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov dword ptr ds:[0x123456]</span><br></pre></td></tr></table></figure><p>eax我们真正读写的地址是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ds.base + 0x123456</span><br></pre></td></tr></table></figure><p><strong>ES CS SS DS FS GS LDTR TR</strong>  共8个</p><h2 id="2、段寄存器的结构">2、段寄存器的结构</h2><p><img src="C:/Users/36085/AppData/Roaming/Typora/typora-user-images/image-20240923131745478.png" alt="image-20240923131745478"></p><h2 id="3、段寄存器的读写">3、段寄存器的读写</h2><h3 id="3-1-读段寄存器">3.1 读段寄存器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">比如：MOV AX,ES    只能读16位的可见部分</span><br><span class="line"></span><br><span class="line">读写LDTR的指令为：SLDT/LLDT</span><br><span class="line"></span><br><span class="line">读写TR的指令为：STR/LTR</span><br></pre></td></tr></table></figure><h3 id="3-2-写段寄存器">3.2 写段寄存器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如：MOV DS,AX   写时是写96位  </span><br></pre></td></tr></table></figure><h1>段寄存器属性探测</h1><h2 id="1、段寄存器成员简介">1、段寄存器成员简介</h2><table><thead><tr><th><strong>段寄存器</strong></th><th><strong>Selector</strong></th><th><strong>Attribute</strong></th><th><strong>Base</strong></th><th><strong>Limit</strong></th></tr></thead><tbody><tr><td>ES</td><td>0023</td><td>可读、可写</td><td>0</td><td>0xFFFFFFFF</td></tr><tr><td>CS</td><td>001B</td><td>可读、可执行</td><td>0</td><td>0xFFFFFFFF</td></tr><tr><td>SS</td><td>0023</td><td>可读、可写</td><td>0</td><td>0xFFFFFFFF</td></tr><tr><td>DS</td><td>0023</td><td>可读、可写</td><td>0</td><td>0xFFFFFFFF</td></tr><tr><td>FS</td><td>003B</td><td>可读、可写</td><td>0x7FFDE000</td><td>0xFFF</td></tr><tr><td>GS</td><td>-</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><h2 id="2、探测Attribute">2、探测Attribute</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int var = 0;</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">mov ax,ss//cs不行 cs是可读 可执行 但不可写</span><br><span class="line">mov ds,ax</span><br><span class="line">mov dword ptr ds:[var],eax</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、探测Base">3、探测Base</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int var = 1;</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">mov ax,fs</span><br><span class="line">mov gs,ax</span><br><span class="line">mov eax,gs:[0]//不要用DS 否则编译不过去</span><br><span class="line">mov dword ptr ds:[var],eax</span><br><span class="line"></span><br><span class="line">//mov edx,dword ptr ds:[0x7FFDF000]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、探测Limit">4、探测Limit</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int var = 1;</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">mov ax,fs</span><br><span class="line">mov gs,ax</span><br><span class="line">mov eax,gs:[0]//不要用DS 否则编译不过去</span><br><span class="line">mov dword ptr ds:[var],eax</span><br><span class="line"></span><br><span class="line">//mov edx,dword ptr ds:[0x7FFDF000]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>段描述符与段选择子</h1><h2 id="段描述符分类">段描述符分类</h2><p>GDT(全局描述符表)</p><p>LDT(局部描述符表)</p><p>当我们执行类似MOV DS,AX指令时，CPU会查表，根据AX的值来决定查找GDT还是LDT,查找表的什么位置，查出多少数据.</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/23/451f0XYnzy9Q5q933mQn1727069019859.png" alt="image-20240923132339229"></p><h2 id="段描述符">段描述符</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/23/jeVO88xnfdIXyGW35Aje1727069148863.png" alt="image-20240923132548637"></p><h2 id="段选择子">段选择子</h2><p>段选择子是一个16位的段描述符，该描述符指向了定义该段的段描述符.</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/23/SNBS0LpfKl2WOYKL6Fpu1727069279346.png" alt="image-20240923132759152"></p><p>**RPL：**请求特权级别</p><p><strong>TI：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TI=0  查GDT表</span><br><span class="line">TI=1  查LDT表</span><br></pre></td></tr></table></figure><p><strong>Index：<strong>处理器将索引值乘以8在加上GDT或者LDT的</strong>Base地址</strong>，就是要加载的段描述符</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/07/otGPfgORNBUZKw1bl7ib1728276445387.png" alt="image-20241007124724810"></p><h2 id="加载段描述符至段寄存器">加载段描述符至段寄存器</h2><p>除了MOV指令，我们还可以使用<strong>LES、LSS、LDS、LFS、LGS</strong>指令修改寄存器</p><p>CS不能通过上述的指令进行修改，CS为代码段，CS的改变会导致EIP的改变，要改CS，必须要保证CS与EIP一起改，后面会讲</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">char buffer[6];</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">les ecx,fword ptr ds:[buffer] //高2个字节给es，低四个字节给ecx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>[!NOTE]</p><p>注意：RPL&lt;=DPL(在数值上)</p></blockquote><h2 id="段描述符属性">段描述符属性</h2><h3 id="P位和G位">P位和G位</h3><p>1、P位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">P = 1 段描述符有效</span><br><span class="line"></span><br><span class="line">P = 0 段描述符无效</span><br></pre></td></tr></table></figure><p>2、G位（当前上限）</p><p>G = 0 Limit单位是bytes</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Limit = 000 FFFFF 前面加000</span><br></pre></td></tr></table></figure><p>G = 1 Limit单位是4KB</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Limit = FFFFF FFF 后面加FFF</span><br></pre></td></tr></table></figure><h3 id="S位和TYPE域">S位和TYPE域</h3><p><strong>1、S位</strong></p><p><strong>S = 1</strong> 代码段或者数据段描述符</p><p><strong>S = 0</strong> 系统段描述符</p><p><strong>2、TYPE域</strong></p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/23/HXEuU2qYUVnAv2baAHv61727070886381.png" alt="image-20240923135446213"></p><h4 id="分析举例">分析举例</h4><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/23/qO12uvUnMZjdKXyfRJCq1727070949252.png" alt="image-20240923135549083"></p><h4 id="数据段（DS）说明">数据段（DS）说明</h4><p>Access 访问位，表示该位最后一次被操作系统清零后，该段是否被访问过.每当处理器将该段选择符置入某个段寄存器时，就将该位置1.</p><p>Write 是否可写</p><p>E 扩展方向 （向上拓展红色部分图一，向下拓展红色部分图二）</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/23/o5OU5GmVhc4yXh4awvVR1727071015823.png" alt="image-20240923135655239"></p><h4 id="代码段（CS）说明">代码段（CS）说明</h4><p>A 访问位</p><p>R 可读位</p><p>C 一致位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C = 1 一致代码段</span><br><span class="line"></span><br><span class="line">C = 0 非一致代码段</span><br></pre></td></tr></table></figure><h4 id="系统段（SS）描述符">系统段（SS）描述符</h4><p>当S=0时，该段描述符为系统描述符.系统描述符有分为以下类型</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/23/6Nz4S19QrtwLIg7SulKq1727071223376.png" alt="image-20240923140023146"></p><h3 id="DB位">DB位</h3><p>DB位：当前实际地址最多大小</p><p>1、CS段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D = 1 采用32位寻址方式</span><br></pre></td></tr></table></figure><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/24/CVU6623mNzm5Cds5lpmY1727179769864.png" alt="image-20240924200830741"></p><p>整个地址空间是4KB</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D = 0 采用16位寻址方式</span><br><span class="line">前缀67 改变寻址方式</span><br></pre></td></tr></table></figure><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/24/quzQTBtWvaSAniiFI9ja1727179763079.png" alt="image-20240924200922757"></p><p>整个地址空间是64K</p><p>2、SS段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D = 1 隐式堆栈访问指令（如：PUSH POP CALL） 使用32位堆栈指针寄存器ESP</span><br><span class="line"></span><br><span class="line">D = 0 隐式堆栈访问指令（如：PUSH POP CALL） 使用16位堆栈指针寄存器SP</span><br></pre></td></tr></table></figure><p>3、向下拓展的数据段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D = 1 段上线为4GB</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D = 0 段上线为64KB</span><br></pre></td></tr></table></figure><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/24/isF11qm2OpVGW2hVbjkL1727179885987.png" alt="image-20240924201125839"></p><h1>段权限检查</h1><h2 id="CPU分级">CPU分级</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/24/FVfBwXHWulDjzsN3HxTt1727181087996.png" alt="image-20240924203127817"></p><h2 id="如何查看程序处于几环">如何查看程序处于几环?</h2><p>CPL(Current Privilege Level) ：当前特权级</p><p>CS和SS中存储的段选择子<strong>后2位</strong></p><p>例如：23 == 0010 0011 2b == 0010 1011  11==3 那么在三环</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/24/6Z0nGdhvUuNesBtJ2sSi1727181581236.png" alt="image-20240924203902095"></p><h2 id="DPL-Descriptor-Privilege-Level-描述符特权级别">DPL(Descriptor Privilege Level)  描述符特权级别</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/24/Ad4QrcS3lzPuduCEaidJ1727181126958.png" alt="image-20240924203206796"></p><p>DPL存储在段描述符中，规定了访问该段所需要的特权级别是什么.</p><p>通俗的理解：如果你想访问我，那么你应该具备什么特权.</p><p><strong>举例说明：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov DS,AX  如果AX指向的段DPL = 0  </span><br><span class="line"></span><br><span class="line">但当前程序的CPL = 3 这行指令是不会成功的</span><br></pre></td></tr></table></figure><h2 id="RPL-Request-Privilege-Level-请求特权级别">RPL(Request Privilege Level)  请求特权级别</h2><p>RPL是针对段选择子而言的，每个段的选择子都有自己的RPL</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/24/W6Mea376WM7nPEaMdcJX1727181187606.png" alt="image-20240924203307380"></p><p>举例说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mov ax,0008与Mov ax,000B //段选择子  </span><br><span class="line"></span><br><span class="line">Mov ds,axMov ds,ax//将段描述指向的是同一个段描述符,但RPL是不一样的.</span><br></pre></td></tr></table></figure><h2 id="数据段的权限检查">数据段的权限检查</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">比如当前程序处于0环，也就是说CPL=0</span><br><span class="line"></span><br><span class="line">Mov ax,000B//1011   RPL = 3</span><br><span class="line"></span><br><span class="line">Mov ds,ax//ax指向的段描述符的DPL = 0</span><br></pre></td></tr></table></figure><p>数据段的权限检查：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CPL &lt;= DPL  并且 RPL &lt;= DPL (数值上的比较)</span><br></pre></td></tr></table></figure><p>注意：代码段和系统段描述符中的检查方式并不一样</p><h2 id="总结">总结</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CPL  CPU当前的权限级别</span><br><span class="line"></span><br><span class="line">DPL  如果你想访问我，你应该具备什么样的权限</span><br><span class="line"></span><br><span class="line">RPL  用什么权限去访问一个段</span><br></pre></td></tr></table></figure><h1>代码跨段执行流程</h1><p>段寄存器:<code>ES,CS,SS,DS,FS,GS,LDTR,TR</code></p><p>段寄存器读写：除<strong>CS</strong>外，其他的段寄存器都可以通过<code>MOV,LES,LSS,LDS,LFS,LGS</code>指令进行修改</p><h2 id="1、代码间的跳转-段间跳转-非调用门之类的">1、代码间的跳转(段间跳转  非调用门之类的)</h2><p>段间跳转，有2种情况，即要跳转的段是一致代码段还是非一致代码段，也就是看C等于0还是1</p><p>同时修改CS与EIP的指令</p><p><strong>JMP FAR</strong> / CALL FAR / RETF / INT /IRETED</p><blockquote><p>[!NOTE]</p><p>注意：<strong>只改变EIP</strong>的指令 <strong>JMP / CALL / JCC / RET</strong></p></blockquote><h2 id="2、执行流程">2、执行流程</h2><p>CPU如何执行这行代码? <strong>JMP 0x20:0x004183D7</strong></p><p>(1) 段选择子拆分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x20 对应二进制形式 0000 0000 0010 0000</span><br><span class="line">RPL = 00   </span><br><span class="line">TI = 0</span><br><span class="line">Index = 4</span><br></pre></td></tr></table></figure><p>(2) 查表得到段描述符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TI = 0 所以查GDT表</span><br><span class="line"></span><br><span class="line">Index = 4 找到对应的段描述符</span><br><span class="line"></span><br><span class="line">四种情况可以跳转：代码段、调用门、TSS任务段、任务门</span><br></pre></td></tr></table></figure><p>(3) 权限检查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果是非一致代码段，要求:CPL == DPL 并且 RPL &lt;= DPL</span><br><span class="line"></span><br><span class="line">如果是一致代码段，要求:CPL &gt;= DPL</span><br></pre></td></tr></table></figure><p>(4) 加载段描述符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过上面的权限检查后，CPU会将段描述符加载到CS段寄存器中.</span><br></pre></td></tr></table></figure><p>(5) 代码执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CPU将 CS.Base + Offset 的值写入EIP 然后执行CS:EIP处的代码，段间跳转结束.</span><br></pre></td></tr></table></figure><p>3、总结</p><p>对于一致代码段:也就是共享的段</p><ul><li>特权级高的程序不允许访问特权级低的数据：核心态不允许访问用户态的数据</li><li>特权级低的程序可以访问到特权级高的数据，但特权级不会改变：用户态还是用户态</li></ul><p>对于普通代码段：也就是非一致代码段</p><ul><li>只允许同级访问</li><li>绝对禁止不同级别的访问：核心态不是用户态，用户态也不是核心态.</li></ul><p>直接对代码段进行JMP 或者 CALL的操作，无论目标是一致代码段还是非一致代码段，CPL都不会发生改变.如果要提升CPL的权限，只能通过<strong>调用门</strong>.</p><h2 id="3、实验">3、实验</h2><h3 id="3-1-构造段描述符">3.1 构造段描述符</h3><p>找一个非一致代码段描述符,复制一份，写入到GDT表中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kd&gt; r gdtr</span><br><span class="line">gdtr=8003f000</span><br><span class="line">kd&gt; dq 8003f000</span><br><span class="line">8003f000  00000000`00000000 00cf9b00`0000ffff</span><br><span class="line">8003f010  00cf9300`0000ffff 00cffb00`0000ffff</span><br><span class="line">8003f020  00cff300`0000ffff 80008b04`200020ab</span><br><span class="line">8003f030  ffc093df`f0000001 0040f300`00000fff</span><br><span class="line">8003f040  0000f200`0400ffff 00000000`00000000</span><br><span class="line">8003f050  80008954`b1000068 80008954`b1680068</span><br><span class="line">8003f060  00009302`2f40ffff 0000920b`80003fff</span><br><span class="line">8003f070  ff0092ff`700003ff 80009a40`0000ffff</span><br></pre></td></tr></table></figure><p>将 <strong>00cffb00`0000ffff</strong> 数据写如某个P位为0的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kd&gt; eq 8003f048 00cffb00`0000ffff(用内核工具查看新增是否成功）</span><br></pre></td></tr></table></figure><h3 id="3-2-OD中进行测试">3.2 OD中进行测试</h3><p>在OD中，执行跨段跳转  JMP FAR 004B:0041840D</p><p>成功的话，CS段寄存器就会修改成4B</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/27/vOK03qIJuFb3wCZy7sMf1727442637455.png" alt="image-20240927211027897"></p><h3 id="3-3-修改段描述符的权限级别-并再次在OD中进行测试">3.3 修改段描述符的权限级别,并再次在OD中进行测试</h3><p>将00cffb00`0000ffff 改为00cf9b00`0000ffff在OD中，执行跨段跳转  JMP FAR 004B:0041840D</p><h3 id="3-4-将该段描述符的属性更改为一致代码段">3.4 将该段描述符的属性更改为一致代码段.</h3><p>将00cffb00`0000ffff 改为00cf9f00`0000ffff在OD中，执行跨段跳转  JMP FAR 004B:0041840D</p><p>如果是一致代码段，要求:CPL &gt;= DPL (<strong>当前同样可以访问</strong>)</p><p>CPL:3</p><p>DPL:0</p><h2 id="4、总结">4、总结</h2><p>1、为了对数据进行保护，普通代码段是禁止不同级别进行访问的。用户态的代码不能访问内核的数据，同样，内核态的代码也不能访问用户态的数据.</p><p>2、如果想提供一些通用的功能，而且这些功能并不会破坏内核数据，那么可以选择一致代码段，这样低级别的程序可以在不提升CPL权限等级的情况下即可以访问.</p><p>3、如果想访问普通代码段，只有通过“调用门”等提示CPL权限，才能访问。</p><h1>长调用与短调用</h1><p>我们通过<strong>JMP FAR</strong>可以<strong>实现段间</strong>的跳转，如果要实现跨段的调用就必须要学习<strong>CALL FAR</strong>，也就是<strong>长调用</strong>.</p><p><strong>CALL FAR</strong>比<strong>JMP FAR</strong>要复杂，JMP并<strong>不影响堆栈</strong>,但CALL指令会影响.</p><h2 id="1、短调用">1、短调用</h2><p>指令格式：CALL  立即数/寄存器/内存</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/26/H0ZwWZk6Jpe6yRZRNNcK1727361345620.png" alt="image-20240926223503339"></p><p>发生改变的寄存器：ESP EIP</p><h2 id="2、长调用-跨段不提权">2、长调用(跨段不提权)</h2><p>指令格式：CALL  CS:EIP(EIP是废弃的)</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/26/NMPihSWSaCmDWoeer6uv1727361361024.png" alt="image-20240926223600844"></p><p>发生改变的寄存器：ESP EIP  CS</p><h2 id="3、长调用-跨段并提权">3、长调用(跨段并提权)</h2><p>指令格式：CALL  CS:EIP(EIP是废弃的)</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/26/clDOXb1AIUYYohoICGDg1727361380630.png" alt="image-20240926223620406"></p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/26/4UFV97QwOwh5C5hWbqRU1727361399616.png" alt="image-20240926223639418"></p><p>发生改变的寄存器：ESP EIP  CS SS</p><h2 id="4、总结-2">4、总结</h2><ol><li>跨段调用时，一旦有权限切换，就会切换堆栈.</li><li>CS的权限一旦改变，SS的权限也要随着改变，CS与SS的等级必须一样.</li><li>JMP FAR 只能跳转到同级<strong>非一致代码段</strong>，但CALL FAR可以通过调用门提权，提升CPL的权限.</li></ol><h1>调用门</h1><h2 id="1、调用门执行流程">1、调用门执行流程</h2><p>指令格式：CALL  CS:EIP(EIP是废弃的)</p><p>执行步骤：</p><ol><li>根据CS的值 查GDT表，找到对应的段描述符  这个描述符是一个调用门.</li><li>在调用门描述符中存储另一个代码段段的选择子.</li><li>选择子指向的段  <strong>段.Base + 偏移地址</strong> 就是真正要执行的地址.</li></ol><h2 id="2、门描述符">2、门描述符</h2><p><img src="C:/Users/36085/AppData/Roaming/Typora/typora-user-images/image-20240928111147890.png" alt="image-20240928111147890"></p><p>（16-31位）offset+（0-15位）offset = 跳转到函数执行的位置</p><h2 id="3、构造一个调用门（无参-提权）">3、构造一个调用门（无参  提权）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">第一步：构造大概的值</span><br><span class="line">DPL:3环 == 11</span><br><span class="line">0000 0000 0000 0000 1110 1100(调用门固定值) 0000 0000 == 0000ec00</span><br><span class="line">0000 0000 0000 1000 0000 0000 0000 0000 == 00080000</span><br><span class="line">0000ec00`00080000</span><br><span class="line">第二步：拿到方法地址</span><br><span class="line">401000</span><br><span class="line">0040ec00`00081000</span><br><span class="line">第三步：eq 80b99048 0040ec00`00081000</span><br><span class="line">第四步：运行程序</span><br></pre></td></tr></table></figure><h3 id="3-1-代码测试">3.1 代码测试</h3><p>步骤一：代码测试，并观察堆栈与寄存器的变化记录执行前的寄存器值：SS   ESP CS</p><p><strong>执行前：</strong></p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/29/yDdxxb3jn4PQUPdk70Cu1727576118622.png" alt="image-20240929101518189"></p><p><strong>执行后：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eax=00000048 ebx=7ffd9000 ecx=00000000 </span><br><span class="line">edx=00000001 esi=00000000 edi=0012fe5c</span><br><span class="line">eip=00401000 esp=a69f5ca0 ebp=0012fe5c iopl=0         </span><br><span class="line">nv up ei pl nz na pe nc</span><br><span class="line"></span><br><span class="line">cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00000206</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>变化：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CS:1b-&gt;08 </span><br><span class="line"></span><br><span class="line">ESP:12fd7c-&gt;a682bca0(高地址)</span><br><span class="line"></span><br><span class="line">SS:23-&gt;10 </span><br></pre></td></tr></table></figure><p><strong>堆栈：</strong></p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/29/gEUPyj7DpBodvihUdqwq1727576828262.png" alt="image-20240929102708081"></p><p>步骤二：在测试代码中加入特权指令并读取高2G内存</p><p>测试代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">BYTE GDT[<span class="number">6</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">DWORD dwH2Gvalue;</span><br><span class="line"><span class="type">void</span> _declspec(naked) <span class="built_in">getRegister</span>()&#123;</span><br><span class="line">__asm&#123;</span><br><span class="line">pushad</span><br><span class="line">pushfd</span><br><span class="line"></span><br><span class="line">mov eax,<span class="number">0x80b9900c</span></span><br><span class="line">mov ebx,[eax]</span><br><span class="line">mov dwH2Gvalue,ebx</span><br><span class="line">sgdt GDT <span class="comment">//获取GDT表地址</span></span><br><span class="line"></span><br><span class="line">popfd</span><br><span class="line">popad</span><br><span class="line"></span><br><span class="line">retf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printfRegister</span><span class="params">()</span></span>&#123;</span><br><span class="line">DWORD GDT_ADDR = *(PDWORD)(&amp;GDT[<span class="number">2</span>]);</span><br><span class="line">WORD GDT_LIMIT = *(PWORD)(&amp;GDT[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x %x %x\n&quot;</span>,dwH2Gvalue,GDT_ADDR,GDT_LIMIT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">testfun1</span><span class="params">()</span></span>&#123;</span><br><span class="line">__asm&#123;</span><br><span class="line">mov ebx,ebx</span><br><span class="line">mov ebx,ebx</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">*(DWORD*)&amp;buf[<span class="number">0</span>] = <span class="number">0x12345678</span>;</span><br><span class="line">*(WORD*)&amp;buf[<span class="number">4</span>] = <span class="number">0x48</span>;</span><br><span class="line"></span><br><span class="line">__asm&#123;</span><br><span class="line">call fword ptr[buf]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printfRegister</span>();</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _tmain(<span class="type">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">testfun1</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/29/xDB3Wymf8q1IxdeCNyh71727577654131.png" alt="image-20240929104053905"></p><h2 id="4、构造一个调用门（有参-提权）">4、构造一个调用门（有参  提权）</h2><p>调用门描述符：</p><p>0040EC0<strong>3</strong>`00081030 （三个参数）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kd&gt;eq 8003f048 0040EC03`00081030</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo03.cpp : 定义控制台应用程序的入口点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD x,y,z;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _declspec(naked) <span class="built_in">getRegister</span>()&#123;</span><br><span class="line">__asm&#123;</span><br><span class="line">pushad</span><br><span class="line">pushfd</span><br><span class="line"></span><br><span class="line">mov eax,[esp<span class="number">+0x24</span><span class="number">+0x8</span><span class="number">+0x8</span>]</span><br><span class="line">mov dword ptr ds:[x],eax</span><br><span class="line"></span><br><span class="line">mov eax,[esp<span class="number">+0x24</span><span class="number">+0x8</span><span class="number">+0x4</span>]</span><br><span class="line">mov dword ptr ds:[y],eax</span><br><span class="line"></span><br><span class="line">mov eax,[esp<span class="number">+0x24</span><span class="number">+0x8</span><span class="number">+0x0</span>]</span><br><span class="line">mov dword ptr ds:[z],eax</span><br><span class="line">        </span><br><span class="line">popfd</span><br><span class="line">popad</span><br><span class="line"></span><br><span class="line">retf <span class="number">0xc</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printfRegister</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x %x %x\n&quot;</span>,x,y,z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">testfun1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">*(DWORD*)&amp;buf[<span class="number">0</span>] = <span class="number">0x12345678</span>;</span><br><span class="line">*(WORD*)&amp;buf[<span class="number">4</span>] = <span class="number">0x68</span>;</span><br><span class="line"></span><br><span class="line">__asm&#123;</span><br><span class="line">push <span class="number">1</span></span><br><span class="line">push <span class="number">2</span></span><br><span class="line">push <span class="number">3</span></span><br><span class="line">call fword ptr[buf]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printfRegister</span>();</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _tmain(<span class="type">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">testfun1</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功获取到3个传入的参数</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/30/Kt8jetaX0fvdstqzSYUT1727665410690.png" alt="image-20240930110250565"></p><h2 id="5、总结">5、总结</h2><ol><li>当通过门，<strong>权限不变</strong>的时候，只会PUSH<strong>两个值</strong>：<strong>CS和返回地址</strong>新的CS的值由调用门决定</li><li>当通过门，<strong>权限改变</strong>的时候，会PUSH<strong>四个值</strong>：<strong>SS、ESP、CS和返回地址</strong>   新的<strong>CS的值由调用门</strong>决定  新的<strong>SS和ESP</strong>由<strong>TSS</strong>提供</li><li>通过门调用时，要执行哪行代码有调用门决定，但使用RETF返回时，由堆栈中压入的值决定，这就是说，进门时只能按指定路线走，出门时可以翻墙(只要改变堆栈里面的值就可以想去哪去哪)</li><li>可不可以再建个门出去呢?也就是用Call  当然可以了 前门进 后门出</li></ol><h1>中断门</h1><h2 id="使用场景">使用场景</h2><ul><li>系统调用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">大家在开发应用程序时都会使用到Windows提供的API，这些API在执行的过程中需要从3环一步一步进入到0环，这一过程就是系统调用，在这个过程中也用到了中断门（一些比较老的API使用的是中断门，但是新API中使用的都是快速调用）</span><br></pre></td></tr></table></figure><ul><li>调试</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">大家使用OD调试程序时候会使用断点，断点本质上就是在你选中的这一行中写入一个字节0xCC，也就是INT 3指令，这个指令就是用来执行中断门的。中断门也有一张表，我们称之为IDT（中断描述符表），与GDT一样，IDT也是由一系列描述符组成的，每个描述符占8字节，需要注意的是IDT表中的第一个元素不是NULL（GDT是）</span><br></pre></td></tr></table></figure><h2 id="1、IDT">1、IDT</h2><p>IDT即中断描述符表,同GDT一样，IDT也是由一系列描述符组成的，每个描述符占8个字节。但要注意的是，IDT表中的第一个元素不是NULL。在windbg中查看IDT表的基址和长度</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/30/lXbPi73p6xbUDvXFmwb01727672653729.png" alt="image-20240930130413487"></p><h2 id="2、IDT表的构成">2、IDT表的构成</h2><p>IDT表可以包含3种门描述符：</p><ul><li>任务门描述符</li><li>中断门描述符</li><li>陷阱门描述符</li></ul><h2 id="3、中断门描述符结构">3、中断门描述符结构</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/30/FBiQhnxsDRtKLOyDNhKN1727672735493.png" alt="image-20240930130535215"></p><p>当<strong>8-12位</strong>的值是<strong>01110</strong>则是一个<strong>中断门</strong></p><p>函数执行：401030</p><p>0040ee00`00081030</p><h2 id="4、构造一个中断门">4、构造一个中断门</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//INT index 指令触发寻找中断门</span></span><br><span class="line"><span class="comment">//当前（写入的地址-idt首地址）/ 8 = index索引 16进制 </span></span><br><span class="line">__asm&#123;</span><br><span class="line">    push fs</span><br><span class="line">    INT <span class="number">0x22</span></span><br><span class="line">    pop fs</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、中断执行">5、中断执行</h2><p>INTX<br>其中，X是索引，<strong>X*8+IDT的基址</strong>就是具体的中断门描述符</p><h2 id="6、中断返回">6、中断返回</h2><p>INT N指令：</p><ol><li><p>在<strong>没有权限切换时</strong>，会向堆栈<strong>PUSH 3</strong>个值，分别是：<strong>CS EFLAG EIP</strong>（返回地址）</p></li><li><p>在<strong>有权限切换时</strong>，会向堆栈<strong>PUSH 5</strong>个值，分别是：<strong>SS ESP EFLAG CS EIP</strong>（返回地址）</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/02/KWvP6brQkxNkfez6mEC51727873709073.png" alt="image-20241002205508651"></p></li></ol><p>在中断门中，<strong>不能通过RETF返回</strong>，而应该通过<strong>IRET/IRETD</strong>指令返回</p><h1>陷阱门</h1><h2 id="1、陷阱门描述符结构">1、陷阱门描述符结构</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/30/TtzQriS89EmV91AhknSR1727672874147.png" alt="image-20240930130753905"></p><p>当<strong>8-12位</strong>的值是<strong>01111</strong>则是一个<strong>陷阱门</strong></p><h2 id="2、构造一个陷阱门">2、构造一个陷阱门</h2><p>构造一个陷阱门（0040EF00 00081030）</p><p>0000ef00 00080000</p><p>0000 0000 0000 0000 1110 1111 0000 0000</p><p>写入到IDT表中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eq&gt;8003f500 0040EF00`0008103</span><br></pre></td></tr></table></figure><p>执行陷阱门</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__asm&#123;</span><br><span class="line">    INT 0x32</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、陷阱门与中断门的区别">3、陷阱门与中断门的区别</h2><p>中断门执行时，将IF位（中断标志）清零,但陷阱门不会。</p><h1>任务段</h1><p>在调用门、中断门与陷阱门中，一旦出现权限切换，那么就会有堆栈的切换。而且，由于CS的CPL发生改变，也导致了SS也必须要切换。</p><p>切换时，会有新的ESP和SS(CS是由中断门或者调用门指定)这2个值从哪里来的呢？<strong>TSS (Task-state segment )，任务状态段.</strong></p><h2 id="1、TSS的结构">1、TSS的结构</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/30/zFWvIRU2iyFyxWS9Ad7v1727701379679.png" alt="image-20240930210259383"></p><p>大小104字节</p><h2 id="2、TSS的作用">2、TSS的作用</h2><p>不要把TSS与“任务切换”联系到一起</p><p>TSS的意义就在于<strong>可以同时换掉”一堆”寄存器</strong></p><h2 id="3、TR段寄存器取值">3、TR段寄存器取值</h2><p>CPU如何找到TSS呢?  通过<strong>TR段寄存器</strong>，base找到TSS内存 Limit指的是TSS内存大小，TR段寄存器值来自于GDT表，GDT表里的TSS段描述符</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/30/BnuP5qcHZBwLYcgSi9NJ1727701491032.png" alt="image-20240930210450817"></p><h2 id="4、TSS段描述符-TSS-Descriptor">4、TSS段描述符(TSS Descriptor)</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/30/Ds8KSWImUOVrDsg0fZ5h1727701602037.png" alt="image-20240930210641733"></p><h2 id="5、TR寄存器读写">5、TR寄存器读写</h2><ol><li>将TSS段描述符加载到TR寄存器</li></ol><p>指令：LTR</p><p>说明：</p><ul><li><p>用LTR指令去装载的话仅仅是改变TR寄存器的值(96位) 并没有真正改变TSS</p></li><li><p>LTR指令只能在系统层使用</p></li><li><p>加载后TSS段描述符会状态位会发生改变</p></li></ul><h2 id="6、修改TR寄存器">6、修改TR寄存器</h2><ul><li>在Ring0 我们可以通过<strong>LTR指令</strong>去修改TR寄存器</li><li>在Ring3 我们可以通过<strong>CALL FAR</strong> 或者 <strong>JMP FAR</strong>指令来修改</li></ul><p>用JMP去访问一个代码段的时候，改变的是CS和EIP ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JMP 0x48:0x123456  如果0x48是代码段  </span><br><span class="line">执行后：CS--&gt;0x48  EIP--&gt;0x123456</span><br></pre></td></tr></table></figure><p>用JMP去访问一个任务段的时候：</p><p>如果0x48是TSS段描述符，先修改TR寄存器，在用TR.Base指向的TSS中的值修改当前的寄存器</p><p><strong>注意：</strong></p><p>如果你用<strong>JMP</strong>的话<strong>Previous Task Link的值不变</strong>和<strong>NT位不变</strong>，没有人给你填充初始值多少现在就多少，如果用<strong>Call</strong>那就会写成原来那个<strong>TSS段的选择子</strong>和<strong>NT位置1</strong></p><p>NT = 0 IRET（堆栈取 中断返回）</p><p>NT = 1 IRET （TSS:PTL 不是中断返回）</p><h2 id="7、实现任务切换">7、实现任务切换</h2><ol><li>构造完整的TSS</li><li>构造TSS段描述符</li><li>使用CALL FAR/JMP FAR指令修改TR寄存器</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> o_eax, n_esp;</span><br><span class="line"><span class="type">short</span> n_cs, n_ss;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> __declspec(naked) <span class="built_in">GetValue</span>() &#123;</span><br><span class="line">    <span class="comment">// 将寄存器保存到全局变量中</span></span><br><span class="line">    _asm &#123;</span><br><span class="line">        mov o_eax, eax</span><br><span class="line">        mov n_esp, esp</span><br><span class="line">        mov ax, cs</span><br><span class="line">        mov n_cs, ax</span><br><span class="line">        mov ax, ss</span><br><span class="line">        mov n_ss, ax</span><br><span class="line">        mov eax, o_eax</span><br><span class="line">        iretd</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> stack[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 栈</span></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">6</span>] = &#123;<span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x4B</span>, <span class="number">0x0</span>&#125;; <span class="comment">// 选择子</span></span><br><span class="line">    <span class="type">int</span> iCr3 = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Input: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%x&quot;</span>, &amp;iCr3);</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line"> </span><br><span class="line">    DWORD tss[<span class="number">0x68</span>] = &#123;</span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// Previous Task Link</span></span><br><span class="line">        <span class="comment">// 不同权限对应的ESP、SS，如果不涉及到权限切换所以可以将这些寄存器的值全部填0</span></span><br><span class="line">        <span class="number">0x00000000</span>, <span class="comment">// ESP0</span></span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// SS0</span></span><br><span class="line">        <span class="number">0x00000000</span>, <span class="comment">// ESP1</span></span><br><span class="line">        <span class="number">0x00000000</span>, <span class="comment">// SS1</span></span><br><span class="line">        <span class="number">0x00000000</span>, <span class="comment">// ESP2</span></span><br><span class="line">        <span class="number">0x00000000</span>, <span class="comment">// SS2</span></span><br><span class="line">        (DWORD)iCr3, <span class="comment">// Cr3，与页的知识有关，必须要赋值</span></span><br><span class="line">        <span class="number">0x00401020</span>,    <span class="comment">// EIP，下一次执行代码的位置，必须要赋值，在代码中就是GetValue函数的地址</span></span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// EFLAGS</span></span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// EAX</span></span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// ECX</span></span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// EDX</span></span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// EBX</span></span><br><span class="line">        (DWORD)stack, <span class="comment">// ESP，任务切换时也需要切换栈，所以在代码中我们可以声明一个数组，将其地址作为一块栈</span></span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// EBP</span></span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// ESI</span></span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// EDI</span></span><br><span class="line">        <span class="number">0x00000023</span>,    <span class="comment">// ES</span></span><br><span class="line">        <span class="number">0x00000008</span>, <span class="comment">// CS，切到0环的代码段描述符</span></span><br><span class="line">        <span class="number">0x00000010</span>,    <span class="comment">// SS，CS与SS需要保持一致</span></span><br><span class="line">        <span class="number">0x00000023</span>,    <span class="comment">// DS</span></span><br><span class="line">        <span class="number">0x00000030</span>,    <span class="comment">// FS，切到0环就是0x30，3环就是0x3B</span></span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// GS，Windows没有使用这个段寄存器所以永远是0</span></span><br><span class="line">        <span class="number">0x00000000</span>,    <span class="comment">// LDT，填0</span></span><br><span class="line">        <span class="number">0x20ac0000</span>    <span class="comment">// IO_MAP，Windows2000以后不用了，默认值</span></span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    _asm &#123;</span><br><span class="line">        push fs</span><br><span class="line">        call far fword ptr[buffer] <span class="comment">// 长调用</span></span><br><span class="line">        pop fs</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 输出寄存器的值证明完成了任务切换</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ESP: %x, CS: %x, SS: %x \n&quot;</span>, n_esp, n_cs, n_ss);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据TSS段描述符的结构构造描述符，首先获取TSS的地址，在代码中下断点然后查看地址即可：其地址为0x0012fd70</p><p>我们就得出对应TSS段描述符中Base的值，接着Limit就是TSS的大小0x68，DPL为3（3环程序访问）</p><p>Type域为0x9即表示当前描述符没有被加载过。</p><p>在Windbg中断点输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kd&gt; !process 0 0</span><br></pre></td></tr></table></figure><p>指令找到当前的程序获取Cr3的值填入到程序中</p><p>最终得出TSS段描述符为：</p><p>构造TSS段描述符：XX00e9XX`XXXX0068</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tss:0x0012fc2c</span><br><span class="line">eq 8003f0c0 0000e912`fc2c0068</span><br><span class="line"></span><br><span class="line">cr3:bf3915e0 getValue 4113d0</span><br></pre></td></tr></table></figure><p>接着我们使用eq指令在Windbg中向GDT表中写入我们构造好的TSS段描述符：</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/07/KVPM6rvgNMFV4RVM17IW1728277738860.png" alt="image-20241007130858507"></p><p>通过windbg寄存器我们可以看到<strong>EIP,ESP,CS,SS</strong>变成了我们设置的值</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/06/6KYUZZx4ktu1GyYWmOak1728229374094.png" alt="image-20241006233017065"></p><h1>任务门</h1><h2 id="1、任务门描述符">1、任务门描述符</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/07/8U3GIHx0xIIpIhNHfYQq1728268454890.png" alt="image-20241007103357569"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">构造任务门：0000 e500 00c3 0000</span><br><span class="line">&gt;eq 8003f500 0000e500`00c30000</span><br></pre></td></tr></table></figure><h2 id="2、任务门执行过程：">2、任务门执行过程：</h2><ol><li><p>INT N</p></li><li><p>查IDT表，找到中断门描述符</p></li><li><p>通过中断门描述符，查GDT表，找到任务段描述符</p></li><li><p>使用TSS段中的值修改寄存器</p></li><li><p>IRETD返回</p></li></ol><h2 id="3、代码">3、代码</h2><p>段选择子一定要计算正确</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">idt <span class="number">0x20</span> 构造中断门</span><br><span class="line">eq <span class="number">8003</span>f500 <span class="number">0000e500</span>`<span class="number">004</span>b0000</span><br><span class="line">gdt <span class="number">0x4b</span> 构造任务门 <span class="number">0100</span> <span class="number">1011</span> RPL：<span class="number">3</span>   </span><br><span class="line">eq <span class="number">8003</span>f048 <span class="number">0000e912</span>`fd700068 </span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo07.cpp : Defines the entry point for the console application.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line">DWORD dwOK,dwESP,dwCS;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> __declspec(naked) <span class="built_in">GetValue</span>() &#123;</span><br><span class="line">    <span class="comment">// 将寄存器保存到全局变量中</span></span><br><span class="line">dwOK = <span class="number">1</span>;</span><br><span class="line">_asm &#123;</span><br><span class="line">mov eax,esp</span><br><span class="line">mov dwESP,eax</span><br><span class="line">mov ax,cs</span><br><span class="line">mov word ptr[dwCS],ax</span><br><span class="line"></span><br><span class="line">iretd</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> stack[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 栈</span></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">6</span>] = &#123;<span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0xC0</span>, <span class="number">0x0</span>&#125;; <span class="comment">// 选择子</span></span><br><span class="line">    <span class="type">int</span> iCr3 = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Input: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%x&quot;</span>, &amp;iCr3);</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line"></span><br><span class="line">DWORD tss[<span class="number">0x68</span>] = &#123;</span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// Previous Task Link</span></span><br><span class="line"><span class="comment">// 不同权限对应的ESP、SS，如果不涉及到权限切换所以可以将这些寄存器的值全部填0</span></span><br><span class="line"><span class="number">0x00000000</span>, <span class="comment">// ESP0</span></span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// SS0</span></span><br><span class="line"><span class="number">0x00000000</span>, <span class="comment">// ESP1</span></span><br><span class="line"><span class="number">0x00000000</span>, <span class="comment">// SS1</span></span><br><span class="line"><span class="number">0x00000000</span>, <span class="comment">// ESP2</span></span><br><span class="line"><span class="number">0x00000000</span>, <span class="comment">// SS2</span></span><br><span class="line">(DWORD)iCr3, <span class="comment">// Cr3，与页的知识有关，必须要赋值</span></span><br><span class="line">(ULONG)GetValue,    <span class="comment">// EIP，下一次执行代码的位置，必须要赋值，在代码中就是GetValue函数的地址</span></span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// EFLAGS</span></span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// EAX</span></span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// ECX</span></span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// EDX</span></span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// EBX</span></span><br><span class="line">(DWORD)stack, <span class="comment">// ESP，任务切换时也需要切换栈，所以在代码中我们可以声明一个数组，将其地址作为一块栈</span></span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// EBP</span></span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// ESI</span></span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// EDI</span></span><br><span class="line"><span class="number">0x00000023</span>,    <span class="comment">// ES</span></span><br><span class="line"><span class="number">0x00000008</span>, <span class="comment">// CS，切到0环的代码段描述符</span></span><br><span class="line"><span class="number">0x00000010</span>,    <span class="comment">// SS，CS与SS需要保持一致</span></span><br><span class="line"><span class="number">0x00000023</span>,    <span class="comment">// DS</span></span><br><span class="line"><span class="number">0x00000030</span>,    <span class="comment">// FS，切到0环就是0x30，3环就是0x3B</span></span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// GS，Windows没有使用这个段寄存器所以永远是0</span></span><br><span class="line"><span class="number">0x00000000</span>,    <span class="comment">// LDT，填0</span></span><br><span class="line"><span class="number">0x20ac0000</span>    <span class="comment">// IO_MAP，Windows2000以后不用了，默认值</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;TSS:%x\n&quot;</span>,&amp;tss);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line">_asm &#123;</span><br><span class="line">PUSH fs</span><br><span class="line">        INT <span class="number">0X20</span> <span class="comment">// 长调用</span></span><br><span class="line">POP fs</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 输出寄存器的值证明完成了任务切换</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ESP: %x, CS: %x, dwOK: %x \n&quot;</span>, dwESP, dwCS, dwOK);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/07/8bKiXthV3rimrarhDWpU1728275715272.png" alt="image-20241007123514913"></p><h1>分页</h1><h2 id="1、4GB空间">1、4GB空间</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/08/5Z5pnViAPg3J2BOweGCM1728390412723.png" alt="image-20241008202635838"></p><h2 id="2、物理地址">2、物理地址</h2><p>地址分为：线性地址、有效地址、物理地址</p><p>指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MOV eax,dword ptr ds:[0x12345678]</span><br></pre></td></tr></table></figure><p>0x12345678是属于<strong>有效地址</strong></p><p>ds.base+0x12345678 = <strong>线性地址</strong></p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/08/LKXCn1fsd7zd5qKDjvyr1728390530624.png" alt="image-20241008202850335"></p><h2 id="3、物理在哪">3、物理在哪</h2><p>每个进程<strong>都有</strong>一个CR3，(准确的说是都一个CR3的值，CR3本身是个寄存器，一个核，只有一套寄存器)</p><p>CR3指向<strong>一个物理页</strong>，一共<strong>4096字节</strong></p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/08/n8OTgsBNZHoo6Mnf1kXc1728390608743.png" alt="image-20241008203008475"></p><h2 id="4、设置分页方式">4、设置分页方式</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/08/IELhIlCFpMemfDTyLMOS1728390680467.png" alt="image-20241008203120205"></p><p>将<strong>noexecute</strong> 改成 <strong>execute</strong></p><h2 id="5、如何寻找物理地址（10-10-12为例）">5、如何寻找物理地址（10-10-12为例）</h2><p>10-10-12 一共32位，把一段地址拆分成三段10位 10位 12位</p><p>用notepad为例</p><p>第一步先在notepad中写入一个hello world字符串，然后使用CE进行搜索拿到字符串在进程中的地址</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/08/DILMxADdzyK8ixm2nJRD1728395216103.png" alt="image-20241008214655861"></p><p>第二步拆分地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">000AA750 hello world字符串在进程中地址</span><br><span class="line">第一级：0000 0000 00     0</span><br><span class="line">第二级：00 1010 1010     AA * 4 = 2A8</span><br><span class="line">第三级：750</span><br></pre></td></tr></table></figure><p>第三步windbg进行查看找到cr3的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DirBase:314b7000</span><br><span class="line">第一级：!dd cr3+0 = 314b7000+0</span><br><span class="line">第二级：!dd 3192d067+2A8 后面三位是属性使用时改成000</span><br><span class="line">第三级：!dd 319ed000+750</span><br><span class="line">!db 319ed000+750 可验证</span><br></pre></td></tr></table></figure><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/08/n0Fqj6QeO61jV0UAt96v1728395638354.png" alt="image-20241008215310139"></p><h1>PDE/PTE</h1><h2 id="PDE和PTE介绍">PDE和PTE介绍</h2><h3 id="1、PDE与PTE">1、PDE与PTE</h3><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/08/EjZKLDijGZbnrSOdBkU61728396699049.png" alt="image-20241008221138790"></p><h3 id="2、指向相同物理页">2、指向相同物理页</h3><ol><li>PTE可以没有物理页，且只能对应一个物理页</li><li>多个PTE也可以指向同一个物理页</li></ol><h3 id="3、实验-2">3、实验</h3><p>查分0地址，观察PTE是否有物理页</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/10/oFPnasTRJaT0o3mZTDWj1728560982174.png" alt="image-20241010194913603"></p><p>向0地址读写数据</p><p>没有挂物理页之前向0地址写入不了数据</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/10/Q9MSk8uXQly3SxtL4xX21728561255881.png" alt="image-20241010195415642"></p><p>手动挂物理页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">x的线性地址：0x1245052</span><br><span class="line">先拆分</span><br><span class="line">0000 0001 00 10</span><br><span class="line">10 0100 0101 245 * 4 = 914</span><br><span class="line">052</span><br><span class="line"></span><br><span class="line">DirBase: 553aa000</span><br><span class="line">第一级：</span><br><span class="line">kd&gt; !dd 553aa000</span><br><span class="line">#553aa000 54ad6067 54a95067 00000000 00000000</span><br><span class="line">#553aa010 00000000 00000000 00000000 00000000</span><br><span class="line">#553aa020 00000000 00000000 00000000 00000000</span><br><span class="line">#553aa030 00000000 00000000 00000000 00000000</span><br><span class="line">#553aa040 00000000 00000000 00000000 00000000</span><br><span class="line">#553aa050 00000000 00000000 00000000 00000000</span><br><span class="line">#553aa060 00000000 00000000 00000000 00000000</span><br><span class="line">#553aa070 00000000 00000000 00000000 00000000</span><br><span class="line"></span><br><span class="line">第二级：</span><br><span class="line">kd&gt; !dd 54ad6000 + 914</span><br><span class="line">#54ad6914 54df5067 00000000 00000000 00000000</span><br><span class="line">#54ad6924 00000000 00000000 00000000 00000000</span><br><span class="line">#54ad6934 00000000 00000000 00000000 5576d067</span><br><span class="line">#54ad6944 5556f067 553b0067 00000000 00000000</span><br><span class="line">#54ad6954 00000000 00000000 00000000 00000000</span><br><span class="line">#54ad6964 00000000 00000000 00000000 00000000</span><br><span class="line">#54ad6974 00000000 00000000 00000000 0bb31025</span><br><span class="line">#54ad6984 0bb32025 00000000 00000000 00000000</span><br><span class="line"></span><br><span class="line">查询下0地址</span><br><span class="line">kd&gt; !dd 54ad6000</span><br><span class="line">#54ad6000 00000000 00000000 00000000 00000000</span><br><span class="line">#54ad6010 00000000 00000000 00000000 00000000</span><br><span class="line">#54ad6020 00000000 00000000 00000000 00000000</span><br><span class="line">#54ad6030 00000000 00000000 00000000 00000000</span><br><span class="line">#54ad6040 54e97067 00000000 00000000 00000000</span><br><span class="line">#54ad6050 00000000 00000000 00000000 00000000</span><br><span class="line">#54ad6060 00000000 00000000 00000000 00000000</span><br><span class="line">#54ad6070 00000000 00000000 00000000 00000000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">把当前x变量的物理页挂到0地址上</span><br><span class="line">kd&gt; !ed 54ad6000 54df5067</span><br></pre></td></tr></table></figure><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/10/FsSU6DnjN4Z7Ds622Wg81728562002027.png" alt="image-20241010200641755"></p><h2 id="PDE-PTE-属性">PDE/PTE 属性</h2><h3 id="1、物理页的属性">1、物理页的属性</h3><p>物理页的属性 = PDE属性 &amp; PTE属性</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/10/vtQpUVZN57SBHaANIgUL1728566338534.png" alt="image-20241010211858304"></p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/10/zkjSN56LctzrSPqnSDvv1728566358327.png" alt="image-20241010211917981"></p><h3 id="2、P位">2、P位</h3><p>PDE和PTE的P位<strong>如果为0</strong>，则当前的物理页是<strong>无效的</strong>，反之</p><h3 id="3、R-W位">3、R/W位</h3><p>R/W = 0 只读</p><p>R/W = 1 可读可写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>,str);</span><br><span class="line">getchar();</span><br><span class="line"></span><br><span class="line">DWORD dwAddr = (DWORD)str;</span><br><span class="line"></span><br><span class="line">*(<span class="type">char</span>*)dwAddr = <span class="string">&#x27;M&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>已知上面代码在正常情况下str是只读的，后续是无法对它进行任何的修改操作的。会报错内存访问异常</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/10/EukWg5CVN7ypP6QawaLB1728566675871.png" alt="image-20241010212435527"></p><p>现在我们对R/W位进行查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">0x420f94</span><br><span class="line">Dirbase:7f4fd000</span><br><span class="line">0000 0000 01 </span><br><span class="line">00 0010 0000 20*4=80</span><br><span class="line">f94</span><br><span class="line">第一级：</span><br><span class="line">kd&gt; !dd 7f4fd000</span><br><span class="line">#7f4fd000 7f57b067 7f7ba067 00000000 00000000</span><br><span class="line">#7f4fd010 00000000 00000000 00000000 00000000</span><br><span class="line">#7f4fd020 00000000 00000000 00000000 00000000</span><br><span class="line">#7f4fd030 00000000 00000000 00000000 00000000</span><br><span class="line">#7f4fd040 00000000 00000000 00000000 00000000</span><br><span class="line">#7f4fd050 00000000 00000000 00000000 00000000</span><br><span class="line">#7f4fd060 00000000 00000000 00000000 00000000</span><br><span class="line">#7f4fd070 00000000 00000000 00000000 00000000</span><br><span class="line">第二级：</span><br><span class="line">kd&gt; !dd 7f7ba000 + 80</span><br><span class="line">#7f7ba080 7c7e9025 00000000 00de4067 7f895067</span><br><span class="line">#7f7ba090 7fe65067 7eb52027 00000000 00000000</span><br><span class="line">#7f7ba0a0 00000000 00000000 00000000 00000000</span><br><span class="line">#7f7ba0b0 00000000 00000000 00000000 00000000</span><br><span class="line">#7f7ba0c0 7f8dc067 7f7dd067 7f5de067 7f8df067</span><br><span class="line">#7f7ba0d0 7f960067 7fe61067 00de2067 7fbe3067</span><br><span class="line">#7f7ba0e0 00000000 00000000 00000000 00000000</span><br><span class="line">#7f7ba0f0 00000000 00000000 00000000 00000000</span><br></pre></td></tr></table></figure><p>可以看到<code>7c7e9025</code>对应的二进制是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0111 1100 0111 1110 1001 0000 0010 0101  而第二位R/W：0 说明是只读权限</span><br></pre></td></tr></table></figure><p>现在我们修改<code>7c7e9025</code>-&gt;<code>7c7e9027</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0111 1100 0111 1110 1001 0000 0010 0111</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">kd&gt; !dd 7f7ba000 + 80</span><br><span class="line">#7f7ba080 7c7e9025 00000000 00de4067 7f895067</span><br><span class="line">#7f7ba090 7fe65067 7eb52027 00000000 00000000</span><br><span class="line">#7f7ba0a0 00000000 00000000 00000000 00000000</span><br><span class="line">#7f7ba0b0 00000000 00000000 00000000 00000000</span><br><span class="line">#7f7ba0c0 7f8dc067 7f7dd067 7f5de067 7f8df067</span><br><span class="line">#7f7ba0d0 7f960067 7fe61067 00de2067 7fbe3067</span><br><span class="line">#7f7ba0e0 00000000 00000000 00000000 00000000</span><br><span class="line">#7f7ba0f0 00000000 00000000 00000000 00000000</span><br><span class="line">kd&gt; !ed 7f7ba080 7c7e9027</span><br><span class="line">kd&gt; !dd 7f7ba000 + 80</span><br><span class="line">#7f7ba080 7c7e9027 00000000 00de4067 7f895067</span><br><span class="line">#7f7ba090 7fe65067 7eb52027 00000000 00000000</span><br><span class="line">#7f7ba0a0 00000000 00000000 00000000 00000000</span><br><span class="line">#7f7ba0b0 00000000 00000000 00000000 00000000</span><br><span class="line">#7f7ba0c0 7f8dc067 7f7dd067 7f5de067 7f8df067</span><br><span class="line">#7f7ba0d0 7f960067 7fe61067 00de2067 7fbe3067</span><br><span class="line">#7f7ba0e0 00000000 00000000 00000000 00000000</span><br><span class="line">#7f7ba0f0 00000000 00000000 00000000 00000000</span><br></pre></td></tr></table></figure><p>现在看看效果</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/10/5rUlUtc4KVv6ScBKCYCj1728567369260.png" alt="image-20241010213609008"></p><p>已经成功！！！！</p><h3 id="4、U-S-位">4、U/S 位</h3><p>U/S = 0 特权用户</p><p>U/S = 1 普通用户</p><h3 id="5、P-S位">5、P/S位</h3><p>只对<strong>PDE有意义</strong>，PS == PageSize的意思</p><p>当PS==1的时候 PDE直接指向物理页 无PTE,低22位是页内偏移。也就是说少一级偏移。</p><h3 id="6、A位">6、A位</h3><p>是否被访问（读或者写）过</p><p>A=1 访问过</p><blockquote><p>[!NOTE]</p><p>即使只访问一个字节也会导致PDE或者PTE置1</p></blockquote><h3 id="7、D位">7、D位</h3><p>脏位：是否被写过</p><p>0：没有被写过</p><p>1：被写过</p><h1>页目录表基址</h1><h2 id="1、拆分C0300000">1、拆分C0300000</h2><p>当前我们用DbgView程序为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">DirBase: 238ef000</span><br><span class="line"></span><br><span class="line">1100 0000 00 00 300 * 4 = C00</span><br><span class="line">11 0000 0000 300 * 4 = C00</span><br><span class="line">000</span><br><span class="line"></span><br><span class="line">kd&gt; !dd 238ef000   </span><br><span class="line">#238ef000 237e3067 2365a067 23a2e067 23a1c067 </span><br><span class="line">#238ef010 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef020 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef030 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef040 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef050 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef060 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef070 00000000 00000000 00000000 00000000</span><br><span class="line"></span><br><span class="line">kd&gt; !dd 238ef000 + C00 PDT</span><br><span class="line">#238efc00 238ef063 236f0063 00000000 09f55163 //PDE</span><br><span class="line">#238efc10 09f56163 09f57163 09f58163 09f59163</span><br><span class="line">#238efc20 09f5a163 09f5b163 09f5c163 09f5d163</span><br><span class="line">#238efc30 09f5e163 09f5f163 09f60163 09f61163</span><br><span class="line">#238efc40 09f62163 09f63163 09f64163 09f65163</span><br><span class="line">#238efc50 09f66163 09f67163 09f68163 09f69163</span><br><span class="line">#238efc60 09f6a163 09f6b163 09f2c163 09f2d163</span><br><span class="line">#238efc70 09f2e163 09f2f163 09f30163 09f31163</span><br><span class="line"></span><br><span class="line">kd&gt; !dd 238ef000 + C00 PTT</span><br><span class="line">#238efc00 238ef063 236f0063 00000000 09f55163 //PTE</span><br><span class="line">#238efc10 09f56163 09f57163 09f58163 09f59163</span><br><span class="line">#238efc20 09f5a163 09f5b163 09f5c163 09f5d163</span><br><span class="line">#238efc30 09f5e163 09f5f163 09f60163 09f61163</span><br><span class="line">#238efc40 09f62163 09f63163 09f64163 09f65163</span><br><span class="line">#238efc50 09f66163 09f67163 09f68163 09f69163</span><br><span class="line">#238efc60 09f6a163 09f6b163 09f2c163 09f2d163</span><br><span class="line">#238efc70 09f2e163 09f2f163 09f30163 09f31163</span><br><span class="line"></span><br><span class="line">kd&gt; !dd 238ef000</span><br><span class="line">#238ef000 237e3067 2365a067 23a2e067 23a1c067</span><br><span class="line">#238ef010 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef020 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef030 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef040 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef050 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef060 00000000 00000000 00000000 00000000</span><br><span class="line">#238ef070 00000000 00000000 00000000 00000000</span><br></pre></td></tr></table></figure><p><strong>结论：C0300000存储的值就是PDT</strong></p><p>如果我们要访问第N个PDE，那么有如下<strong>公式：0xC0300000 + N*4</strong></p><h2 id="2、页目录表基址-XP系统-10-10-12分页模式">2、页目录表基址(XP系统 10-10-12分页模式)</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/11/HgPnOhamozV6l5oGK3Ea1728637589862.png" alt="image-20241011170520641"></p><h2 id="3、总结">3、总结</h2><ol><li>通过<strong>0xC0300000</strong>找到的<strong>物理页就是页目录表</strong></li><li>这个物理页即是<strong>页目录表本身也是页表</strong></li><li>页目录表是一张<strong>特殊的页表</strong>，每一项PTE指向的<strong>不是普通的物理页</strong>，而是<strong>指向其他的页表</strong></li><li>如果我们要<strong>访问第N个PDE</strong>，那么有如下公式：<strong>0xC0300000 + N*4</strong></li></ol><h1>页表基址</h1><h2 id="1、拆分C0000000-C0001000">1、拆分C0000000 / C0001000</h2><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/10/11/oARaKWKx3PJEATdWyNeZ1728638528527.png" alt="image-20241011172208229"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">DirBase: 238ef000</span><br><span class="line">第一个PTT</span><br><span class="line">kd&gt; !dd 237e3000</span><br><span class="line">#237e3000 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3010 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3020 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3030 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3040 23764067 00000000 00000000 00000000</span><br><span class="line">#237e3050 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3060 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3070 00000000 00000000 00000000 00000000</span><br><span class="line"></span><br><span class="line">第二个PTT</span><br><span class="line">kd&gt; !dd 2365a000 </span><br><span class="line">#2365a000 238ee025 23951025 23b08025 239c9025</span><br><span class="line">#2365a010 23b0a025 23b8b025 23b4c025 2388d025</span><br><span class="line">#2365a020 2398e025 238cf025 00000000 238ad025</span><br><span class="line">#2365a030 00000000 239ef025 23830025 23931025</span><br><span class="line">#2365a040 00000000 23833025 23734025 237f5025</span><br><span class="line">#2365a050 236f6025 23677025 00000000 00000000</span><br><span class="line">#2365a060 00000000 00000000 00000000 00000000</span><br><span class="line">#2365a070 00000000 235a5025 23666025 00000000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C0000000</span><br><span class="line">11 0000 0000 300 * 4 = C00</span><br><span class="line">00 0000 0000 0</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">kd&gt; !dd 238ef000 + C00</span><br><span class="line">kd&gt; !dd 238ef000 + 0</span><br><span class="line">kd&gt; !dd 237e3000 </span><br><span class="line">#237e3000 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3010 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3020 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3030 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3040 23764067 00000000 00000000 00000000</span><br><span class="line">#237e3050 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3060 00000000 00000000 00000000 00000000</span><br><span class="line">#237e3070 00000000 00000000 00000000 00000000</span><br><span class="line">用0xC0000000查出来的是第一张PTT表</span><br><span class="line"></span><br><span class="line">C0001000 </span><br><span class="line">11 0000 0000 300 * 4 = C00</span><br><span class="line">00 0000 0001 1 * 4 = 0</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">kd&gt; !dd 238ef000 + C00</span><br><span class="line">kd&gt; !dd 238ef000 + 4</span><br><span class="line">kd&gt; !dd 2365a000</span><br><span class="line">#2365a000 238ee025 23951025 23b08025 239c9025</span><br><span class="line">#2365a010 23b0a025 23b8b025 23b4c025 2388d025</span><br><span class="line">#2365a020 2398e025 238cf025 00000000 238ad025</span><br><span class="line">#2365a030 00000000 239ef025 23830025 23931025</span><br><span class="line">#2365a040 00000000 23833025 23734025 237f5025</span><br><span class="line">#2365a050 236f6025 23677025 00000000 00000000</span><br><span class="line">#2365a060 00000000 00000000 00000000 00000000</span><br><span class="line">#2365a070 00000000 235a5025 23666025 00000000</span><br><span class="line">用0xC0001000查出来的是第二张PTT表</span><br></pre></td></tr></table></figure><p>线性地址0xc0000000映射到第一个PTT表，0xC0000000到0xC0001000刚好相差0x1000相当于一个页，后续地址增量为4KB，对应不同的PTT表。 0xc0300000线性地址用于访问页目录表本身。掌握0xc0000000和0xc0300000两个地址等于掌握了进程内存的读写权限</p><p><strong>总结：</strong></p><ul><li>页表被映射到了从<strong>0xC0000000</strong>到<strong>0xC03FFFFF</strong>的<strong>4M地址</strong>空间</li><li>在这<strong>1024</strong>个表中有一张特殊的表：<strong>页目录表</strong></li><li>页目录被映射到了<strong>0xC0300000开始处的4K地址</strong>空间</li></ul><h2 id="2、总结">2、总结</h2><p>PDI与PTI：10-10-12  （I就是Index）</p><p>访问页目录表的公式：0xC0300000 + PDI*4</p><p>访问页表的公式：0xC0000000 + PDI*4096 + PTI*4</p><h1>调试踩坑</h1><p>1、32位的系统就得用老版本的32位windbg，不要用windbg perview 暂时不知道怎么解决</p><p>2、windbg老版本遇到寄存器内容无法显示</p><p><strong>WingDbg.dll</strong>插件放windbg相同目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!WingDbg.regfix</span><br></pre></td></tr></table></figure><p>下载地址：<a href="https://github.com/mbikovitsky/WingDbg">https://github.com/mbikovitsky/WingDbg</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;保护模式介绍&lt;/h1&gt;
&lt;h2 id=&quot;什么是保护模式？&quot;&gt;什么是保护模式？&lt;/h2&gt;
&lt;p&gt;x86 CPU的3个模式：实模式、保护模式和虚拟8086模式。&lt;/p&gt;
&lt;h2 id=&quot;为什么不直接讲x64的？&quot;&gt;为什么不直接讲x64的？&lt;/h2&gt;
&lt;p&gt;x86是由Intel</summary>
      
    
    
    
    <category term="逆向" scheme="https://gbk.cx/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="滴水中级" scheme="https://gbk.cx/tags/%E6%BB%B4%E6%B0%B4%E4%B8%AD%E7%BA%A7/"/>
    
    <category term="win内核" scheme="https://gbk.cx/tags/win%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>github actions 云编译</title>
    <link href="https://gbk.cx/p/2d289b78/"/>
    <id>https://gbk.cx/p/2d289b78/</id>
    <published>2024-09-26T14:00:27.000Z</published>
    <updated>2024-10-09T05:21:42.676Z</updated>
    
    <content type="html"><![CDATA[<p>如何使用Github Actions</p><p>如果你想要编译别人的软件，在github上。</p><p>1、fork项目到自己仓库</p><p>2、点击当前项目的Action功能</p><p>3、新建一个工作流New workflow</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/24/TmfwQI40iS8TZKf3VSmC1727154845966.png" alt="image-20240924131404902"></p><p>4、选择你当前项目是什么语言，c、java、go等。</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/24/kKzhj6uv12PC3UE3stYC1727155325725.png" alt="image-20240924132205440"></p><p>之后就会生成一个yml文件给你编辑</p><p><img src="https://pic.gitlab.cx/gh/RuntimeBroker/pic-bed/img/2024/09/24/Zk3RxdAK6YD1rzdVck0u1727155350540.png" alt="image-20240924132230354"></p><p>你把下面的模板粘贴进去修改一下就直接编译即可</p><p>如果原项目由github/workflows那就直接用他的，没有则可以用下面这个模板</p><h2 id="go项目编译">go项目编译</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This workflow will build a golang project</span></span><br><span class="line"><span class="comment"># For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">Go</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&quot;main&quot;</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&quot;main&quot;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Go</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-go@v4</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">go-version:</span> <span class="string">&#x27;1.20&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">goreleaser/goreleaser-action@v4</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">args:</span> <span class="string">&quot;release --rm-dist --snapshot&quot;</span></span><br><span class="line">        <span class="attr">version:</span> <span class="number">1.23</span><span class="number">.0</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">GITHUB_TOKEN:</span> <span class="string">&quot;$<span class="template-variable">&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span>&quot;</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">./</span> <span class="comment"># 可根据你的项目结构选择编译产物路径</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Zip</span> <span class="string">files</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">zip</span> <span class="string">-r</span> <span class="string">dist/VcenterKiller_archive.zip</span> <span class="string">dist/VcenterKiller*</span> <span class="comment">#编译后的名字 ，在虚拟机默认文件会在dist目录下</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">binaries</span> <span class="string">to</span> <span class="string">release</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">svenstaro/upload-release-action@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">         <span class="attr">repo_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">         <span class="attr">file:</span> <span class="string">dist/VcenterKiller*</span></span><br><span class="line">         <span class="attr">tag:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line">         <span class="attr">overwrite:</span> <span class="literal">true</span></span><br><span class="line">         <span class="attr">file_glob:</span> <span class="literal">true</span></span><br><span class="line">         <span class="attr">draft:</span> <span class="literal">false</span> <span class="comment">#编译完成后 会自动发布到release</span></span><br></pre></td></tr></table></figure><h2 id="java项目编译">java项目编译</h2><h3 id="maven">maven</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time</span></span><br><span class="line"><span class="comment"># For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This workflow uses actions that are not certified by GitHub.</span></span><br><span class="line"><span class="comment"># They are provided by a third-party and are governed by</span></span><br><span class="line"><span class="comment"># separate terms of service, privacy policy, and support</span></span><br><span class="line"><span class="comment"># documentation.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">Java</span> <span class="string">CI</span> <span class="string">with</span> <span class="string">Maven</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&quot;main&quot;</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&quot;main&quot;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">JDK</span> <span class="number">8</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-java@v4</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">java-version:</span> <span class="string">&#x27;8&#x27;</span></span><br><span class="line">        <span class="attr">distribution:</span> <span class="string">&#x27;temurin&#x27;</span></span><br><span class="line">        <span class="attr">cache:</span> <span class="string">maven</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">with</span> <span class="string">Maven</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        mvn package assembly:single</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">binaries</span> <span class="string">to</span> <span class="string">release</span>    </span><br><span class="line">     </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">binaries</span> <span class="string">to</span> <span class="string">release</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">svenstaro/upload-release-action@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repo_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">file:</span> &#123;<span class="string">路径</span>&#125;<span class="string">/&#123;项目名&#125;*</span></span><br><span class="line">          <span class="attr">tag:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">overwrite:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">file_glob:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">draft:</span> <span class="literal">false</span> <span class="comment">#编译完成后 会自动发布到release</span></span><br></pre></td></tr></table></figure><h3 id="gradle">gradle</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This workflow uses actions that are not certified by GitHub.</span></span><br><span class="line"><span class="comment"># They are provided by a third-party and are governed by</span></span><br><span class="line"><span class="comment"># separate terms of service, privacy policy, and support</span></span><br><span class="line"><span class="comment"># documentation.</span></span><br><span class="line"><span class="comment"># This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time</span></span><br><span class="line"><span class="comment"># For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">Java</span> <span class="string">CI</span> <span class="string">with</span> <span class="string">Gradle</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&quot;main&quot;</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&quot;main&quot;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">JDK</span> <span class="number">8</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-java@v4</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">java-version:</span> <span class="string">&#x27;8&#x27;</span></span><br><span class="line">        <span class="attr">distribution:</span> <span class="string">&#x27;temurin&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.</span></span><br><span class="line">    <span class="comment"># See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Gradle</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582</span> <span class="comment"># v4.0.0</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">gradle-version:</span> <span class="string">&#x27;8.7&#x27;</span></span><br><span class="line">        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">with</span> <span class="string">Gradle</span> <span class="string">Wrapper</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">./gradlew</span> <span class="string">shadowJar</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">binaries</span> <span class="string">to</span> <span class="string">release</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">svenstaro/upload-release-action@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repo_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">file:</span> <span class="string">build/libs/&#123;项目名&#125;*</span> <span class="comment">#这里需要修改</span></span><br><span class="line">          <span class="attr">tag:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">overwrite:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">file_glob:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">draft:</span> <span class="literal">false</span> <span class="comment">#编译完成后 会自动发布到release</span></span><br></pre></td></tr></table></figure><p>具体保存得看构建的时候日志问题</p><h2 id="rust项目编译">rust项目编译</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Release</span> <span class="bullet">-</span> <span class="string">Distribute</span> <span class="string">binaries</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># If we want to make release using github interface.</span></span><br><span class="line">  <span class="comment"># release:</span></span><br><span class="line">  <span class="comment">#   types: [published]</span></span><br><span class="line">  <span class="comment"># If we want to make release by pushing new tag.</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;[0-9]+.[0-9]+.[0-9]+&#x27;</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;Cargo.toml&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;Cargo.lock&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;.github/workflows/test.yml&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">BIN_NAME:</span> <span class="string">legba</span></span><br><span class="line">  <span class="attr">PROJECT_NAME:</span> <span class="string">legba</span></span><br><span class="line">  <span class="attr">REPO_NAME:</span> <span class="string">Legba/Legba</span></span><br><span class="line">  <span class="attr">BREW_TAP:</span> <span class="string">Legba/homebrew-tap</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">fail-fast:</span> <span class="literal">false</span> <span class="comment"># don&#x27;t fail other jobs if one fails</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="comment"># aarch64-linux is failing due to python3 missing issues during tests. I&#x27;m removing it for now.</span></span><br><span class="line">        <span class="comment"># build: [x86_64-linux, aarch64-linux, x86_64-macos, aarch64-macos, x86_64-windows, x86_64-win-gnu]</span></span><br><span class="line">        <span class="attr">build:</span> [<span class="string">x86_64-linux</span>, <span class="string">x86_64-macos</span>, <span class="string">aarch64-macos</span>, <span class="string">x86_64-windows</span>, <span class="string">x86_64-win-gnu</span>]</span><br><span class="line">        <span class="attr">include:</span></span><br><span class="line">          <span class="comment"># - build: aarch64-linux</span></span><br><span class="line">          <span class="comment">#   os: ubuntu-20.04</span></span><br><span class="line">          <span class="comment">#   rust: stable</span></span><br><span class="line">          <span class="comment">#   target: aarch64-unknown-linux-gnu</span></span><br><span class="line">          <span class="comment">#   cross: true</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">build:</span> <span class="string">aarch64-macos</span></span><br><span class="line">            <span class="attr">os:</span> <span class="string">macos-latest</span></span><br><span class="line">            <span class="attr">rust:</span> <span class="string">stable</span></span><br><span class="line">            <span class="attr">target:</span> <span class="string">aarch64-apple-darwin</span></span><br><span class="line">            <span class="attr">cross:</span> <span class="literal">true</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">build:</span> <span class="string">x86_64-linux</span></span><br><span class="line">            <span class="attr">os:</span> <span class="string">ubuntu-20.04</span></span><br><span class="line">            <span class="attr">rust:</span> <span class="string">stable</span></span><br><span class="line">            <span class="attr">target:</span> <span class="string">x86_64-unknown-linux-gnu</span></span><br><span class="line">            <span class="attr">cross:</span> <span class="literal">false</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">build:</span> <span class="string">x86_64-macos</span></span><br><span class="line">            <span class="attr">os:</span> <span class="string">macos-latest</span></span><br><span class="line">            <span class="attr">rust:</span> <span class="string">stable</span></span><br><span class="line">            <span class="attr">target:</span> <span class="string">x86_64-apple-darwin</span></span><br><span class="line">            <span class="attr">cross:</span> <span class="literal">false</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">build:</span> <span class="string">x86_64-windows</span></span><br><span class="line">            <span class="attr">os:</span> <span class="string">windows-2019</span></span><br><span class="line">            <span class="attr">rust:</span> <span class="string">stable</span></span><br><span class="line">            <span class="attr">target:</span> <span class="string">x86_64-pc-windows-msvc</span></span><br><span class="line">            <span class="attr">cross:</span> <span class="literal">false</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">build:</span> <span class="string">x86_64-win-gnu</span></span><br><span class="line">            <span class="attr">os:</span> <span class="string">windows-2019</span></span><br><span class="line">            <span class="attr">rust:</span> <span class="string">stable-x86_64-gnu</span></span><br><span class="line">            <span class="attr">target:</span> <span class="string">x86_64-pc-windows-gnu</span></span><br><span class="line">            <span class="attr">cross:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">Git</span> <span class="string">config</span> <span class="string">(windows</span> <span class="string">only)</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">contains(matrix.os,</span> <span class="string">&#x27;windows&#x27;</span><span class="string">)</span> <span class="comment"># Windows is missing some dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config --global pack.windowMemory &quot;100m&quot;</span></span><br><span class="line"><span class="string">          git config --global pack.packSizeLimit &quot;100m&quot;</span></span><br><span class="line"><span class="string">          git config --global pack.threads &quot;1&quot;</span></span><br><span class="line"><span class="string">          git config --global pack.deltaCacheSize &quot;512m&quot;</span></span><br><span class="line"><span class="string"></span>      </span><br><span class="line">      <span class="comment">#- name: Windows Install dependencies</span></span><br><span class="line">      <span class="comment">#  if: contains(matrix.os, &#x27;windows&#x27;)</span></span><br><span class="line">      <span class="comment">#  run: |</span></span><br><span class="line">      <span class="comment">#      powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command &quot;iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://chocolatey.org/install.ps1&#x27;))&quot;</span></span><br><span class="line">      <span class="comment">#      SET &quot;PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&quot;</span></span><br><span class="line">      <span class="comment">#      choco install openssl -y</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span> <span class="comment">#(按实际情况修改)</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">contains(matrix.build,</span> <span class="string">&#x27;x86_64-linux&#x27;</span><span class="string">)</span> <span class="comment"># Windows is missing some dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">sudo</span> <span class="string">apt-get</span> <span class="string">update</span> <span class="string">&amp;&amp;</span> <span class="string">sudo</span> <span class="string">apt-get</span> <span class="string">install</span> <span class="string">-y</span> <span class="string">gcc-aarch64-linux-gnu</span> <span class="string">python3</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">python</span> <span class="number">3.10</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-python@v5</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">python-version:</span> <span class="string">&#x27;3.10&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">sources</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">submodules:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.rust</span> <span class="string">&#125;&#125;</span> <span class="string">toolchain</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions-rs/toolchain@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">profile:</span> <span class="string">minimal</span></span><br><span class="line">          <span class="attr">toolchain:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.rust</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">target:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.target</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">override:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">cargo</span> <span class="string">test</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions-rs/cargo@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">use-cross:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.cross</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">test</span></span><br><span class="line">          <span class="attr">args:</span> <span class="string">--release</span> <span class="string">--locked</span> <span class="string">--target</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.target</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">release</span> <span class="string">binary</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions-rs/cargo@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">use-cross:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.cross</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">build</span></span><br><span class="line">          <span class="attr">args:</span> <span class="string">--release</span> <span class="string">--locked</span> <span class="string">--target</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.target</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Calculate</span> <span class="string">tag</span> <span class="string">name</span></span><br><span class="line">        <span class="comment"># if: contains(matrix.build, &#x27;linux&#x27;)</span></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          name=dev</span></span><br><span class="line"><span class="string">          if [[ $&#123;GITHUB_REF&#125; =~ refs/tags/[0-9]+.[0-9]+.[0-9]+ ]]; then</span></span><br><span class="line"><span class="string">            name=$&#123;GITHUB_REF#refs/tags/&#125;</span></span><br><span class="line"><span class="string">          fi</span></span><br><span class="line"><span class="string">          echo &quot;TAG=$name&quot; &gt;&gt; $GITHUB_ENV</span></span><br><span class="line"><span class="string"></span>        <span class="attr">id:</span> <span class="string">tagname</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">package</span> <span class="string">artifacts</span></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          mkdir dist</span></span><br><span class="line"><span class="string">          if [[ &quot;$&#123;&#123; matrix.build &#125;&#125;&quot; =~ &quot;windows&quot; ]]; then</span></span><br><span class="line"><span class="string">            cp &quot;target/$&#123;&#123; matrix.target &#125;&#125;/release/$BIN_NAME.exe&quot; &quot;dist/&quot;</span></span><br><span class="line"><span class="string">          else</span></span><br><span class="line"><span class="string">            cp &quot;target/$&#123;&#123; matrix.target &#125;&#125;/release/$BIN_NAME&quot; &quot;dist/&quot;</span></span><br><span class="line"><span class="string">          fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">          <span class="string">if</span> [[ <span class="string">&quot;$<span class="template-variable">&#123;&#123; matrix.build &#125;&#125;</span>&quot;</span> <span class="string">=~</span> <span class="string">&quot;linux&quot;</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">            <span class="string">cargo</span> <span class="string">install</span> <span class="string">cargo-deb</span></span><br><span class="line">            <span class="string">cargo</span> <span class="string">deb</span> <span class="string">--target</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.target</span> <span class="string">&#125;&#125;</span> <span class="string">--deb-version</span> <span class="string">$&#123;TAG&#125;</span></span><br><span class="line">            <span class="string">cp</span> <span class="string">&quot;target/$<span class="template-variable">&#123;&#123; matrix.target &#125;&#125;</span>/debian/legba_$&#123;TAG&#125;_amd64.deb&quot;</span> <span class="string">&quot;dist/&quot;</span> <span class="string">||</span> <span class="literal">true</span></span><br><span class="line">          <span class="string">fi</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v4.3.4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">bins-$&#123;&#123;</span> <span class="string">matrix.build</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">dist</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">package:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Package</span></span><br><span class="line">    <span class="attr">needs:</span> [<span class="string">build</span>]</span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">sources</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">submodules:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/download-artifact@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">dist</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Calculate</span> <span class="string">tag</span> <span class="string">name</span></span><br><span class="line">        <span class="comment"># if: contains(matrix.build, &#x27;linux&#x27;)</span></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          name=dev</span></span><br><span class="line"><span class="string">          if [[ $&#123;GITHUB_REF&#125; =~ refs/tags/[0-9]+.[0-9]+.[0-9]+ ]]; then</span></span><br><span class="line"><span class="string">            name=$&#123;GITHUB_REF#refs/tags/&#125;</span></span><br><span class="line"><span class="string">          fi</span></span><br><span class="line"><span class="string">          echo &quot;TAG=$name&quot; &gt;&gt; $GITHUB_ENV</span></span><br><span class="line"><span class="string"></span>        <span class="attr">id:</span> <span class="string">tagname</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">archive</span></span><br><span class="line">        <span class="attr">shell:</span> <span class="string">bash</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          set -ex</span></span><br><span class="line"><span class="string">          rm -rf tmp</span></span><br><span class="line"><span class="string">          mkdir tmp</span></span><br><span class="line"><span class="string">          for dir in dist/bins-* ; do</span></span><br><span class="line"><span class="string">              platform=$&#123;dir#&quot;dist/bins-&quot;&#125;</span></span><br><span class="line"><span class="string">              unset exe</span></span><br><span class="line"><span class="string">              if [[ $platform =~ &quot;win&quot; ]]; then</span></span><br><span class="line"><span class="string">                  exe=&quot;.exe&quot;</span></span><br><span class="line"><span class="string">              fi</span></span><br><span class="line"><span class="string">              pkgname=$PROJECT_NAME-$TAG-$platform</span></span><br><span class="line"><span class="string">              mkdir tmp/$pkgname</span></span><br><span class="line"><span class="string">              cp $dir/$BIN_NAME$exe dist/ || true</span></span><br><span class="line"><span class="string">              mv $dir/$BIN_NAME$exe tmp/$pkgname</span></span><br><span class="line"><span class="string">              chmod +x tmp/$pkgname/$BIN_NAME$exe</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">              <span class="string">if</span> [[ <span class="string">$platform</span> <span class="string">=~</span> <span class="string">&quot;linux&quot;</span> ]]<span class="string">;</span> <span class="string">then</span></span><br><span class="line">                  <span class="string">mv</span> <span class="string">&quot;$dir/legba_$&#123;TAG&#125;_amd64.deb&quot;</span> <span class="string">dist/</span> <span class="string">||</span> <span class="literal">true</span></span><br><span class="line">              <span class="string">fi</span></span><br><span class="line"></span><br><span class="line">              <span class="string">tar</span> <span class="string">cJf</span> <span class="string">dist/$pkgname.tar.xz</span> <span class="string">-C</span> <span class="string">tmp</span> <span class="string">$pkgname</span></span><br><span class="line">              <span class="string">7z</span> <span class="string">a</span> <span class="string">dist/$pkgname.zip</span> <span class="string">tmp/$pkgname</span></span><br><span class="line">          <span class="string">done</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">binaries</span> <span class="string">to</span> <span class="string">release</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">(github.event_name</span> <span class="string">==</span> <span class="string">&#x27;push&#x27;</span> <span class="string">&amp;&amp;</span> <span class="string">startsWith(github.ref,</span> <span class="string">&#x27;refs/tags/&#x27;</span><span class="string">))</span> <span class="string">||</span> <span class="string">github.event_name</span> <span class="string">==</span> <span class="string">&#x27;release&#x27;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">svenstaro/upload-release-action@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repo_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">file:</span> <span class="string">dist/*</span></span><br><span class="line">          <span class="attr">file_glob:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">tag:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">overwrite:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如何使用Github Actions&lt;/p&gt;
&lt;p&gt;如果你想要编译别人的软件，在github上。&lt;/p&gt;
&lt;p&gt;1、fork项目到自己仓库&lt;/p&gt;
&lt;p&gt;2、点击当前项目的Action功能&lt;/p&gt;
&lt;p&gt;3、新建一个工作流New workflow&lt;/p&gt;
&lt;p&gt;&lt;img s</summary>
      
    
    
    
    <category term="开发" scheme="https://gbk.cx/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="github actions" scheme="https://gbk.cx/tags/github-actions/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://gbk.cx/p/4a17b156/"/>
    <id>https://gbk.cx/p/4a17b156/</id>
    <published>2024-08-31T12:55:28.664Z</published>
    <updated>2024-09-01T02:46:30.686Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
